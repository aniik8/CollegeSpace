{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/utils\n */\n\n/**\n * Returns the caption model element from a given image element. Returns `null` if no caption is found.\n *\n * @param {module:engine/model/element~Element} imageModelElement\n * @returns {module:engine/model/element~Element|null}\n */\nexport function getCaptionFromImageModelElement(imageModelElement) {\n  for (const node of imageModelElement.getChildren()) {\n    if (!!node && node.is('element', 'caption')) {\n      return node;\n    }\n  }\n\n  return null;\n}\n/**\n * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n *\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @param {module:engine/model/selection~Selection} selection\n * @returns {module:engine/model/element~Element|null}\n */\n\nexport function getCaptionFromModelSelection(imageUtils, selection) {\n  const captionElement = selection.getFirstPosition().findAncestor('caption');\n\n  if (!captionElement) {\n    return null;\n  }\n\n  if (imageUtils.isBlockImage(captionElement.parent)) {\n    return captionElement;\n  }\n\n  return null;\n}\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\n * inside the image `<figure>` element.\n *\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @param {module:engine/view/element~Element} element\n * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\n * cannot be matched.\n */\n\nexport function matchImageCaptionViewElement(imageUtils, element) {\n  // Convert only captions for images.\n  if (element.name == 'figcaption' && imageUtils.isBlockImageView(element.parent)) {\n    return {\n      name: true\n    };\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-image/src/imagecaption/utils.js"],"names":["getCaptionFromImageModelElement","imageModelElement","node","getChildren","is","getCaptionFromModelSelection","imageUtils","selection","captionElement","getFirstPosition","findAncestor","isBlockImage","parent","matchImageCaptionViewElement","element","name","isBlockImageView"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,+BAAT,CAA0CC,iBAA1C,EAA8D;AACpE,OAAM,MAAMC,IAAZ,IAAoBD,iBAAiB,CAACE,WAAlB,EAApB,EAAsD;AACrD,QAAK,CAAC,CAACD,IAAF,IAAUA,IAAI,CAACE,EAAL,CAAS,SAAT,EAAoB,SAApB,CAAf,EAAiD;AAChD,aAAOF,IAAP;AACA;AACD;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,4BAAT,CAAuCC,UAAvC,EAAmDC,SAAnD,EAA+D;AACrE,QAAMC,cAAc,GAAGD,SAAS,CAACE,gBAAV,GAA6BC,YAA7B,CAA2C,SAA3C,CAAvB;;AAEA,MAAK,CAACF,cAAN,EAAuB;AACtB,WAAO,IAAP;AACA;;AAED,MAAKF,UAAU,CAACK,YAAX,CAAyBH,cAAc,CAACI,MAAxC,CAAL,EAAwD;AACvD,WAAOJ,cAAP;AACA;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,4BAAT,CAAuCP,UAAvC,EAAmDQ,OAAnD,EAA6D;AACnE;AACA,MAAKA,OAAO,CAACC,IAAR,IAAgB,YAAhB,IAAgCT,UAAU,CAACU,gBAAX,CAA6BF,OAAO,CAACF,MAArC,CAArC,EAAqF;AACpF,WAAO;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAP;AACA;;AAED,SAAO,IAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/utils\n */\n\n/**\n * Returns the caption model element from a given image element. Returns `null` if no caption is found.\n *\n * @param {module:engine/model/element~Element} imageModelElement\n * @returns {module:engine/model/element~Element|null}\n */\nexport function getCaptionFromImageModelElement( imageModelElement ) {\n\tfor ( const node of imageModelElement.getChildren() ) {\n\t\tif ( !!node && node.is( 'element', 'caption' ) ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n *\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @param {module:engine/model/selection~Selection} selection\n * @returns {module:engine/model/element~Element|null}\n */\nexport function getCaptionFromModelSelection( imageUtils, selection ) {\n\tconst captionElement = selection.getFirstPosition().findAncestor( 'caption' );\n\n\tif ( !captionElement ) {\n\t\treturn null;\n\t}\n\n\tif ( imageUtils.isBlockImage( captionElement.parent ) ) {\n\t\treturn captionElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\n * inside the image `<figure>` element.\n *\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @param {module:engine/view/element~Element} element\n * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\n * cannot be matched.\n */\nexport function matchImageCaptionViewElement( imageUtils, element ) {\n\t// Convert only captions for images.\n\tif ( element.name == 'figcaption' && imageUtils.isBlockImageView( element.parent ) ) {\n\t\treturn { name: true };\n\t}\n\n\treturn null;\n}\n"]},"metadata":{},"sourceType":"module"}