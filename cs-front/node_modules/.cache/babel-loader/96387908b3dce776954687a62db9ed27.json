{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/tableproperites\n */\n\n/**\n * Conversion helper for upcasting attributes using normalized styles.\n *\n * @param {module:engine/conversion/conversion~Conversion} conversion\n * @param {Object} options\n * @param {String} options.modelAttribute The attribute to set.\n * @param {String} options.styleName The style name to convert.\n * @param {String} options.viewElement The view element name that should be converted.\n * @param {String} options.defaultValue The default value for the specified `modelAttribute`.\n * @param {Boolean} [options.reduceBoxSides=false]\n */\nexport function upcastStyleToAttribute(conversion, options) {\n  const {\n    viewElement,\n    defaultValue,\n    modelAttribute,\n    styleName,\n    reduceBoxSides = false\n  } = options;\n  conversion.for('upcast').attributeToAttribute({\n    view: {\n      name: viewElement,\n      styles: {\n        [styleName]: /[\\s\\S]+/\n      }\n    },\n    model: {\n      key: modelAttribute,\n      value: viewElement => {\n        const normalized = viewElement.getNormalizedStyle(styleName);\n        const value = reduceBoxSides ? reduceBoxSidesValue(normalized) : normalized;\n\n        if (defaultValue !== value) {\n          return value;\n        }\n      }\n    }\n  });\n}\n/**\n * Conversion helper for upcasting border styles for view elements.\n *\n * @param {module:engine/conversion/conversion~Conversion} conversion\n * @param {String} viewElementName\n * @param {Object} modelAttributes\n * @param {Object} defaultBorder The default border values.\n * @param {String} defaultBorder.color The default `borderColor` value.\n * @param {String} defaultBorder.style The default `borderStyle` value.\n * @param {String} defaultBorder.width The default `borderWidth` value.\n */\n\nexport function upcastBorderStyles(conversion, viewElementName, modelAttributes, defaultBorder) {\n  conversion.for('upcast').add(dispatcher => dispatcher.on('element:' + viewElementName, (evt, data, conversionApi) => {\n    // If the element was not converted by element-to-element converter,\n    // we should not try to convert the style. See #8393.\n    if (!data.modelRange) {\n      return;\n    } // Check the most detailed properties. These will be always set directly or\n    // when using the \"group\" properties like: `border-(top|right|bottom|left)` or `border`.\n\n\n    const stylesToConsume = ['border-top-width', 'border-top-color', 'border-top-style', 'border-bottom-width', 'border-bottom-color', 'border-bottom-style', 'border-right-width', 'border-right-color', 'border-right-style', 'border-left-width', 'border-left-color', 'border-left-style'].filter(styleName => data.viewItem.hasStyle(styleName));\n\n    if (!stylesToConsume.length) {\n      return;\n    }\n\n    const matcherPattern = {\n      styles: stylesToConsume\n    }; // Try to consume appropriate values from consumable values list.\n\n    if (!conversionApi.consumable.test(data.viewItem, matcherPattern)) {\n      return;\n    }\n\n    const modelElement = [...data.modelRange.getItems({\n      shallow: true\n    })].pop();\n    conversionApi.consumable.consume(data.viewItem, matcherPattern);\n    const normalizedBorder = {\n      style: data.viewItem.getNormalizedStyle('border-style'),\n      color: data.viewItem.getNormalizedStyle('border-color'),\n      width: data.viewItem.getNormalizedStyle('border-width')\n    };\n    const reducedBorder = {\n      style: reduceBoxSidesValue(normalizedBorder.style),\n      color: reduceBoxSidesValue(normalizedBorder.color),\n      width: reduceBoxSidesValue(normalizedBorder.width)\n    };\n\n    if (reducedBorder.style !== defaultBorder.style) {\n      conversionApi.writer.setAttribute(modelAttributes.style, reducedBorder.style, modelElement);\n    }\n\n    if (reducedBorder.color !== defaultBorder.color) {\n      conversionApi.writer.setAttribute(modelAttributes.color, reducedBorder.color, modelElement);\n    }\n\n    if (reducedBorder.width !== defaultBorder.width) {\n      conversionApi.writer.setAttribute(modelAttributes.width, reducedBorder.width, modelElement);\n    }\n  }));\n}\n/**\n * Conversion helper for downcasting an attribute to a style.\n *\n * @param {module:engine/conversion/conversion~Conversion} conversion\n * @param {Object} options\n * @param {String} options.modelElement\n * @param {String} options.modelAttribute\n * @param {String} options.styleName\n */\n\nexport function downcastAttributeToStyle(conversion, _ref) {\n  let {\n    modelElement,\n    modelAttribute,\n    styleName\n  } = _ref;\n  conversion.for('downcast').attributeToAttribute({\n    model: {\n      name: modelElement,\n      key: modelAttribute\n    },\n    view: modelAttributeValue => ({\n      key: 'style',\n      value: {\n        [styleName]: modelAttributeValue\n      }\n    })\n  });\n}\n/**\n * Conversion helper for downcasting attributes from the model table to a view table (not to `<figure>`).\n *\n * @param {module:engine/conversion/conversion~Conversion} conversion\n * @param {Object} options\n * @param {String} options.modelAttribute\n * @param {String} options.styleName\n */\n\nexport function downcastTableAttribute(conversion, _ref2) {\n  let {\n    modelAttribute,\n    styleName\n  } = _ref2;\n  conversion.for('downcast').add(dispatcher => dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi) => {\n    const {\n      item,\n      attributeNewValue\n    } = data;\n    const {\n      mapper,\n      writer\n    } = conversionApi;\n\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const table = [...mapper.toViewElement(item).getChildren()].find(child => child.is('element', 'table'));\n\n    if (attributeNewValue) {\n      writer.setStyle(styleName, attributeNewValue, table);\n    } else {\n      writer.removeStyle(styleName, table);\n    }\n  }));\n} // Reduces the full top, right, bottom, left object to a single string if all sides are equal.\n\nfunction reduceBoxSidesValue(style) {\n  if (!style) {\n    return;\n  }\n\n  const commonValue = ['top', 'right', 'bottom', 'left'].map(side => style[side]).reduce((result, side) => result == side ? result : null);\n  return commonValue || style;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/converters/tableproperties.js"],"names":["upcastStyleToAttribute","conversion","options","viewElement","defaultValue","modelAttribute","styleName","reduceBoxSides","for","attributeToAttribute","view","name","styles","model","key","value","normalized","getNormalizedStyle","reduceBoxSidesValue","upcastBorderStyles","viewElementName","modelAttributes","defaultBorder","add","dispatcher","on","evt","data","conversionApi","modelRange","stylesToConsume","filter","viewItem","hasStyle","length","matcherPattern","consumable","test","modelElement","getItems","shallow","pop","consume","normalizedBorder","style","color","width","reducedBorder","writer","setAttribute","downcastAttributeToStyle","modelAttributeValue","downcastTableAttribute","item","attributeNewValue","mapper","table","toViewElement","getChildren","find","child","is","setStyle","removeStyle","commonValue","map","side","reduce","result"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/tableproperites\n */\n\n/**\n * Conversion helper for upcasting attributes using normalized styles.\n *\n * @param {module:engine/conversion/conversion~Conversion} conversion\n * @param {Object} options\n * @param {String} options.modelAttribute The attribute to set.\n * @param {String} options.styleName The style name to convert.\n * @param {String} options.viewElement The view element name that should be converted.\n * @param {String} options.defaultValue The default value for the specified `modelAttribute`.\n * @param {Boolean} [options.reduceBoxSides=false]\n */\nexport function upcastStyleToAttribute( conversion, options ) {\n\tconst { viewElement, defaultValue, modelAttribute, styleName, reduceBoxSides = false } = options;\n\n\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\tview: {\n\t\t\tname: viewElement,\n\t\t\tstyles: {\n\t\t\t\t[ styleName ]: /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\tmodel: {\n\t\t\tkey: modelAttribute,\n\t\t\tvalue: viewElement => {\n\t\t\t\tconst normalized = viewElement.getNormalizedStyle( styleName );\n\t\t\t\tconst value = reduceBoxSides ? reduceBoxSidesValue( normalized ) : normalized;\n\n\t\t\t\tif ( defaultValue !== value ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper for upcasting border styles for view elements.\n *\n * @param {module:engine/conversion/conversion~Conversion} conversion\n * @param {String} viewElementName\n * @param {Object} modelAttributes\n * @param {Object} defaultBorder The default border values.\n * @param {String} defaultBorder.color The default `borderColor` value.\n * @param {String} defaultBorder.style The default `borderStyle` value.\n * @param {String} defaultBorder.width The default `borderWidth` value.\n */\nexport function upcastBorderStyles( conversion, viewElementName, modelAttributes, defaultBorder ) {\n\tconversion.for( 'upcast' ).add( dispatcher => dispatcher.on( 'element:' + viewElementName, ( evt, data, conversionApi ) => {\n\t\t// If the element was not converted by element-to-element converter,\n\t\t// we should not try to convert the style. See #8393.\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check the most detailed properties. These will be always set directly or\n\t\t// when using the \"group\" properties like: `border-(top|right|bottom|left)` or `border`.\n\t\tconst stylesToConsume = [\n\t\t\t'border-top-width',\n\t\t\t'border-top-color',\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-width',\n\t\t\t'border-bottom-color',\n\t\t\t'border-bottom-style',\n\t\t\t'border-right-width',\n\t\t\t'border-right-color',\n\t\t\t'border-right-style',\n\t\t\t'border-left-width',\n\t\t\t'border-left-color',\n\t\t\t'border-left-style'\n\t\t].filter( styleName => data.viewItem.hasStyle( styleName ) );\n\n\t\tif ( !stylesToConsume.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst matcherPattern = {\n\t\t\tstyles: stylesToConsume\n\t\t};\n\n\t\t// Try to consume appropriate values from consumable values list.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, matcherPattern ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelElement = [ ...data.modelRange.getItems( { shallow: true } ) ].pop();\n\n\t\tconversionApi.consumable.consume( data.viewItem, matcherPattern );\n\n\t\tconst normalizedBorder = {\n\t\t\tstyle: data.viewItem.getNormalizedStyle( 'border-style' ),\n\t\t\tcolor: data.viewItem.getNormalizedStyle( 'border-color' ),\n\t\t\twidth: data.viewItem.getNormalizedStyle( 'border-width' )\n\t\t};\n\n\t\tconst reducedBorder = {\n\t\t\tstyle: reduceBoxSidesValue( normalizedBorder.style ),\n\t\t\tcolor: reduceBoxSidesValue( normalizedBorder.color ),\n\t\t\twidth: reduceBoxSidesValue( normalizedBorder.width )\n\t\t};\n\n\t\tif ( reducedBorder.style !== defaultBorder.style ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.style, reducedBorder.style, modelElement );\n\t\t}\n\n\t\tif ( reducedBorder.color !== defaultBorder.color ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.color, reducedBorder.color, modelElement );\n\t\t}\n\n\t\tif ( reducedBorder.width !== defaultBorder.width ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.width, reducedBorder.width, modelElement );\n\t\t}\n\t} ) );\n}\n\n/**\n * Conversion helper for downcasting an attribute to a style.\n *\n * @param {module:engine/conversion/conversion~Conversion} conversion\n * @param {Object} options\n * @param {String} options.modelElement\n * @param {String} options.modelAttribute\n * @param {String} options.styleName\n */\nexport function downcastAttributeToStyle( conversion, { modelElement, modelAttribute, styleName } ) {\n\tconversion.for( 'downcast' ).attributeToAttribute( {\n\t\tmodel: {\n\t\t\tname: modelElement,\n\t\t\tkey: modelAttribute\n\t\t},\n\t\tview: modelAttributeValue => ( {\n\t\t\tkey: 'style',\n\t\t\tvalue: {\n\t\t\t\t[ styleName ]: modelAttributeValue\n\t\t\t}\n\t\t} )\n\t} );\n}\n\n/**\n * Conversion helper for downcasting attributes from the model table to a view table (not to `<figure>`).\n *\n * @param {module:engine/conversion/conversion~Conversion} conversion\n * @param {Object} options\n * @param {String} options.modelAttribute\n * @param {String} options.styleName\n */\nexport function downcastTableAttribute( conversion, { modelAttribute, styleName } ) {\n\tconversion.for( 'downcast' ).add( dispatcher => dispatcher.on( `attribute:${ modelAttribute }:table`, ( evt, data, conversionApi ) => {\n\t\tconst { item, attributeNewValue } = data;\n\t\tconst { mapper, writer } = conversionApi;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst table = [ ...mapper.toViewElement( item ).getChildren() ].find( child => child.is( 'element', 'table' ) );\n\n\t\tif ( attributeNewValue ) {\n\t\t\twriter.setStyle( styleName, attributeNewValue, table );\n\t\t} else {\n\t\t\twriter.removeStyle( styleName, table );\n\t\t}\n\t} ) );\n}\n\n// Reduces the full top, right, bottom, left object to a single string if all sides are equal.\nfunction reduceBoxSidesValue( style ) {\n\tif ( !style ) {\n\t\treturn;\n\t}\n\n\tconst commonValue = [ 'top', 'right', 'bottom', 'left' ]\n\t\t.map( side => style[ side ] )\n\t\t.reduce( ( result, side ) => result == side ? result : null );\n\n\treturn commonValue || style;\n}\n"]},"metadata":{},"sourceType":"module"}