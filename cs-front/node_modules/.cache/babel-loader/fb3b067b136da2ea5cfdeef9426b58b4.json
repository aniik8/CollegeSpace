{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/utils\n */\nimport { isWidget, toWidget } from 'ckeditor5/src/widget';\n/**\n * Converts a given {@link module:engine/view/element~Element} to a media embed widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the media widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label.\n * @returns {module:engine/view/element~Element}\n */\n\nexport function toMediaWidget(viewElement, writer, label) {\n  writer.setCustomProperty('media', true, viewElement);\n  return toWidget(viewElement, writer, {\n    label\n  });\n}\n/**\n * Returns a media widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\n\nexport function getSelectedMediaViewWidget(selection) {\n  const viewElement = selection.getSelectedElement();\n\n  if (viewElement && isMediaWidget(viewElement)) {\n    return viewElement;\n  }\n\n  return null;\n}\n/**\n * Checks if a given view element is a media widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\n\nexport function isMediaWidget(viewElement) {\n  return !!viewElement.getCustomProperty('media') && isWidget(viewElement);\n}\n/**\n * Creates a view element representing the media. Either a \"semantic\" one for the data pipeline:\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<oembed url=\"foo\"></oembed>\n *\t\t</figure>\n *\n * or a \"non-semantic\" (for the editing view pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n *\t\t</figure>\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:media-embed/mediaregistry~MediaRegistry} registry\n * @param {String} url\n * @param {Object} options\n * @param {String} [options.elementName]\n * @param {Boolean} [options.useSemanticWrapper]\n * @param {Boolean} [options.renderForEditingView]\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\n\nexport function createMediaFigureElement(writer, registry, url, options) {\n  const figure = writer.createContainerElement('figure', {\n    class: 'media'\n  });\n  writer.insert(writer.createPositionAt(figure, 0), registry.getMediaViewElement(writer, url, options));\n  return figure;\n}\n/**\n * Returns a selected media element in the model, if any.\n *\n * @param {module:engine/model/selection~Selection} selection\n * @returns {module:engine/model/element~Element|null}\n */\n\nexport function getSelectedMediaModelWidget(selection) {\n  const selectedElement = selection.getSelectedElement();\n\n  if (selectedElement && selectedElement.is('element', 'media')) {\n    return selectedElement;\n  }\n\n  return null;\n}\n/**\n * Creates a media element and inserts it into the model.\n *\n * **Note**: This method will use {@link module:engine/model/model~Model#insertContent `model.insertContent()`} logic of inserting content\n * if no `insertPosition` is passed.\n *\n * @param {module:engine/model/model~Model} model\n * @param {String} url An URL of an embeddable media.\n * @param {module:engine/model/range~Range} [insertRange] The range to insert the media. If not specified,\n * the default behavior of {@link module:engine/model/model~Model#insertContent `model.insertContent()`} will\n * be applied.\n */\n\nexport function insertMedia(model, url, insertRange) {\n  model.change(writer => {\n    const mediaElement = writer.createElement('media', {\n      url\n    });\n    model.insertContent(mediaElement, insertRange);\n    writer.setSelection(mediaElement, 'on');\n  });\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-media-embed/src/utils.js"],"names":["isWidget","toWidget","toMediaWidget","viewElement","writer","label","setCustomProperty","getSelectedMediaViewWidget","selection","getSelectedElement","isMediaWidget","getCustomProperty","createMediaFigureElement","registry","url","options","figure","createContainerElement","class","insert","createPositionAt","getMediaViewElement","getSelectedMediaModelWidget","selectedElement","is","insertMedia","model","insertRange","change","mediaElement","createElement","insertContent","setSelection"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,sBAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBC,WAAxB,EAAqCC,MAArC,EAA6CC,KAA7C,EAAqD;AAC3DD,EAAAA,MAAM,CAACE,iBAAP,CAA0B,OAA1B,EAAmC,IAAnC,EAAyCH,WAAzC;AAEA,SAAOF,QAAQ,CAAEE,WAAF,EAAeC,MAAf,EAAuB;AAAEC,IAAAA;AAAF,GAAvB,CAAf;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,0BAAT,CAAqCC,SAArC,EAAiD;AACvD,QAAML,WAAW,GAAGK,SAAS,CAACC,kBAAV,EAApB;;AAEA,MAAKN,WAAW,IAAIO,aAAa,CAAEP,WAAF,CAAjC,EAAmD;AAClD,WAAOA,WAAP;AACA;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,aAAT,CAAwBP,WAAxB,EAAsC;AAC5C,SAAO,CAAC,CAACA,WAAW,CAACQ,iBAAZ,CAA+B,OAA/B,CAAF,IAA8CX,QAAQ,CAAEG,WAAF,CAA7D;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,wBAAT,CAAmCR,MAAnC,EAA2CS,QAA3C,EAAqDC,GAArD,EAA0DC,OAA1D,EAAoE;AAC1E,QAAMC,MAAM,GAAGZ,MAAM,CAACa,sBAAP,CAA+B,QAA/B,EAAyC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAzC,CAAf;AAEAd,EAAAA,MAAM,CAACe,MAAP,CAAef,MAAM,CAACgB,gBAAP,CAAyBJ,MAAzB,EAAiC,CAAjC,CAAf,EAAqDH,QAAQ,CAACQ,mBAAT,CAA8BjB,MAA9B,EAAsCU,GAAtC,EAA2CC,OAA3C,CAArD;AAEA,SAAOC,MAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,2BAAT,CAAsCd,SAAtC,EAAkD;AACxD,QAAMe,eAAe,GAAGf,SAAS,CAACC,kBAAV,EAAxB;;AAEA,MAAKc,eAAe,IAAIA,eAAe,CAACC,EAAhB,CAAoB,SAApB,EAA+B,OAA/B,CAAxB,EAAmE;AAClE,WAAOD,eAAP;AACA;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,WAAT,CAAsBC,KAAtB,EAA6BZ,GAA7B,EAAkCa,WAAlC,EAAgD;AACtDD,EAAAA,KAAK,CAACE,MAAN,CAAcxB,MAAM,IAAI;AACvB,UAAMyB,YAAY,GAAGzB,MAAM,CAAC0B,aAAP,CAAsB,OAAtB,EAA+B;AAAEhB,MAAAA;AAAF,KAA/B,CAArB;AAEAY,IAAAA,KAAK,CAACK,aAAN,CAAqBF,YAArB,EAAmCF,WAAnC;AAEAvB,IAAAA,MAAM,CAAC4B,YAAP,CAAqBH,YAArB,EAAmC,IAAnC;AACA,GAND;AAOA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/utils\n */\n\nimport { isWidget, toWidget } from 'ckeditor5/src/widget';\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to a media embed widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the media widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label.\n * @returns {module:engine/view/element~Element}\n */\nexport function toMediaWidget( viewElement, writer, label ) {\n\twriter.setCustomProperty( 'media', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { label } );\n}\n\n/**\n * Returns a media widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getSelectedMediaViewWidget( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isMediaWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if a given view element is a media widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isMediaWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'media' ) && isWidget( viewElement );\n}\n\n/**\n * Creates a view element representing the media. Either a \"semantic\" one for the data pipeline:\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<oembed url=\"foo\"></oembed>\n *\t\t</figure>\n *\n * or a \"non-semantic\" (for the editing view pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n *\t\t</figure>\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:media-embed/mediaregistry~MediaRegistry} registry\n * @param {String} url\n * @param {Object} options\n * @param {String} [options.elementName]\n * @param {Boolean} [options.useSemanticWrapper]\n * @param {Boolean} [options.renderForEditingView]\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createMediaFigureElement( writer, registry, url, options ) {\n\tconst figure = writer.createContainerElement( 'figure', { class: 'media' } );\n\n\twriter.insert( writer.createPositionAt( figure, 0 ), registry.getMediaViewElement( writer, url, options ) );\n\n\treturn figure;\n}\n\n/**\n * Returns a selected media element in the model, if any.\n *\n * @param {module:engine/model/selection~Selection} selection\n * @returns {module:engine/model/element~Element|null}\n */\nexport function getSelectedMediaModelWidget( selection ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement && selectedElement.is( 'element', 'media' ) ) {\n\t\treturn selectedElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Creates a media element and inserts it into the model.\n *\n * **Note**: This method will use {@link module:engine/model/model~Model#insertContent `model.insertContent()`} logic of inserting content\n * if no `insertPosition` is passed.\n *\n * @param {module:engine/model/model~Model} model\n * @param {String} url An URL of an embeddable media.\n * @param {module:engine/model/range~Range} [insertRange] The range to insert the media. If not specified,\n * the default behavior of {@link module:engine/model/model~Model#insertContent `model.insertContent()`} will\n * be applied.\n */\nexport function insertMedia( model, url, insertRange ) {\n\tmodel.change( writer => {\n\t\tconst mediaElement = writer.createElement( 'media', { url } );\n\n\t\tmodel.insertContent( mediaElement, insertRange );\n\n\t\twriter.setSelection( mediaElement, 'on' );\n\t} );\n}\n"]},"metadata":{},"sourceType":"module"}