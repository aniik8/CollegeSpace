{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module special-characters/specialcharacters\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Typing } from 'ckeditor5/src/typing';\nimport { createDropdown } from 'ckeditor5/src/ui';\nimport { CKEditorError } from 'ckeditor5/src/utils';\nimport SpecialCharactersNavigationView from './ui/specialcharactersnavigationview';\nimport CharacterGridView from './ui/charactergridview';\nimport CharacterInfoView from './ui/characterinfoview';\nimport specialCharactersIcon from '../theme/icons/specialcharacters.svg';\nimport '../theme/specialcharacters.css';\nconst ALL_SPECIAL_CHARACTERS_GROUP = 'All';\n/**\n * The special characters feature.\n *\n * Introduces the `'specialCharacters'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class SpecialCharacters extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [Typing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'SpecialCharacters';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * Registered characters. A pair of a character name and its symbol.\n     *\n     * @private\n     * @member {Map.<String, String>} #_characters\n     */\n\n    this._characters = new Map();\n    /**\n     * Registered groups. Each group contains a collection with symbol names.\n     *\n     * @private\n     * @member {Map.<String, Set.<String>>} #_groups\n     */\n\n    this._groups = new Map();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    const inputCommand = editor.commands.get('input'); // Add the `specialCharacters` dropdown button to feature components.\n\n    editor.ui.componentFactory.add('specialCharacters', locale => {\n      const dropdownView = createDropdown(locale);\n      let dropdownPanelContent;\n      dropdownView.buttonView.set({\n        label: t('Special characters'),\n        icon: specialCharactersIcon,\n        tooltip: true\n      });\n      dropdownView.bind('isEnabled').to(inputCommand); // Insert a special character when a tile was clicked.\n\n      dropdownView.on('execute', (evt, data) => {\n        editor.execute('input', {\n          text: data.character\n        });\n        editor.editing.view.focus();\n      });\n      dropdownView.on('change:isOpen', () => {\n        if (!dropdownPanelContent) {\n          dropdownPanelContent = this._createDropdownPanelContent(locale, dropdownView);\n          dropdownView.panelView.children.add(dropdownPanelContent.navigationView);\n          dropdownView.panelView.children.add(dropdownPanelContent.gridView);\n          dropdownView.panelView.children.add(dropdownPanelContent.infoView);\n        }\n\n        dropdownPanelContent.infoView.set({\n          character: null,\n          name: null\n        });\n      });\n      return dropdownView;\n    });\n  }\n  /**\n   * Adds a collection of special characters to the specified group. The title of a special character must be unique.\n   *\n   * **Note:** The \"All\" category name is reserved by the plugin and cannot be used as a new name for a special\n   * characters category.\n   *\n   * @param {String} groupName\n   * @param {Array.<module:special-characters/specialcharacters~SpecialCharacterDefinition>} items\n   */\n\n\n  addItems(groupName, items) {\n    if (groupName === ALL_SPECIAL_CHARACTERS_GROUP) {\n      /**\n       * The name \"All\" for a special category group cannot be used because it is a special category that displays all\n       * available special characters.\n       *\n       * @error special-character-invalid-group-name\n       */\n      throw new CKEditorError(`special-character-invalid-group-name: The name \"${ALL_SPECIAL_CHARACTERS_GROUP}\" is reserved and cannot be used.`);\n    }\n\n    const group = this._getGroup(groupName);\n\n    for (const item of items) {\n      group.add(item.title);\n\n      this._characters.set(item.title, item.character);\n    }\n  }\n  /**\n   * Returns an iterator of special characters groups.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getGroups() {\n    return this._groups.keys();\n  }\n  /**\n   * Returns a collection of special characters symbol names (titles).\n   *\n   * @param {String} groupName\n   * @returns {Set.<String>|undefined}\n   */\n\n\n  getCharactersForGroup(groupName) {\n    if (groupName === ALL_SPECIAL_CHARACTERS_GROUP) {\n      return new Set(this._characters.keys());\n    }\n\n    return this._groups.get(groupName);\n  }\n  /**\n   * Returns the symbol of a special character for the specified name. If the special character could not be found, `undefined`\n   * is returned.\n   *\n   * @param {String} title The title of a special character.\n   * @returns {String|undefined}\n   */\n\n\n  getCharacter(title) {\n    return this._characters.get(title);\n  }\n  /**\n   * Returns a group of special characters. If the group with the specified name does not exist, it will be created.\n   *\n   * @private\n   * @param {String} groupName The name of the group to create.\n   */\n\n\n  _getGroup(groupName) {\n    if (!this._groups.has(groupName)) {\n      this._groups.set(groupName, new Set());\n    }\n\n    return this._groups.get(groupName);\n  }\n  /**\n   * Updates the symbol grid depending on the currently selected character group.\n   *\n   * @private\n   * @param {String} currentGroupName\n   * @param {module:special-characters/ui/charactergridview~CharacterGridView} gridView\n   */\n\n\n  _updateGrid(currentGroupName, gridView) {\n    // Updating the grid starts with removing all tiles belonging to the old group.\n    gridView.tiles.clear();\n    const characterTitles = this.getCharactersForGroup(currentGroupName);\n\n    for (const title of characterTitles) {\n      const character = this.getCharacter(title);\n      gridView.tiles.add(gridView.createTile(character, title));\n    }\n  }\n  /**\n   * Initializes the dropdown, used for lazy loading.\n   *\n   * @private\n   * @param {module:utils/locale~Locale} locale\n   * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\n   * @returns {Object} Returns an object with `navigationView`, `gridView` and `infoView` properties, containing UI parts.\n   */\n\n\n  _createDropdownPanelContent(locale, dropdownView) {\n    const specialCharsGroups = [...this.getGroups()]; // Add a special group that shows all available special characters.\n\n    specialCharsGroups.unshift(ALL_SPECIAL_CHARACTERS_GROUP);\n    const navigationView = new SpecialCharactersNavigationView(locale, specialCharsGroups);\n    const gridView = new CharacterGridView(locale);\n    const infoView = new CharacterInfoView(locale);\n    gridView.delegate('execute').to(dropdownView);\n    gridView.on('tileHover', (evt, data) => {\n      infoView.set(data);\n    }); // Update the grid of special characters when a user changed the character group.\n\n    navigationView.on('execute', () => {\n      this._updateGrid(navigationView.currentGroupName, gridView);\n    }); // Set the initial content of the special characters grid.\n\n    this._updateGrid(navigationView.currentGroupName, gridView);\n\n    return {\n      navigationView,\n      gridView,\n      infoView\n    };\n  }\n\n}\n/**\n * @typedef {Object} module:special-characters/specialcharacters~SpecialCharacterDefinition\n *\n * @property {String} title A unique name of the character (e.g. \"greek small letter epsilon\").\n * @property {String} character A human-readable character displayed as the label (e.g. \"Îµ\").\n */","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-special-characters/src/specialcharacters.js"],"names":["Plugin","Typing","createDropdown","CKEditorError","SpecialCharactersNavigationView","CharacterGridView","CharacterInfoView","specialCharactersIcon","ALL_SPECIAL_CHARACTERS_GROUP","SpecialCharacters","requires","pluginName","constructor","editor","_characters","Map","_groups","init","t","inputCommand","commands","get","ui","componentFactory","add","locale","dropdownView","dropdownPanelContent","buttonView","set","label","icon","tooltip","bind","to","on","evt","data","execute","text","character","editing","view","focus","_createDropdownPanelContent","panelView","children","navigationView","gridView","infoView","name","addItems","groupName","items","group","_getGroup","item","title","getGroups","keys","getCharactersForGroup","Set","getCharacter","has","_updateGrid","currentGroupName","tiles","clear","characterTitles","createTile","specialCharsGroups","unshift","delegate"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module special-characters/specialcharacters\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Typing } from 'ckeditor5/src/typing';\nimport { createDropdown } from 'ckeditor5/src/ui';\nimport { CKEditorError } from 'ckeditor5/src/utils';\nimport SpecialCharactersNavigationView from './ui/specialcharactersnavigationview';\nimport CharacterGridView from './ui/charactergridview';\nimport CharacterInfoView from './ui/characterinfoview';\n\nimport specialCharactersIcon from '../theme/icons/specialcharacters.svg';\nimport '../theme/specialcharacters.css';\n\nconst ALL_SPECIAL_CHARACTERS_GROUP = 'All';\n\n/**\n * The special characters feature.\n *\n * Introduces the `'specialCharacters'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class SpecialCharacters extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Typing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'SpecialCharacters';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Registered characters. A pair of a character name and its symbol.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String, String>} #_characters\n\t\t */\n\t\tthis._characters = new Map();\n\n\t\t/**\n\t\t * Registered groups. Each group contains a collection with symbol names.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String, Set.<String>>} #_groups\n\t\t */\n\t\tthis._groups = new Map();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tconst inputCommand = editor.commands.get( 'input' );\n\n\t\t// Add the `specialCharacters` dropdown button to feature components.\n\t\teditor.ui.componentFactory.add( 'specialCharacters', locale => {\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\tlet dropdownPanelContent;\n\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tlabel: t( 'Special characters' ),\n\t\t\t\ticon: specialCharactersIcon,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( inputCommand );\n\n\t\t\t// Insert a special character when a tile was clicked.\n\t\t\tdropdownView.on( 'execute', ( evt, data ) => {\n\t\t\t\teditor.execute( 'input', { text: data.character } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tdropdownView.on( 'change:isOpen', () => {\n\t\t\t\tif ( !dropdownPanelContent ) {\n\t\t\t\t\tdropdownPanelContent = this._createDropdownPanelContent( locale, dropdownView );\n\n\t\t\t\t\tdropdownView.panelView.children.add( dropdownPanelContent.navigationView );\n\t\t\t\t\tdropdownView.panelView.children.add( dropdownPanelContent.gridView );\n\t\t\t\t\tdropdownView.panelView.children.add( dropdownPanelContent.infoView );\n\t\t\t\t}\n\n\t\t\t\tdropdownPanelContent.infoView.set( {\n\t\t\t\t\tcharacter: null,\n\t\t\t\t\tname: null\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n\n\t/**\n\t * Adds a collection of special characters to the specified group. The title of a special character must be unique.\n\t *\n\t * **Note:** The \"All\" category name is reserved by the plugin and cannot be used as a new name for a special\n\t * characters category.\n\t *\n\t * @param {String} groupName\n\t * @param {Array.<module:special-characters/specialcharacters~SpecialCharacterDefinition>} items\n\t */\n\taddItems( groupName, items ) {\n\t\tif ( groupName === ALL_SPECIAL_CHARACTERS_GROUP ) {\n\t\t\t/**\n\t\t\t * The name \"All\" for a special category group cannot be used because it is a special category that displays all\n\t\t\t * available special characters.\n\t\t\t *\n\t\t\t * @error special-character-invalid-group-name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t`special-character-invalid-group-name: The name \"${ ALL_SPECIAL_CHARACTERS_GROUP }\" is reserved and cannot be used.`\n\t\t\t);\n\t\t}\n\n\t\tconst group = this._getGroup( groupName );\n\n\t\tfor ( const item of items ) {\n\t\t\tgroup.add( item.title );\n\t\t\tthis._characters.set( item.title, item.character );\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator of special characters groups.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetGroups() {\n\t\treturn this._groups.keys();\n\t}\n\n\t/**\n\t * Returns a collection of special characters symbol names (titles).\n\t *\n\t * @param {String} groupName\n\t * @returns {Set.<String>|undefined}\n\t */\n\tgetCharactersForGroup( groupName ) {\n\t\tif ( groupName === ALL_SPECIAL_CHARACTERS_GROUP ) {\n\t\t\treturn new Set( this._characters.keys() );\n\t\t}\n\n\t\treturn this._groups.get( groupName );\n\t}\n\n\t/**\n\t * Returns the symbol of a special character for the specified name. If the special character could not be found, `undefined`\n\t * is returned.\n\t *\n\t * @param {String} title The title of a special character.\n\t * @returns {String|undefined}\n\t */\n\tgetCharacter( title ) {\n\t\treturn this._characters.get( title );\n\t}\n\n\t/**\n\t * Returns a group of special characters. If the group with the specified name does not exist, it will be created.\n\t *\n\t * @private\n\t * @param {String} groupName The name of the group to create.\n\t */\n\t_getGroup( groupName ) {\n\t\tif ( !this._groups.has( groupName ) ) {\n\t\t\tthis._groups.set( groupName, new Set() );\n\t\t}\n\n\t\treturn this._groups.get( groupName );\n\t}\n\n\t/**\n\t * Updates the symbol grid depending on the currently selected character group.\n\t *\n\t * @private\n\t * @param {String} currentGroupName\n\t * @param {module:special-characters/ui/charactergridview~CharacterGridView} gridView\n\t */\n\t_updateGrid( currentGroupName, gridView ) {\n\t\t// Updating the grid starts with removing all tiles belonging to the old group.\n\t\tgridView.tiles.clear();\n\n\t\tconst characterTitles = this.getCharactersForGroup( currentGroupName );\n\n\t\tfor ( const title of characterTitles ) {\n\t\t\tconst character = this.getCharacter( title );\n\n\t\t\tgridView.tiles.add( gridView.createTile( character, title ) );\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the dropdown, used for lazy loading.\n\t *\n\t * @private\n\t * @param {module:utils/locale~Locale} locale\n\t * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\n\t * @returns {Object} Returns an object with `navigationView`, `gridView` and `infoView` properties, containing UI parts.\n\t */\n\t_createDropdownPanelContent( locale, dropdownView ) {\n\t\tconst specialCharsGroups = [ ...this.getGroups() ];\n\n\t\t// Add a special group that shows all available special characters.\n\t\tspecialCharsGroups.unshift( ALL_SPECIAL_CHARACTERS_GROUP );\n\n\t\tconst navigationView = new SpecialCharactersNavigationView( locale, specialCharsGroups );\n\t\tconst gridView = new CharacterGridView( locale );\n\t\tconst infoView = new CharacterInfoView( locale );\n\n\t\tgridView.delegate( 'execute' ).to( dropdownView );\n\n\t\tgridView.on( 'tileHover', ( evt, data ) => {\n\t\t\tinfoView.set( data );\n\t\t} );\n\n\t\t// Update the grid of special characters when a user changed the character group.\n\t\tnavigationView.on( 'execute', () => {\n\t\t\tthis._updateGrid( navigationView.currentGroupName, gridView );\n\t\t} );\n\n\t\t// Set the initial content of the special characters grid.\n\t\tthis._updateGrid( navigationView.currentGroupName, gridView );\n\n\t\treturn { navigationView, gridView, infoView };\n\t}\n}\n\n/**\n * @typedef {Object} module:special-characters/specialcharacters~SpecialCharacterDefinition\n *\n * @property {String} title A unique name of the character (e.g. \"greek small letter epsilon\").\n * @property {String} character A human-readable character displayed as the label (e.g. \"Îµ\").\n */\n"]},"metadata":{},"sourceType":"module"}