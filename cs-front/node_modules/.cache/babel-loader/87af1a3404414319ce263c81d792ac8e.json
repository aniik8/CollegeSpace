{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablecellproperties/tablecellpropertiesediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addBorderRules, addPaddingRules, addBackgroundRules } from 'ckeditor5/src/engine';\nimport { downcastAttributeToStyle, upcastStyleToAttribute, upcastBorderStyles } from './../converters/tableproperties';\nimport TableEditing from './../tableediting';\nimport TableCellPaddingCommand from './commands/tablecellpaddingcommand';\nimport TableCellWidthCommand from './commands/tablecellwidthcommand';\nimport TableCellHeightCommand from './commands/tablecellheightcommand';\nimport TableCellBackgroundColorCommand from './commands/tablecellbackgroundcolorcommand';\nimport TableCellVerticalAlignmentCommand from './commands/tablecellverticalalignmentcommand';\nimport TableCellHorizontalAlignmentCommand from './commands/tablecellhorizontalalignmentcommand';\nimport TableCellBorderStyleCommand from './commands/tablecellborderstylecommand';\nimport TableCellBorderColorCommand from './commands/tablecellbordercolorcommand';\nimport TableCellBorderWidthCommand from './commands/tablecellborderwidthcommand';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\nconst VALIGN_VALUES_REG_EXP = /^(top|middle|bottom)$/;\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right|justify)$/;\n/**\n * The table cell properties editing feature.\n *\n * Introduces table cell model attributes and their conversion:\n *\n * - border: `tableCellBorderStyle`, `tableCellBorderColor` and `tableCellBorderWidth`\n * - background color: `tableCellBackgroundColor`\n * - cell padding: `tableCellPadding`\n * - horizontal and vertical alignment: `tableCellHorizontalAlignment`, `tableCellVerticalAlignment`\n * - cell width and height: `tableCellWidth`, `tableCellHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` commands\n * - background color: the `'tableCellBackgroundColor'` command\n * - cell padding: the `'tableCellPadding'` command\n * - horizontal and vertical alignment: the `'tableCellHorizontalAlignment'` and `'tableCellVerticalAlignment'` commands\n * - width and height: the `'tableCellWidth'` and `'tableCellHeight'` commands\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TableCellPropertiesEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TableCellPropertiesEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [TableEditing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const conversion = editor.conversion;\n    editor.config.define('table.tableCellProperties.defaultProperties', {});\n    const defaultTableCellProperties = getNormalizedDefaultProperties(editor.config.get('table.tableCellProperties.defaultProperties'), {\n      includeVerticalAlignmentProperty: true,\n      includeHorizontalAlignmentProperty: true,\n      includePaddingProperty: true,\n      isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n    });\n    editor.data.addStyleProcessorRules(addBorderRules);\n    enableBorderProperties(schema, conversion, {\n      color: defaultTableCellProperties.borderColor,\n      style: defaultTableCellProperties.borderStyle,\n      width: defaultTableCellProperties.borderWidth\n    });\n    editor.commands.add('tableCellBorderStyle', new TableCellBorderStyleCommand(editor, defaultTableCellProperties.borderStyle));\n    editor.commands.add('tableCellBorderColor', new TableCellBorderColorCommand(editor, defaultTableCellProperties.borderColor));\n    editor.commands.add('tableCellBorderWidth', new TableCellBorderWidthCommand(editor, defaultTableCellProperties.borderWidth));\n    enableProperty(schema, conversion, {\n      modelAttribute: 'tableCellWidth',\n      styleName: 'width',\n      defaultValue: defaultTableCellProperties.width\n    });\n    editor.commands.add('tableCellWidth', new TableCellWidthCommand(editor, defaultTableCellProperties.width));\n    enableProperty(schema, conversion, {\n      modelAttribute: 'tableCellHeight',\n      styleName: 'height',\n      defaultValue: defaultTableCellProperties.height\n    });\n    editor.commands.add('tableCellHeight', new TableCellHeightCommand(editor, defaultTableCellProperties.height));\n    editor.data.addStyleProcessorRules(addPaddingRules);\n    enableProperty(schema, conversion, {\n      modelAttribute: 'tableCellPadding',\n      styleName: 'padding',\n      reduceBoxSides: true,\n      defaultValue: defaultTableCellProperties.padding\n    });\n    editor.commands.add('tableCellPadding', new TableCellPaddingCommand(editor, defaultTableCellProperties.padding));\n    editor.data.addStyleProcessorRules(addBackgroundRules);\n    enableProperty(schema, conversion, {\n      modelAttribute: 'tableCellBackgroundColor',\n      styleName: 'background-color',\n      defaultValue: defaultTableCellProperties.backgroundColor\n    });\n    editor.commands.add('tableCellBackgroundColor', new TableCellBackgroundColorCommand(editor, defaultTableCellProperties.backgroundColor));\n    enableHorizontalAlignmentProperty(schema, conversion, defaultTableCellProperties.horizontalAlignment);\n    editor.commands.add('tableCellHorizontalAlignment', new TableCellHorizontalAlignmentCommand(editor, defaultTableCellProperties.horizontalAlignment));\n    enableVerticalAlignmentProperty(schema, conversion, defaultTableCellProperties.verticalAlignment);\n    editor.commands.add('tableCellVerticalAlignment', new TableCellVerticalAlignmentCommand(editor, defaultTableCellProperties.verticalAlignment));\n  }\n\n} // Enables the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` attributes for table cells.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} defaultBorder The default border values.\n// @param {String} defaultBorder.color The default `tableCellBorderColor` value.\n// @param {String} defaultBorder.style The default `tableCellBorderStyle` value.\n// @param {String} defaultBorder.width The default `tableCellBorderWidth` value.\n\nfunction enableBorderProperties(schema, conversion, defaultBorder) {\n  const modelAttributes = {\n    width: 'tableCellBorderWidth',\n    color: 'tableCellBorderColor',\n    style: 'tableCellBorderStyle'\n  };\n  schema.extend('tableCell', {\n    allowAttributes: Object.values(modelAttributes)\n  });\n  upcastBorderStyles(conversion, 'td', modelAttributes, defaultBorder);\n  upcastBorderStyles(conversion, 'th', modelAttributes, defaultBorder);\n  downcastAttributeToStyle(conversion, {\n    modelElement: 'tableCell',\n    modelAttribute: modelAttributes.style,\n    styleName: 'border-style'\n  });\n  downcastAttributeToStyle(conversion, {\n    modelElement: 'tableCell',\n    modelAttribute: modelAttributes.color,\n    styleName: 'border-color'\n  });\n  downcastAttributeToStyle(conversion, {\n    modelElement: 'tableCell',\n    modelAttribute: modelAttributes.width,\n    styleName: 'border-width'\n  });\n} // Enables the `'tableCellHorizontalAlignment'` attribute for table cells.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n// @param {String} defaultValue The default horizontal alignment value.\n\n\nfunction enableHorizontalAlignmentProperty(schema, conversion, defaultValue) {\n  schema.extend('tableCell', {\n    allowAttributes: ['tableCellHorizontalAlignment']\n  });\n  conversion.for('downcast').attributeToAttribute({\n    model: {\n      name: 'tableCell',\n      key: 'tableCellHorizontalAlignment'\n    },\n    view: alignment => ({\n      key: 'style',\n      value: {\n        'text-align': alignment\n      }\n    })\n  });\n  conversion.for('upcast') // Support for the `text-align:*;` CSS definition for the table cell alignment.\n  .attributeToAttribute({\n    view: {\n      name: /^(td|th)$/,\n      styles: {\n        'text-align': ALIGN_VALUES_REG_EXP\n      }\n    },\n    model: {\n      key: 'tableCellHorizontalAlignment',\n      value: viewElement => {\n        const align = viewElement.getStyle('text-align');\n        return align === defaultValue ? null : align;\n      }\n    }\n  }) // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n  .attributeToAttribute({\n    view: {\n      name: /^(td|th)$/,\n      attributes: {\n        align: ALIGN_VALUES_REG_EXP\n      }\n    },\n    model: {\n      key: 'tableCellHorizontalAlignment',\n      value: viewElement => {\n        const align = viewElement.getAttribute('align');\n        return align === defaultValue ? null : align;\n      }\n    }\n  });\n} // Enables the `'verticalAlignment'` attribute for table cells.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {String} defaultValue The default vertical alignment value.\n\n\nfunction enableVerticalAlignmentProperty(schema, conversion, defaultValue) {\n  schema.extend('tableCell', {\n    allowAttributes: ['tableCellVerticalAlignment']\n  });\n  conversion.for('downcast').attributeToAttribute({\n    model: {\n      name: 'tableCell',\n      key: 'tableCellVerticalAlignment'\n    },\n    view: alignment => ({\n      key: 'style',\n      value: {\n        'vertical-align': alignment\n      }\n    })\n  });\n  conversion.for('upcast') // Support for the `vertical-align:*;` CSS definition for the table cell alignment.\n  .attributeToAttribute({\n    view: {\n      name: /^(td|th)$/,\n      styles: {\n        'vertical-align': VALIGN_VALUES_REG_EXP\n      }\n    },\n    model: {\n      key: 'tableCellVerticalAlignment',\n      value: viewElement => {\n        const align = viewElement.getStyle('vertical-align');\n        return align === defaultValue ? null : align;\n      }\n    }\n  }) // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n  .attributeToAttribute({\n    view: {\n      name: /^(td|th)$/,\n      attributes: {\n        valign: VALIGN_VALUES_REG_EXP\n      }\n    },\n    model: {\n      key: 'tableCellVerticalAlignment',\n      value: viewElement => {\n        const valign = viewElement.getAttribute('valign');\n        return valign === defaultValue ? null : valign;\n      }\n    }\n  });\n} // Enables conversion for an attribute for simple view-model mappings.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} options\n// @param {String} options.modelAttribute\n// @param {String} options.styleName\n// @param {String} options.defaultValue The default value for the specified `modelAttribute`.\n// @param {Boolean} [options.reduceBoxSides=false]\n\n\nfunction enableProperty(schema, conversion, options) {\n  const {\n    modelAttribute\n  } = options;\n  schema.extend('tableCell', {\n    allowAttributes: [modelAttribute]\n  });\n  upcastStyleToAttribute(conversion, {\n    viewElement: /^(td|th)$/,\n    ...options\n  });\n  downcastAttributeToStyle(conversion, {\n    modelElement: 'tableCell',\n    ...options\n  });\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesediting.js"],"names":["Plugin","addBorderRules","addPaddingRules","addBackgroundRules","downcastAttributeToStyle","upcastStyleToAttribute","upcastBorderStyles","TableEditing","TableCellPaddingCommand","TableCellWidthCommand","TableCellHeightCommand","TableCellBackgroundColorCommand","TableCellVerticalAlignmentCommand","TableCellHorizontalAlignmentCommand","TableCellBorderStyleCommand","TableCellBorderColorCommand","TableCellBorderWidthCommand","getNormalizedDefaultProperties","VALIGN_VALUES_REG_EXP","ALIGN_VALUES_REG_EXP","TableCellPropertiesEditing","pluginName","requires","init","editor","schema","model","conversion","config","define","defaultTableCellProperties","get","includeVerticalAlignmentProperty","includeHorizontalAlignmentProperty","includePaddingProperty","isRightToLeftContent","locale","contentLanguageDirection","data","addStyleProcessorRules","enableBorderProperties","color","borderColor","style","borderStyle","width","borderWidth","commands","add","enableProperty","modelAttribute","styleName","defaultValue","height","reduceBoxSides","padding","backgroundColor","enableHorizontalAlignmentProperty","horizontalAlignment","enableVerticalAlignmentProperty","verticalAlignment","defaultBorder","modelAttributes","extend","allowAttributes","Object","values","modelElement","for","attributeToAttribute","name","key","view","alignment","value","styles","viewElement","align","getStyle","attributes","getAttribute","valign","options"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablecellproperties/tablecellpropertiesediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addBorderRules, addPaddingRules, addBackgroundRules } from 'ckeditor5/src/engine';\n\nimport { downcastAttributeToStyle, upcastStyleToAttribute, upcastBorderStyles } from './../converters/tableproperties';\nimport TableEditing from './../tableediting';\nimport TableCellPaddingCommand from './commands/tablecellpaddingcommand';\nimport TableCellWidthCommand from './commands/tablecellwidthcommand';\nimport TableCellHeightCommand from './commands/tablecellheightcommand';\nimport TableCellBackgroundColorCommand from './commands/tablecellbackgroundcolorcommand';\nimport TableCellVerticalAlignmentCommand from './commands/tablecellverticalalignmentcommand';\nimport TableCellHorizontalAlignmentCommand from './commands/tablecellhorizontalalignmentcommand';\nimport TableCellBorderStyleCommand from './commands/tablecellborderstylecommand';\nimport TableCellBorderColorCommand from './commands/tablecellbordercolorcommand';\nimport TableCellBorderWidthCommand from './commands/tablecellborderwidthcommand';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\n\nconst VALIGN_VALUES_REG_EXP = /^(top|middle|bottom)$/;\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right|justify)$/;\n\n/**\n * The table cell properties editing feature.\n *\n * Introduces table cell model attributes and their conversion:\n *\n * - border: `tableCellBorderStyle`, `tableCellBorderColor` and `tableCellBorderWidth`\n * - background color: `tableCellBackgroundColor`\n * - cell padding: `tableCellPadding`\n * - horizontal and vertical alignment: `tableCellHorizontalAlignment`, `tableCellVerticalAlignment`\n * - cell width and height: `tableCellWidth`, `tableCellHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` commands\n * - background color: the `'tableCellBackgroundColor'` command\n * - cell padding: the `'tableCellPadding'` command\n * - horizontal and vertical alignment: the `'tableCellHorizontalAlignment'` and `'tableCellVerticalAlignment'` commands\n * - width and height: the `'tableCellWidth'` and `'tableCellHeight'` commands\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableCellPropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TableCellPropertiesEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\teditor.config.define( 'table.tableCellProperties.defaultProperties', {} );\n\n\t\tconst defaultTableCellProperties = getNormalizedDefaultProperties(\n\t\t\teditor.config.get( 'table.tableCellProperties.defaultProperties' ),\n\t\t\t{\n\t\t\t\tincludeVerticalAlignmentProperty: true,\n\t\t\t\tincludeHorizontalAlignmentProperty: true,\n\t\t\t\tincludePaddingProperty: true,\n\t\t\t\tisRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n\t\t\t}\n\t\t);\n\n\t\teditor.data.addStyleProcessorRules( addBorderRules );\n\t\tenableBorderProperties( schema, conversion, {\n\t\t\tcolor: defaultTableCellProperties.borderColor,\n\t\t\tstyle: defaultTableCellProperties.borderStyle,\n\t\t\twidth: defaultTableCellProperties.borderWidth\n\t\t} );\n\t\teditor.commands.add( 'tableCellBorderStyle', new TableCellBorderStyleCommand( editor, defaultTableCellProperties.borderStyle ) );\n\t\teditor.commands.add( 'tableCellBorderColor', new TableCellBorderColorCommand( editor, defaultTableCellProperties.borderColor ) );\n\t\teditor.commands.add( 'tableCellBorderWidth', new TableCellBorderWidthCommand( editor, defaultTableCellProperties.borderWidth ) );\n\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellWidth',\n\t\t\tstyleName: 'width',\n\t\t\tdefaultValue: defaultTableCellProperties.width\n\t\t} );\n\t\teditor.commands.add( 'tableCellWidth', new TableCellWidthCommand( editor, defaultTableCellProperties.width ) );\n\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellHeight',\n\t\t\tstyleName: 'height',\n\t\t\tdefaultValue: defaultTableCellProperties.height\n\t\t} );\n\t\teditor.commands.add( 'tableCellHeight', new TableCellHeightCommand( editor, defaultTableCellProperties.height ) );\n\n\t\teditor.data.addStyleProcessorRules( addPaddingRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellPadding',\n\t\t\tstyleName: 'padding',\n\t\t\treduceBoxSides: true,\n\t\t\tdefaultValue: defaultTableCellProperties.padding\n\t\t} );\n\t\teditor.commands.add( 'tableCellPadding', new TableCellPaddingCommand( editor, defaultTableCellProperties.padding ) );\n\n\t\teditor.data.addStyleProcessorRules( addBackgroundRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellBackgroundColor',\n\t\t\tstyleName: 'background-color',\n\t\t\tdefaultValue: defaultTableCellProperties.backgroundColor\n\t\t} );\n\t\teditor.commands.add(\n\t\t\t'tableCellBackgroundColor',\n\t\t\tnew TableCellBackgroundColorCommand( editor, defaultTableCellProperties.backgroundColor )\n\t\t);\n\n\t\tenableHorizontalAlignmentProperty( schema, conversion, defaultTableCellProperties.horizontalAlignment );\n\t\teditor.commands.add(\n\t\t\t'tableCellHorizontalAlignment',\n\t\t\tnew TableCellHorizontalAlignmentCommand( editor, defaultTableCellProperties.horizontalAlignment )\n\t\t);\n\n\t\tenableVerticalAlignmentProperty( schema, conversion, defaultTableCellProperties.verticalAlignment );\n\t\teditor.commands.add(\n\t\t\t'tableCellVerticalAlignment',\n\t\t\tnew TableCellVerticalAlignmentCommand( editor, defaultTableCellProperties.verticalAlignment )\n\t\t);\n\t}\n}\n\n// Enables the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` attributes for table cells.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} defaultBorder The default border values.\n// @param {String} defaultBorder.color The default `tableCellBorderColor` value.\n// @param {String} defaultBorder.style The default `tableCellBorderStyle` value.\n// @param {String} defaultBorder.width The default `tableCellBorderWidth` value.\nfunction enableBorderProperties( schema, conversion, defaultBorder ) {\n\tconst modelAttributes = {\n\t\twidth: 'tableCellBorderWidth',\n\t\tcolor: 'tableCellBorderColor',\n\t\tstyle: 'tableCellBorderStyle'\n\t};\n\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: Object.values( modelAttributes )\n\t} );\n\n\tupcastBorderStyles( conversion, 'td', modelAttributes, defaultBorder );\n\tupcastBorderStyles( conversion, 'th', modelAttributes, defaultBorder );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.style, styleName: 'border-style' } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.color, styleName: 'border-color' } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.width, styleName: 'border-width' } );\n}\n\n// Enables the `'tableCellHorizontalAlignment'` attribute for table cells.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n// @param {String} defaultValue The default horizontal alignment value.\nfunction enableHorizontalAlignmentProperty( schema, conversion, defaultValue ) {\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ 'tableCellHorizontalAlignment' ]\n\t} );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'tableCell',\n\t\t\t\tkey: 'tableCellHorizontalAlignment'\n\t\t\t},\n\t\t\tview: alignment => ( {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t'text-align': alignment\n\t\t\t\t}\n\t\t\t} )\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `text-align:*;` CSS definition for the table cell alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\t'text-align': ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellHorizontalAlignment',\n\t\t\t\tvalue: viewElement => {\n\t\t\t\t\tconst align = viewElement.getStyle( 'text-align' );\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tattributes: {\n\t\t\t\t\talign: ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellHorizontalAlignment',\n\t\t\t\tvalue: viewElement => {\n\t\t\t\t\tconst align = viewElement.getAttribute( 'align' );\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n\n// Enables the `'verticalAlignment'` attribute for table cells.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {String} defaultValue The default vertical alignment value.\nfunction enableVerticalAlignmentProperty( schema, conversion, defaultValue ) {\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ 'tableCellVerticalAlignment' ]\n\t} );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'tableCell',\n\t\t\t\tkey: 'tableCellVerticalAlignment'\n\t\t\t},\n\t\t\tview: alignment => ( {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t'vertical-align': alignment\n\t\t\t\t}\n\t\t\t} )\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `vertical-align:*;` CSS definition for the table cell alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\t'vertical-align': VALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellVerticalAlignment',\n\t\t\t\tvalue: viewElement => {\n\t\t\t\t\tconst align = viewElement.getStyle( 'vertical-align' );\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tattributes: {\n\t\t\t\t\tvalign: VALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellVerticalAlignment',\n\t\t\t\tvalue: viewElement => {\n\t\t\t\t\tconst valign = viewElement.getAttribute( 'valign' );\n\n\t\t\t\t\treturn valign === defaultValue ? null : valign;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n\n// Enables conversion for an attribute for simple view-model mappings.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} options\n// @param {String} options.modelAttribute\n// @param {String} options.styleName\n// @param {String} options.defaultValue The default value for the specified `modelAttribute`.\n// @param {Boolean} [options.reduceBoxSides=false]\nfunction enableProperty( schema, conversion, options ) {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\n\tupcastStyleToAttribute( conversion, { viewElement: /^(td|th)$/, ...options } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', ...options } );\n}\n"]},"metadata":{},"sourceType":"module"}