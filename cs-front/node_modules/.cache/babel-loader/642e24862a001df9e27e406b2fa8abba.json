{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableproperties/tablepropertiesui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler, getLocalizedColorOptions, normalizeColorOptions } from 'ckeditor5/src/ui';\nimport { debounce } from 'lodash-es';\nimport TablePropertiesView from './ui/tablepropertiesview';\nimport tableProperties from './../../theme/icons/table-properties.svg';\nimport { colorFieldValidator, getLocalizedColorErrorText, getLocalizedLengthErrorText, lengthFieldValidator, lineWidthFieldValidator, defaultColors } from '../utils/ui/table-properties';\nimport { getTableWidgetAncestor } from '../utils/ui/widget';\nimport { getBalloonTablePositionData, repositionContextualBalloon } from '../utils/ui/contextualballoon';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\nconst ERROR_TEXT_TIMEOUT = 500; // Map of view properties and related commands.\n\nconst propertyToCommandMap = {\n  borderStyle: 'tableBorderStyle',\n  borderColor: 'tableBorderColor',\n  borderWidth: 'tableBorderWidth',\n  backgroundColor: 'tableBackgroundColor',\n  width: 'tableWidth',\n  height: 'tableHeight',\n  alignment: 'tableAlignment'\n};\n/**\n * The table properties UI plugin. It introduces the `'tableProperties'` button\n * that opens a form allowing to specify visual styling of an entire table.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TablePropertiesUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ContextualBalloon];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'TablePropertiesUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('table.tableProperties', {\n      borderColors: defaultColors,\n      backgroundColors: defaultColors\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    /**\n     * The default table properties.\n     *\n     * @protected\n     * @member {module:table/tableproperties~TablePropertiesOptions}\n     */\n\n    this._defaultTableProperties = getNormalizedDefaultProperties(editor.config.get('table.tableProperties.defaultProperties'), {\n      includeAlignmentProperty: true\n    });\n    /**\n     * The contextual balloon plugin instance.\n     *\n     * @private\n     * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n     */\n\n    this._balloon = editor.plugins.get(ContextualBalloon);\n    /**\n     * The properties form view displayed inside the balloon.\n     *\n     * @member {module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}\n     */\n\n    this.view = this._createPropertiesView();\n    /**\n     * The batch used to undo all changes made by the form (which are live, as the user types)\n     * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n     *\n     * @protected\n     * @member {module:engine/model/batch~Batch}\n     */\n\n    this._undoStepBatch = null;\n    editor.ui.componentFactory.add('tableProperties', locale => {\n      const view = new ButtonView(locale);\n      view.set({\n        label: t('Table properties'),\n        icon: tableProperties,\n        tooltip: true\n      });\n      this.listenTo(view, 'execute', () => this._showView());\n      const commands = Object.values(propertyToCommandMap).map(commandName => editor.commands.get(commandName));\n      view.bind('isEnabled').toMany(commands, 'isEnabled', function () {\n        for (var _len = arguments.length, areEnabled = new Array(_len), _key = 0; _key < _len; _key++) {\n          areEnabled[_key] = arguments[_key];\n        }\n\n        return areEnabled.some(isCommandEnabled => isCommandEnabled);\n      });\n      return view;\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy(); // Destroy created UI components as they are not automatically destroyed.\n    // See https://github.com/ckeditor/ckeditor5/issues/1341.\n\n    this.view.destroy();\n  }\n  /**\n   * Creates the {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} instance.\n   *\n   * @private\n   * @returns {module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} The table\n   * properties form view instance.\n   */\n\n\n  _createPropertiesView() {\n    const editor = this.editor;\n    const config = editor.config.get('table.tableProperties');\n    const borderColorsConfig = normalizeColorOptions(config.borderColors);\n    const localizedBorderColors = getLocalizedColorOptions(editor.locale, borderColorsConfig);\n    const backgroundColorsConfig = normalizeColorOptions(config.backgroundColors);\n    const localizedBackgroundColors = getLocalizedColorOptions(editor.locale, backgroundColorsConfig);\n    const view = new TablePropertiesView(editor.locale, {\n      borderColors: localizedBorderColors,\n      backgroundColors: localizedBackgroundColors,\n      defaultTableProperties: this._defaultTableProperties\n    });\n    const t = editor.t; // Render the view so its #element is available for the clickOutsideHandler.\n\n    view.render();\n    this.listenTo(view, 'submit', () => {\n      this._hideView();\n    });\n    this.listenTo(view, 'cancel', () => {\n      // https://github.com/ckeditor/ckeditor5/issues/6180\n      if (this._undoStepBatch.operations.length) {\n        editor.execute('undo', this._undoStepBatch);\n      }\n\n      this._hideView();\n    }); // Close the balloon on Esc key press.\n\n    view.keystrokes.set('Esc', (data, cancel) => {\n      this._hideView();\n\n      cancel();\n    }); // Close on click outside of balloon panel element.\n\n    clickOutsideHandler({\n      emitter: view,\n      activator: () => this._isViewInBalloon,\n      contextElements: [this._balloon.view.element],\n      callback: () => this._hideView()\n    });\n    const colorErrorText = getLocalizedColorErrorText(t);\n    const lengthErrorText = getLocalizedLengthErrorText(t); // Create the \"UI -> editor data\" binding.\n    // These listeners update the editor data (via table commands) when any observable\n    // property of the view has changed. They also validate the value and display errors in the UI\n    // when necessary. This makes the view live, which means the changes are\n    // visible in the editing as soon as the user types or changes fields' values.\n\n    view.on('change:borderStyle', this._getPropertyChangeCallback('tableBorderStyle', this._defaultTableProperties.borderStyle));\n    view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n      viewField: view.borderColorInput,\n      commandName: 'tableBorderColor',\n      errorText: colorErrorText,\n      validator: colorFieldValidator,\n      defaultValue: this._defaultTableProperties.borderColor\n    }));\n    view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n      viewField: view.borderWidthInput,\n      commandName: 'tableBorderWidth',\n      errorText: lengthErrorText,\n      validator: lineWidthFieldValidator,\n      defaultValue: this._defaultTableProperties.borderWidth\n    }));\n    view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n      viewField: view.backgroundInput,\n      commandName: 'tableBackgroundColor',\n      errorText: colorErrorText,\n      validator: colorFieldValidator,\n      defaultValue: this._defaultTableProperties.backgroundColor\n    }));\n    view.on('change:width', this._getValidatedPropertyChangeCallback({\n      viewField: view.widthInput,\n      commandName: 'tableWidth',\n      errorText: lengthErrorText,\n      validator: lengthFieldValidator,\n      defaultValue: this._defaultTableProperties.width\n    }));\n    view.on('change:height', this._getValidatedPropertyChangeCallback({\n      viewField: view.heightInput,\n      commandName: 'tableHeight',\n      errorText: lengthErrorText,\n      validator: lengthFieldValidator,\n      defaultValue: this._defaultTableProperties.height\n    }));\n    view.on('change:alignment', this._getPropertyChangeCallback('tableAlignment', this._defaultTableProperties.alignment));\n    return view;\n  }\n  /**\n   * In this method the \"editor data -> UI\" binding is happening.\n   *\n   * When executed, this method obtains selected table property values from various table commands\n   * and passes them to the {@link #view}.\n   *\n   * This way, the UI stays up–to–date with the editor data.\n   *\n   * @private\n   */\n\n\n  _fillViewFormFromCommandValues() {\n    const commands = this.editor.commands;\n    const borderStyleCommand = commands.get('tableBorderStyle');\n    Object.entries(propertyToCommandMap).map(_ref => {\n      let [property, commandName] = _ref;\n      const defaultValue = this._defaultTableProperties[property] || '';\n      return [property, commands.get(commandName).value || defaultValue];\n    }).forEach(_ref2 => {\n      let [property, value] = _ref2;\n\n      // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n      if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n        return;\n      }\n\n      this.view.set(property, value);\n    });\n  }\n  /**\n   * Shows the {@link #view} in the {@link #_balloon}.\n   *\n   * **Note**: Each time a view is shown, the new {@link #_undoStepBatch} is created that contains\n   * all changes made to the document when the view is visible, allowing a single undo step\n   * for all of them.\n   *\n   * @protected\n   */\n\n\n  _showView() {\n    const editor = this.editor;\n    this.listenTo(editor.ui, 'update', () => {\n      this._updateView();\n    }); // Update the view with the model values.\n\n    this._fillViewFormFromCommandValues();\n\n    this._balloon.add({\n      view: this.view,\n      position: getBalloonTablePositionData(editor)\n    }); // Create a new batch. Clicking \"Cancel\" will undo this batch.\n\n\n    this._undoStepBatch = editor.model.createBatch(); // Basic a11y.\n\n    this.view.focus();\n  }\n  /**\n   * Removes the {@link #view} from the {@link #_balloon}.\n   *\n   * @protected\n   */\n\n\n  _hideView() {\n    const editor = this.editor;\n    this.stopListening(editor.ui, 'update'); // Blur any input element before removing it from DOM to prevent issues in some browsers.\n    // See https://github.com/ckeditor/ckeditor5/issues/1501.\n\n    this.view.saveButtonView.focus();\n\n    this._balloon.remove(this.view); // Make sure the focus is not lost in the process by putting it directly\n    // into the editing view.\n\n\n    this.editor.editing.view.focus();\n  }\n  /**\n   * Repositions the {@link #_balloon} or hides the {@link #view} if a table is no longer selected.\n   *\n   * @protected\n   */\n\n\n  _updateView() {\n    const editor = this.editor;\n    const viewDocument = editor.editing.view.document;\n\n    if (!getTableWidgetAncestor(viewDocument.selection)) {\n      this._hideView();\n    } else if (this._isViewVisible) {\n      repositionContextualBalloon(editor, 'table');\n    }\n  }\n  /**\n   * Returns `true` when the {@link #view} is the visible in the {@link #_balloon}.\n   *\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _isViewVisible() {\n    return this._balloon.visibleView === this.view;\n  }\n  /**\n   * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n   *\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _isViewInBalloon() {\n    return this._balloon.hasView(this.view);\n  }\n  /**\n   * Creates a callback that when executed upon {@link #view view's} property change\n   * executes a related editor command with the new property value.\n   *\n   * If new value will be set to the default value, the command will not be executed.\n   *\n   * @private\n   * @param {String} commandName The command that will be executed.\n   * @param {String} defaultValue The default value of the command.\n   * @returns {Function}\n   */\n\n\n  _getPropertyChangeCallback(commandName, defaultValue) {\n    return (evt, propertyName, newValue, oldValue) => {\n      // If the \"oldValue\" is missing and \"newValue\" is set to the default value, do not execute the command.\n      // It is an initial call (when opening the table properties view).\n      if (!oldValue && defaultValue === newValue) {\n        return;\n      }\n\n      this.editor.execute(commandName, {\n        value: newValue,\n        batch: this._undoStepBatch\n      });\n    };\n  }\n  /**\n   * Creates a callback that when executed upon {@link #view view's} property change:\n   * * executes a related editor command with the new property value if the value is valid,\n   * * or sets the error text next to the invalid field, if the value did not pass the validation.\n   *\n   * @private\n   * @param {Object} options\n   * @param {String} options.commandName\n   * @param {module:ui/view~View} options.viewField\n   * @param {Function} options.validator\n   * @param {String} options.errorText\n   * @param {String} options.defaultValue\n   * @returns {Function}\n   */\n\n\n  _getValidatedPropertyChangeCallback(options) {\n    const {\n      commandName,\n      viewField,\n      validator,\n      errorText,\n      defaultValue\n    } = options;\n    const setErrorTextDebounced = debounce(() => {\n      viewField.errorText = errorText;\n    }, ERROR_TEXT_TIMEOUT);\n    return (evt, propertyName, newValue, oldValue) => {\n      setErrorTextDebounced.cancel(); // If the \"oldValue\" is missing and \"newValue\" is set to the default value, do not execute the command.\n      // It is an initial call (when opening the table properties view).\n\n      if (!oldValue && defaultValue === newValue) {\n        return;\n      }\n\n      if (validator(newValue)) {\n        this.editor.execute(commandName, {\n          value: newValue,\n          batch: this._undoStepBatch\n        });\n        viewField.errorText = null;\n      } else {\n        setErrorTextDebounced();\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesui.js"],"names":["Plugin","ButtonView","ContextualBalloon","clickOutsideHandler","getLocalizedColorOptions","normalizeColorOptions","debounce","TablePropertiesView","tableProperties","colorFieldValidator","getLocalizedColorErrorText","getLocalizedLengthErrorText","lengthFieldValidator","lineWidthFieldValidator","defaultColors","getTableWidgetAncestor","getBalloonTablePositionData","repositionContextualBalloon","getNormalizedDefaultProperties","ERROR_TEXT_TIMEOUT","propertyToCommandMap","borderStyle","borderColor","borderWidth","backgroundColor","width","height","alignment","TablePropertiesUI","requires","pluginName","constructor","editor","config","define","borderColors","backgroundColors","init","t","_defaultTableProperties","get","includeAlignmentProperty","_balloon","plugins","view","_createPropertiesView","_undoStepBatch","ui","componentFactory","add","locale","set","label","icon","tooltip","listenTo","_showView","commands","Object","values","map","commandName","bind","toMany","areEnabled","some","isCommandEnabled","destroy","borderColorsConfig","localizedBorderColors","backgroundColorsConfig","localizedBackgroundColors","defaultTableProperties","render","_hideView","operations","length","execute","keystrokes","data","cancel","emitter","activator","_isViewInBalloon","contextElements","element","callback","colorErrorText","lengthErrorText","on","_getPropertyChangeCallback","_getValidatedPropertyChangeCallback","viewField","borderColorInput","errorText","validator","defaultValue","borderWidthInput","backgroundInput","widthInput","heightInput","_fillViewFormFromCommandValues","borderStyleCommand","entries","property","value","forEach","_updateView","position","model","createBatch","focus","stopListening","saveButtonView","remove","editing","viewDocument","document","selection","_isViewVisible","visibleView","hasView","evt","propertyName","newValue","oldValue","batch","options","setErrorTextDebounced"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableproperties/tablepropertiesui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler, getLocalizedColorOptions, normalizeColorOptions } from 'ckeditor5/src/ui';\n\nimport { debounce } from 'lodash-es';\n\nimport TablePropertiesView from './ui/tablepropertiesview';\nimport tableProperties from './../../theme/icons/table-properties.svg';\nimport {\n\tcolorFieldValidator,\n\tgetLocalizedColorErrorText,\n\tgetLocalizedLengthErrorText,\n\tlengthFieldValidator,\n\tlineWidthFieldValidator,\n\tdefaultColors\n} from '../utils/ui/table-properties';\nimport { getTableWidgetAncestor } from '../utils/ui/widget';\nimport { getBalloonTablePositionData, repositionContextualBalloon } from '../utils/ui/contextualballoon';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\n\nconst ERROR_TEXT_TIMEOUT = 500;\n\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n\tborderStyle: 'tableBorderStyle',\n\tborderColor: 'tableBorderColor',\n\tborderWidth: 'tableBorderWidth',\n\tbackgroundColor: 'tableBackgroundColor',\n\twidth: 'tableWidth',\n\theight: 'tableHeight',\n\talignment: 'tableAlignment'\n};\n\n/**\n * The table properties UI plugin. It introduces the `'tableProperties'` button\n * that opens a form allowing to specify visual styling of an entire table.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TablePropertiesUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TablePropertiesUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'table.tableProperties', {\n\t\t\tborderColors: defaultColors,\n\t\t\tbackgroundColors: defaultColors\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\t/**\n\t\t * The default table properties.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:table/tableproperties~TablePropertiesOptions}\n\t\t */\n\t\tthis._defaultTableProperties = getNormalizedDefaultProperties( editor.config.get( 'table.tableProperties.defaultProperties' ), {\n\t\t\tincludeAlignmentProperty: true\n\t\t} );\n\n\t\t/**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\n\t\t/**\n\t\t * The properties form view displayed inside the balloon.\n\t\t *\n\t\t * @member {module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}\n\t\t */\n\t\tthis.view = this._createPropertiesView();\n\n\t\t/**\n\t\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/model/batch~Batch}\n\t\t */\n\t\tthis._undoStepBatch = null;\n\n\t\teditor.ui.componentFactory.add( 'tableProperties', locale => {\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\tlabel: t( 'Table properties' ),\n\t\t\t\ticon: tableProperties,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tthis.listenTo( view, 'execute', () => this._showView() );\n\n\t\t\tconst commands = Object.values( propertyToCommandMap )\n\t\t\t\t.map( commandName => editor.commands.get( commandName ) );\n\n\t\t\tview.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => (\n\t\t\t\tareEnabled.some( isCommandEnabled => isCommandEnabled )\n\t\t\t) );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1341.\n\t\tthis.view.destroy();\n\t}\n\n\t/**\n\t * Creates the {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} instance.\n\t *\n\t * @private\n\t * @returns {module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} The table\n\t * properties form view instance.\n\t */\n\t_createPropertiesView() {\n\t\tconst editor = this.editor;\n\t\tconst config = editor.config.get( 'table.tableProperties' );\n\t\tconst borderColorsConfig = normalizeColorOptions( config.borderColors );\n\t\tconst localizedBorderColors = getLocalizedColorOptions( editor.locale, borderColorsConfig );\n\t\tconst backgroundColorsConfig = normalizeColorOptions( config.backgroundColors );\n\t\tconst localizedBackgroundColors = getLocalizedColorOptions( editor.locale, backgroundColorsConfig );\n\n\t\tconst view = new TablePropertiesView( editor.locale, {\n\t\t\tborderColors: localizedBorderColors,\n\t\t\tbackgroundColors: localizedBackgroundColors,\n\t\t\tdefaultTableProperties: this._defaultTableProperties\n\t\t} );\n\t\tconst t = editor.t;\n\n\t\t// Render the view so its #element is available for the clickOutsideHandler.\n\t\tview.render();\n\n\t\tthis.listenTo( view, 'submit', () => {\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\tthis.listenTo( view, 'cancel', () => {\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/6180\n\t\t\tif ( this._undoStepBatch.operations.length ) {\n\t\t\t\teditor.execute( 'undo', this._undoStepBatch );\n\t\t\t}\n\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\t// Close the balloon on Esc key press.\n\t\tview.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._hideView();\n\t\t\tcancel();\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: view,\n\t\t\tactivator: () => this._isViewInBalloon,\n\t\t\tcontextElements: [ this._balloon.view.element ],\n\t\t\tcallback: () => this._hideView()\n\t\t} );\n\n\t\tconst colorErrorText = getLocalizedColorErrorText( t );\n\t\tconst lengthErrorText = getLocalizedLengthErrorText( t );\n\n\t\t// Create the \"UI -> editor data\" binding.\n\t\t// These listeners update the editor data (via table commands) when any observable\n\t\t// property of the view has changed. They also validate the value and display errors in the UI\n\t\t// when necessary. This makes the view live, which means the changes are\n\t\t// visible in the editing as soon as the user types or changes fields' values.\n\t\tview.on(\n\t\t\t'change:borderStyle',\n\t\t\tthis._getPropertyChangeCallback( 'tableBorderStyle', this._defaultTableProperties.borderStyle )\n\t\t);\n\n\t\tview.on( 'change:borderColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderColorInput,\n\t\t\tcommandName: 'tableBorderColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator,\n\t\t\tdefaultValue: this._defaultTableProperties.borderColor\n\t\t} ) );\n\n\t\tview.on( 'change:borderWidth', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderWidthInput,\n\t\t\tcommandName: 'tableBorderWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lineWidthFieldValidator,\n\t\t\tdefaultValue: this._defaultTableProperties.borderWidth\n\t\t} ) );\n\n\t\tview.on( 'change:backgroundColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.backgroundInput,\n\t\t\tcommandName: 'tableBackgroundColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator,\n\t\t\tdefaultValue: this._defaultTableProperties.backgroundColor\n\t\t} ) );\n\n\t\tview.on( 'change:width', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.widthInput,\n\t\t\tcommandName: 'tableWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator,\n\t\t\tdefaultValue: this._defaultTableProperties.width\n\t\t} ) );\n\n\t\tview.on( 'change:height', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.heightInput,\n\t\t\tcommandName: 'tableHeight',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator,\n\t\t\tdefaultValue: this._defaultTableProperties.height\n\t\t} ) );\n\n\t\tview.on(\n\t\t\t'change:alignment',\n\t\t\tthis._getPropertyChangeCallback( 'tableAlignment', this._defaultTableProperties.alignment )\n\t\t);\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected table property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t *\n\t * @private\n\t */\n\t_fillViewFormFromCommandValues() {\n\t\tconst commands = this.editor.commands;\n\t\tconst borderStyleCommand = commands.get( 'tableBorderStyle' );\n\n\t\tObject.entries( propertyToCommandMap )\n\t\t\t.map( ( [ property, commandName ] ) => {\n\t\t\t\tconst defaultValue = this._defaultTableProperties[ property ] || '';\n\n\t\t\t\treturn [ property, commands.get( commandName ).value || defaultValue ];\n\t\t\t} )\n\t\t\t.forEach( ( [ property, value ] ) => {\n\t\t\t\t// Do not set the `border-color` and `border-width` fields if `border-style:none`.\n\t\t\t\tif ( ( property === 'borderColor' || property === 'borderWidth' ) && borderStyleCommand.value === 'none' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.view.set( property, value );\n\t\t\t} );\n\t}\n\n\t/**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, the new {@link #_undoStepBatch} is created that contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t *\n\t * @protected\n\t */\n\t_showView() {\n\t\tconst editor = this.editor;\n\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tthis._updateView();\n\t\t} );\n\n\t\t// Update the view with the model values.\n\t\tthis._fillViewFormFromCommandValues();\n\n\t\tthis._balloon.add( {\n\t\t\tview: this.view,\n\t\t\tposition: getBalloonTablePositionData( editor )\n\t\t} );\n\n\t\t// Create a new batch. Clicking \"Cancel\" will undo this batch.\n\t\tthis._undoStepBatch = editor.model.createBatch();\n\n\t\t// Basic a11y.\n\t\tthis.view.focus();\n\t}\n\n\t/**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n\t_hideView() {\n\t\tconst editor = this.editor;\n\n\t\tthis.stopListening( editor.ui, 'update' );\n\n\t\t// Blur any input element before removing it from DOM to prevent issues in some browsers.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1501.\n\t\tthis.view.saveButtonView.focus();\n\n\t\tthis._balloon.remove( this.view );\n\n\t\t// Make sure the focus is not lost in the process by putting it directly\n\t\t// into the editing view.\n\t\tthis.editor.editing.view.focus();\n\t}\n\n\t/**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table is no longer selected.\n\t *\n\t * @protected\n\t */\n\t_updateView() {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tif ( !getTableWidgetAncestor( viewDocument.selection ) ) {\n\t\t\tthis._hideView();\n\t\t} else if ( this._isViewVisible ) {\n\t\t\trepositionContextualBalloon( editor, 'table' );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is the visible in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _isViewVisible() {\n\t\treturn this._balloon.visibleView === this.view;\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _isViewInBalloon() {\n\t\treturn this._balloon.hasView( this.view );\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * If new value will be set to the default value, the command will not be executed.\n\t *\n\t * @private\n\t * @param {String} commandName The command that will be executed.\n\t * @param {String} defaultValue The default value of the command.\n\t * @returns {Function}\n\t */\n\t_getPropertyChangeCallback( commandName, defaultValue ) {\n\t\treturn ( evt, propertyName, newValue, oldValue ) => {\n\t\t\t// If the \"oldValue\" is missing and \"newValue\" is set to the default value, do not execute the command.\n\t\t\t// It is an initial call (when opening the table properties view).\n\t\t\tif ( !oldValue && defaultValue === newValue ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( commandName, {\n\t\t\t\tvalue: newValue,\n\t\t\t\tbatch: this._undoStepBatch\n\t\t\t} );\n\t\t};\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon {@link #view view's} property change:\n\t * * executes a related editor command with the new property value if the value is valid,\n\t * * or sets the error text next to the invalid field, if the value did not pass the validation.\n\t *\n\t * @private\n\t * @param {Object} options\n\t * @param {String} options.commandName\n\t * @param {module:ui/view~View} options.viewField\n\t * @param {Function} options.validator\n\t * @param {String} options.errorText\n\t * @param {String} options.defaultValue\n\t * @returns {Function}\n\t */\n\t_getValidatedPropertyChangeCallback( options ) {\n\t\tconst { commandName, viewField, validator, errorText, defaultValue } = options;\n\t\tconst setErrorTextDebounced = debounce( () => {\n\t\t\tviewField.errorText = errorText;\n\t\t}, ERROR_TEXT_TIMEOUT );\n\n\t\treturn ( evt, propertyName, newValue, oldValue ) => {\n\t\t\tsetErrorTextDebounced.cancel();\n\n\t\t\t// If the \"oldValue\" is missing and \"newValue\" is set to the default value, do not execute the command.\n\t\t\t// It is an initial call (when opening the table properties view).\n\t\t\tif ( !oldValue && defaultValue === newValue ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( validator( newValue ) ) {\n\t\t\t\tthis.editor.execute( commandName, {\n\t\t\t\t\tvalue: newValue,\n\t\t\t\t\tbatch: this._undoStepBatch\n\t\t\t\t} );\n\n\t\t\t\tviewField.errorText = null;\n\t\t\t} else {\n\t\t\t\tsetErrorTextDebounced();\n\t\t\t}\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}