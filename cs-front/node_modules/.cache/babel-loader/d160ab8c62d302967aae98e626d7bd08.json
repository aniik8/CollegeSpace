{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/findandreplaceediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { updateFindResultFromRange } from './utils';\nimport FindCommand from './findcommand';\nimport ReplaceCommand from './replacecommand';\nimport ReplaceAllCommand from './replaceallcommand';\nimport FindNextCommand from './findnextcommand';\nimport FindPreviousCommand from './findpreviouscommand';\nimport FindAndReplaceState from './findandreplacestate'; // eslint-disable-next-line ckeditor5-rules/ckeditor-imports\n\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { debounce } from 'lodash-es';\nimport '../theme/findandreplace.css';\nconst HIGHLIGHT_CLASS = 'ck-find-result_selected'; // Reacts to document changes in order to update search list.\n\nfunction onDocumentChange(results, model, searchCallback) {\n  const changedNodes = new Set();\n  const removedMarkers = new Set();\n  const changes = model.document.differ.getChanges(); // Get nodes in which changes happened to re-run a search callback on them.\n\n  changes.forEach(change => {\n    if (change.name === '$text' || model.schema.isInline(change.position.nodeAfter)) {\n      changedNodes.add(change.position.parent);\n      [...model.markers.getMarkersAtPosition(change.position)].forEach(markerAtChange => {\n        removedMarkers.add(markerAtChange.name);\n      });\n    } else if (change.type === 'insert') {\n      changedNodes.add(change.position.nodeAfter);\n    }\n  }); // Get markers from removed nodes also.\n\n  model.document.differ.getChangedMarkers().forEach(_ref => {\n    let {\n      name,\n      data: {\n        newRange\n      }\n    } = _ref;\n\n    if (newRange && newRange.start.root.rootName === '$graveyard') {\n      removedMarkers.add(name);\n    }\n  }); // Get markers from the updated nodes and remove all (search will be re-run on these nodes).\n\n  changedNodes.forEach(node => {\n    const markersInNode = [...model.markers.getMarkersIntersectingRange(model.createRangeIn(node))];\n    markersInNode.forEach(marker => removedMarkers.add(marker.name));\n  }); // Remove results & markers from the changed part of content.\n\n  model.change(writer => {\n    removedMarkers.forEach(markerName => {\n      // Remove the result first - in order to prevent rendering a removed marker.\n      if (results.has(markerName)) {\n        results.remove(markerName);\n      }\n\n      writer.removeMarker(markerName);\n    });\n  }); // Run search callback again on updated nodes.\n\n  changedNodes.forEach(nodeToCheck => {\n    updateFindResultFromRange(model.createRangeOn(nodeToCheck), model, searchCallback, results);\n  });\n}\n/**\n * Implements the editing part for find and replace plugin. For example conversion, commands etc.\n *\n * @extends module:core/plugin~Plugin\n */\n\n\nexport default class FindAndReplaceEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FindAndReplaceEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    /**\n     * The collection of currently highlighted search results.\n     *\n     * @private\n     * @member {module:utils/collection~Collection} #_activeResults\n     */\n    this._activeResults = null;\n    /**\n     * An object storing the find and replace state within a given editor instance.\n     *\n     * @member {module:find-and-replace/findandreplacestate~FindAndReplaceState} #state\n     */\n\n    this.state = new FindAndReplaceState(this.editor.model);\n\n    this._defineConverters();\n\n    this._defineCommands();\n\n    this.listenTo(this.state, 'change:highlightedResult', (eventInfo, name, newValue, oldValue) => {\n      const {\n        model\n      } = this.editor;\n      model.change(writer => {\n        if (oldValue) {\n          const oldMatchId = oldValue.marker.name.split(':')[1];\n          const oldMarker = model.markers.get(`findResultHighlighted:${oldMatchId}`);\n\n          if (oldMarker) {\n            writer.removeMarker(oldMarker);\n          }\n        }\n\n        if (newValue) {\n          const newMatchId = newValue.marker.name.split(':')[1];\n          writer.addMarker(`findResultHighlighted:${newMatchId}`, {\n            usingOperation: false,\n            affectsData: false,\n            range: newValue.marker.getRange()\n          });\n        }\n      });\n    });\n    const debouncedScrollListener = debounce(scrollToHighlightedResult.bind(this), 32); // Debounce scroll as highlight might be changed very frequently, e.g. when there's a replace all command.\n\n    this.listenTo(this.state, 'change:highlightedResult', debouncedScrollListener, {\n      priority: 'low'\n    }); // It's possible that the editor will get destroyed before debounced call kicks in.\n    // This would result with accessing a view three that is no longer in DOM.\n\n    this.listenTo(this.editor, 'destroy', debouncedScrollListener.cancel);\n    /* istanbul ignore next */\n\n    function scrollToHighlightedResult(eventInfo, name, newValue) {\n      if (newValue) {\n        const domConverter = this.editor.editing.view.domConverter;\n        const viewRange = this.editor.editing.mapper.toViewRange(newValue.marker.getRange());\n        scrollViewportToShowTarget({\n          target: domConverter.viewRangeToDom(viewRange),\n          viewportOffset: 40\n        });\n      }\n    }\n  }\n  /**\n   * Initiate a search.\n   *\n   * @param {Function|String} callbackOrText\n   * @returns {module:utils/collection~Collection}\n   */\n\n\n  find(callbackOrText) {\n    const {\n      editor\n    } = this;\n    const {\n      model\n    } = editor;\n    const {\n      findCallback,\n      results\n    } = editor.execute('find', callbackOrText);\n    this._activeResults = results; // @todo: handle this listener, another copy is in findcommand.js file.\n\n    this.listenTo(model.document, 'change:data', () => onDocumentChange(this._activeResults, model, findCallback));\n    return this._activeResults;\n  }\n  /**\n   * Stops active results from updating, and clears out the results.\n   */\n\n\n  stop() {\n    if (!this._activeResults) {\n      return;\n    }\n\n    this.stopListening(this.editor.model.document);\n    this.state.clear(this.editor.model);\n    this._activeResults = null;\n  }\n  /**\n   * Sets up the commands.\n   *\n   * @private\n   */\n\n\n  _defineCommands() {\n    this.editor.commands.add('find', new FindCommand(this.editor, this.state));\n    this.editor.commands.add('findNext', new FindNextCommand(this.editor, this.state));\n    this.editor.commands.add('findPrevious', new FindPreviousCommand(this.editor, this.state));\n    this.editor.commands.add('replace', new ReplaceCommand(this.editor, this.state));\n    this.editor.commands.add('replaceAll', new ReplaceAllCommand(this.editor, this.state));\n  }\n  /**\n   * Sets up the marker downcast converters for search results highlighting.\n   *\n   * @private\n   */\n\n\n  _defineConverters() {\n    const {\n      editor\n    } = this; // Setup the marker highlighting conversion.\n\n    editor.conversion.for('editingDowncast').markerToHighlight({\n      model: 'findResult',\n      view: _ref2 => {\n        let {\n          markerName\n        } = _ref2;\n        const [, id] = markerName.split(':'); // Marker removal from the view has a bug: https://github.com/ckeditor/ckeditor5/issues/7499\n        // A minimal option is to return a new object for each converted marker...\n\n        return {\n          name: 'span',\n          classes: ['ck-find-result'],\n          attributes: {\n            // ...however, adding a unique attribute should be future-proof..\n            'data-find-result': id\n          }\n        };\n      }\n    });\n    editor.conversion.for('editingDowncast').markerToHighlight({\n      model: 'findResultHighlighted',\n      view: _ref3 => {\n        let {\n          markerName\n        } = _ref3;\n        const [, id] = markerName.split(':'); // Marker removal from the view has a bug: https://github.com/ckeditor/ckeditor5/issues/7499\n        // A minimal option is to return a new object for each converted marker...\n\n        return {\n          name: 'span',\n          classes: [HIGHLIGHT_CLASS],\n          attributes: {\n            // ...however, adding a unique attribute should be future-proof..\n            'data-find-result': id\n          }\n        };\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-find-and-replace/src/findandreplaceediting.js"],"names":["Plugin","updateFindResultFromRange","FindCommand","ReplaceCommand","ReplaceAllCommand","FindNextCommand","FindPreviousCommand","FindAndReplaceState","scrollViewportToShowTarget","debounce","HIGHLIGHT_CLASS","onDocumentChange","results","model","searchCallback","changedNodes","Set","removedMarkers","changes","document","differ","getChanges","forEach","change","name","schema","isInline","position","nodeAfter","add","parent","markers","getMarkersAtPosition","markerAtChange","type","getChangedMarkers","data","newRange","start","root","rootName","node","markersInNode","getMarkersIntersectingRange","createRangeIn","marker","writer","markerName","has","remove","removeMarker","nodeToCheck","createRangeOn","FindAndReplaceEditing","pluginName","init","_activeResults","state","editor","_defineConverters","_defineCommands","listenTo","eventInfo","newValue","oldValue","oldMatchId","split","oldMarker","get","newMatchId","addMarker","usingOperation","affectsData","range","getRange","debouncedScrollListener","scrollToHighlightedResult","bind","priority","cancel","domConverter","editing","view","viewRange","mapper","toViewRange","target","viewRangeToDom","viewportOffset","find","callbackOrText","findCallback","execute","stop","stopListening","clear","commands","conversion","for","markerToHighlight","id","classes","attributes"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/findandreplaceediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { updateFindResultFromRange } from './utils';\nimport FindCommand from './findcommand';\nimport ReplaceCommand from './replacecommand';\nimport ReplaceAllCommand from './replaceallcommand';\nimport FindNextCommand from './findnextcommand';\nimport FindPreviousCommand from './findpreviouscommand';\nimport FindAndReplaceState from './findandreplacestate';\n\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\n\nimport { debounce } from 'lodash-es';\n\nimport '../theme/findandreplace.css';\n\nconst HIGHLIGHT_CLASS = 'ck-find-result_selected';\n\n// Reacts to document changes in order to update search list.\nfunction onDocumentChange( results, model, searchCallback ) {\n\tconst changedNodes = new Set();\n\tconst removedMarkers = new Set();\n\n\tconst changes = model.document.differ.getChanges();\n\n\t// Get nodes in which changes happened to re-run a search callback on them.\n\tchanges.forEach( change => {\n\t\tif ( change.name === '$text' || model.schema.isInline( change.position.nodeAfter ) ) {\n\t\t\tchangedNodes.add( change.position.parent );\n\n\t\t\t[ ...model.markers.getMarkersAtPosition( change.position ) ].forEach( markerAtChange => {\n\t\t\t\tremovedMarkers.add( markerAtChange.name );\n\t\t\t} );\n\t\t} else if ( change.type === 'insert' ) {\n\t\t\tchangedNodes.add( change.position.nodeAfter );\n\t\t}\n\t} );\n\n\t// Get markers from removed nodes also.\n\tmodel.document.differ.getChangedMarkers().forEach( ( { name, data: { newRange } } ) => {\n\t\tif ( newRange && newRange.start.root.rootName === '$graveyard' ) {\n\t\t\tremovedMarkers.add( name );\n\t\t}\n\t} );\n\n\t// Get markers from the updated nodes and remove all (search will be re-run on these nodes).\n\tchangedNodes.forEach( node => {\n\t\tconst markersInNode = [ ...model.markers.getMarkersIntersectingRange( model.createRangeIn( node ) ) ];\n\n\t\tmarkersInNode.forEach( marker => removedMarkers.add( marker.name ) );\n\t} );\n\n\t// Remove results & markers from the changed part of content.\n\tmodel.change( writer => {\n\t\tremovedMarkers.forEach( markerName => {\n\t\t\t// Remove the result first - in order to prevent rendering a removed marker.\n\t\t\tif ( results.has( markerName ) ) {\n\t\t\t\tresults.remove( markerName );\n\t\t\t}\n\n\t\t\twriter.removeMarker( markerName );\n\t\t} );\n\t} );\n\n\t// Run search callback again on updated nodes.\n\tchangedNodes.forEach( nodeToCheck => {\n\t\tupdateFindResultFromRange( model.createRangeOn( nodeToCheck ), model, searchCallback, results );\n\t} );\n}\n\n/**\n * Implements the editing part for find and replace plugin. For example conversion, commands etc.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FindAndReplaceEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FindAndReplaceEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * The collection of currently highlighted search results.\n\t\t *\n\t\t * @private\n\t\t * @member {module:utils/collection~Collection} #_activeResults\n\t\t */\n\t\tthis._activeResults = null;\n\n\t\t/**\n\t\t * An object storing the find and replace state within a given editor instance.\n\t\t *\n\t\t * @member {module:find-and-replace/findandreplacestate~FindAndReplaceState} #state\n\t\t */\n\t\tthis.state = new FindAndReplaceState( this.editor.model );\n\n\t\tthis._defineConverters();\n\t\tthis._defineCommands();\n\n\t\tthis.listenTo( this.state, 'change:highlightedResult', ( eventInfo, name, newValue, oldValue ) => {\n\t\t\tconst { model } = this.editor;\n\n\t\t\tmodel.change( writer => {\n\t\t\t\tif ( oldValue ) {\n\t\t\t\t\tconst oldMatchId = oldValue.marker.name.split( ':' )[ 1 ];\n\t\t\t\t\tconst oldMarker = model.markers.get( `findResultHighlighted:${ oldMatchId }` );\n\n\t\t\t\t\tif ( oldMarker ) {\n\t\t\t\t\t\twriter.removeMarker( oldMarker );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( newValue ) {\n\t\t\t\t\tconst newMatchId = newValue.marker.name.split( ':' )[ 1 ];\n\t\t\t\t\twriter.addMarker( `findResultHighlighted:${ newMatchId }`, {\n\t\t\t\t\t\tusingOperation: false,\n\t\t\t\t\t\taffectsData: false,\n\t\t\t\t\t\trange: newValue.marker.getRange()\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\tconst debouncedScrollListener = debounce( scrollToHighlightedResult.bind( this ), 32 );\n\t\t// Debounce scroll as highlight might be changed very frequently, e.g. when there's a replace all command.\n\t\tthis.listenTo( this.state, 'change:highlightedResult', debouncedScrollListener, { priority: 'low' } );\n\n\t\t// It's possible that the editor will get destroyed before debounced call kicks in.\n\t\t// This would result with accessing a view three that is no longer in DOM.\n\t\tthis.listenTo( this.editor, 'destroy', debouncedScrollListener.cancel );\n\n\t\t/* istanbul ignore next */\n\t\tfunction scrollToHighlightedResult( eventInfo, name, newValue ) {\n\t\t\tif ( newValue ) {\n\t\t\t\tconst domConverter = this.editor.editing.view.domConverter;\n\t\t\t\tconst viewRange = this.editor.editing.mapper.toViewRange( newValue.marker.getRange() );\n\n\t\t\t\tscrollViewportToShowTarget( {\n\t\t\t\t\ttarget: domConverter.viewRangeToDom( viewRange ),\n\t\t\t\t\tviewportOffset: 40\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Initiate a search.\n\t *\n\t * @param {Function|String} callbackOrText\n\t * @returns {module:utils/collection~Collection}\n\t */\n\tfind( callbackOrText ) {\n\t\tconst { editor } = this;\n\t\tconst { model } = editor;\n\n\t\tconst { findCallback, results } = editor.execute( 'find', callbackOrText );\n\n\t\tthis._activeResults = results;\n\n\t\t// @todo: handle this listener, another copy is in findcommand.js file.\n\t\tthis.listenTo( model.document, 'change:data', () => onDocumentChange( this._activeResults, model, findCallback ) );\n\n\t\treturn this._activeResults;\n\t}\n\n\t/**\n\t * Stops active results from updating, and clears out the results.\n\t */\n\tstop() {\n\t\tif ( !this._activeResults ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.stopListening( this.editor.model.document );\n\n\t\tthis.state.clear( this.editor.model );\n\n\t\tthis._activeResults = null;\n\t}\n\n\t/**\n\t * Sets up the commands.\n\t *\n\t * @private\n\t */\n\t_defineCommands() {\n\t\tthis.editor.commands.add( 'find', new FindCommand( this.editor, this.state ) );\n\t\tthis.editor.commands.add( 'findNext', new FindNextCommand( this.editor, this.state ) );\n\t\tthis.editor.commands.add( 'findPrevious', new FindPreviousCommand( this.editor, this.state ) );\n\t\tthis.editor.commands.add( 'replace', new ReplaceCommand( this.editor, this.state ) );\n\t\tthis.editor.commands.add( 'replaceAll', new ReplaceAllCommand( this.editor, this.state ) );\n\t}\n\n\t/**\n\t * Sets up the marker downcast converters for search results highlighting.\n\t *\n\t * @private\n\t */\n\t_defineConverters() {\n\t\tconst { editor } = this;\n\n\t\t// Setup the marker highlighting conversion.\n\t\teditor.conversion.for( 'editingDowncast' ).markerToHighlight( {\n\t\t\tmodel: 'findResult',\n\t\t\tview: ( { markerName } ) => {\n\t\t\t\tconst [ , id ] = markerName.split( ':' );\n\n\t\t\t\t// Marker removal from the view has a bug: https://github.com/ckeditor/ckeditor5/issues/7499\n\t\t\t\t// A minimal option is to return a new object for each converted marker...\n\t\t\t\treturn {\n\t\t\t\t\tname: 'span',\n\t\t\t\t\tclasses: [ 'ck-find-result' ],\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\t// ...however, adding a unique attribute should be future-proof..\n\t\t\t\t\t\t'data-find-result': id\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} );\n\n\t\teditor.conversion.for( 'editingDowncast' ).markerToHighlight( {\n\t\t\tmodel: 'findResultHighlighted',\n\t\t\tview: ( { markerName } ) => {\n\t\t\t\tconst [ , id ] = markerName.split( ':' );\n\n\t\t\t\t// Marker removal from the view has a bug: https://github.com/ckeditor/ckeditor5/issues/7499\n\t\t\t\t// A minimal option is to return a new object for each converted marker...\n\t\t\t\treturn {\n\t\t\t\t\tname: 'span',\n\t\t\t\t\tclasses: [ HIGHLIGHT_CLASS ],\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\t// ...however, adding a unique attribute should be future-proof..\n\t\t\t\t\t\t'data-find-result': id\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}