{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablecellproperties/ui/tablecellpropertiesview\n */\nimport { LabeledFieldView, createLabeledDropdown, createLabeledInputText, LabelView, addListToDropdown, ToolbarView, ButtonView, FocusCycler, View, ViewCollection, FormHeaderView, submitHandler } from 'ckeditor5/src/ui';\nimport { KeystrokeHandler, FocusTracker } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\nimport { fillToolbar, getBorderStyleDefinitions, getBorderStyleLabels, getLabeledColorInputCreator } from '../../utils/ui/table-properties';\nimport FormRowView from '../../ui/formrowview';\nimport '../../../theme/form.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tablecellproperties.css';\nconst ALIGNMENT_ICONS = {\n  left: icons.alignLeft,\n  center: icons.alignCenter,\n  right: icons.alignRight,\n  justify: icons.alignJustify,\n  top: icons.alignTop,\n  middle: icons.alignMiddle,\n  bottom: icons.alignBottom\n};\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n *\n * @extends module:ui/view~View\n */\n\nexport default class TableCellPropertiesView extends View {\n  /**\n   * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n   * @param {Object} options Additional configuration of the view.\n   * @param {module:table/table~TableColorConfig} options.borderColors A configuration of the border\n   * color palette used by the\n   * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#borderColorInput}.\n   * @param {module:table/table~TableColorConfig} options.backgroundColors A configuration of the background\n   * color palette used by the\n   * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#backgroundInput}.\n   * @param {module:table/tablecellproperties~TableCellPropertiesOptions} options.defaultTableCellProperties The default\n   * table cell properties.\n   */\n  constructor(locale, options) {\n    super(locale);\n    this.set({\n      /**\n       * The value of the cell border style.\n       *\n       * @observable\n       * @default ''\n       * @member #borderStyle\n       */\n      borderStyle: '',\n\n      /**\n       * The value of the cell border width style.\n       *\n       * @observable\n       * @default ''\n       * @member #borderWidth\n       */\n      borderWidth: '',\n\n      /**\n       * The value of the cell border color style.\n       *\n       * @observable\n       * @default ''\n       * @member #borderColor\n       */\n      borderColor: '',\n\n      /**\n       * The value of the cell padding style.\n       *\n       * @observable\n       * @default ''\n       * @member #padding\n       */\n      padding: '',\n\n      /**\n       * The value of the cell background color style.\n       *\n       * @observable\n       * @default ''\n       * @member #backgroundColor\n       */\n      backgroundColor: '',\n\n      /**\n       * The value of the table cell width style.\n       *\n       * @observable\n       * @default ''\n       * @member #width\n       */\n      width: '',\n\n      /**\n       * The value of the table cell height style.\n       *\n       * @observable\n       * @default ''\n       * @member #height\n       */\n      height: '',\n\n      /**\n       * The value of the horizontal text alignment style.\n       *\n       * @observable\n       * @default ''\n       * @member #horizontalAlignment\n       */\n      horizontalAlignment: '',\n\n      /**\n       * The value of the vertical text alignment style.\n       *\n       * @observable\n       * @default ''\n       * @member #verticalAlignment\n       */\n      verticalAlignment: ''\n    });\n    /**\n     * Options passed to the view. See {@link #constructor} to learn more.\n     *\n     * @member {Object}\n     */\n\n    this.options = options;\n\n    const {\n      borderStyleDropdown,\n      borderWidthInput,\n      borderColorInput,\n      borderRowLabel\n    } = this._createBorderFields();\n\n    const {\n      backgroundRowLabel,\n      backgroundInput\n    } = this._createBackgroundFields();\n\n    const {\n      widthInput,\n      operatorLabel,\n      heightInput,\n      dimensionsLabel\n    } = this._createDimensionFields();\n\n    const {\n      horizontalAlignmentToolbar,\n      verticalAlignmentToolbar,\n      alignmentLabel\n    } = this._createAlignmentFields();\n    /**\n     * Tracks information about the DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * A collection of child views in the form.\n     *\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    /**\n     * A dropdown that allows selecting the style of the table cell border.\n     *\n     * @readonly\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n    this.borderStyleDropdown = borderStyleDropdown;\n    /**\n     * An input that allows specifying the width of the table cell border.\n     *\n     * @readonly\n     * @member {module:ui/inputtext/inputtextview~InputTextView}\n     */\n\n    this.borderWidthInput = borderWidthInput;\n    /**\n     * An input that allows specifying the color of the table cell border.\n     *\n     * @readonly\n     * @member {module:table/ui/colorinputview~ColorInputView}\n     */\n\n    this.borderColorInput = borderColorInput;\n    /**\n     * An input that allows specifying the table cell background color.\n     *\n     * @readonly\n     * @member {module:table/ui/colorinputview~ColorInputView}\n     */\n\n    this.backgroundInput = backgroundInput;\n    /**\n     * An input that allows specifying the table cell padding.\n     *\n     * @readonly\n     * @member {module:ui/inputtext/inputtextview~InputTextView}\n     */\n\n    this.paddingInput = this._createPaddingField();\n    /**\n     * An input that allows specifying the table cell width.\n     *\n     * @readonly\n     * @member {module:ui/inputtext/inputtextview~InputTextView}\n     */\n\n    this.widthInput = widthInput;\n    /**\n     * An input that allows specifying the table cell height.\n     *\n     * @readonly\n     * @member {module:ui/inputtext/inputtextview~InputTextView}\n     */\n\n    this.heightInput = heightInput;\n    /**\n     * A toolbar with buttons that allow changing the horizontal text alignment in a table cell.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbar~ToolbarView}\n     */\n\n    this.horizontalAlignmentToolbar = horizontalAlignmentToolbar;\n    /**\n     * A toolbar with buttons that allow changing the vertical text alignment in a table cell.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbar~ToolbarView}\n     */\n\n    this.verticalAlignmentToolbar = verticalAlignmentToolbar; // Defer creating to make sure other fields are present and the Save button can\n    // bind its #isEnabled to their error messages so there's no way to save unless all\n    // fields are valid.\n\n    const {\n      saveButtonView,\n      cancelButtonView\n    } = this._createActionButtons();\n    /**\n     * The \"Save\" button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n\n    this.saveButtonView = saveButtonView;\n    /**\n     * The \"Cancel\" button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.cancelButtonView = cancelButtonView;\n    /**\n     * A collection of views that can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the Shift + Tab keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the Tab key.\n        focusNext: 'tab'\n      }\n    }); // Form header.\n\n    this.children.add(new FormHeaderView(locale, {\n      label: this.t('Cell properties')\n    })); // Border row.\n\n    this.children.add(new FormRowView(locale, {\n      labelView: borderRowLabel,\n      children: [borderRowLabel, borderStyleDropdown, borderColorInput, borderWidthInput],\n      class: 'ck-table-form__border-row'\n    })); // Background.\n\n    this.children.add(new FormRowView(locale, {\n      labelView: backgroundRowLabel,\n      children: [backgroundRowLabel, backgroundInput],\n      class: 'ck-table-form__background-row'\n    })); // Dimensions row and padding.\n\n    this.children.add(new FormRowView(locale, {\n      children: [// Dimensions row.\n      new FormRowView(locale, {\n        labelView: dimensionsLabel,\n        children: [dimensionsLabel, widthInput, operatorLabel, heightInput],\n        class: 'ck-table-form__dimensions-row'\n      }), // Padding row.\n      new FormRowView(locale, {\n        children: [this.paddingInput],\n        class: 'ck-table-cell-properties-form__padding-row'\n      })]\n    })); // Text alignment row.\n\n    this.children.add(new FormRowView(locale, {\n      labelView: alignmentLabel,\n      children: [alignmentLabel, horizontalAlignmentToolbar, verticalAlignmentToolbar],\n      class: 'ck-table-cell-properties-form__alignment-row'\n    })); // Action row.\n\n    this.children.add(new FormRowView(locale, {\n      children: [this.saveButtonView, this.cancelButtonView],\n      class: 'ck-table-form__action-row'\n    }));\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-form', 'ck-table-form', 'ck-table-cell-properties-form'],\n        // https://github.com/ckeditor/ckeditor5-link/issues/90\n        tabindex: '-1'\n      },\n      children: this.children\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n    // which is of the \"submit\" DOM \"type\".\n\n    submitHandler({\n      view: this\n    });\n    [this.borderStyleDropdown, this.borderColorInput, this.borderWidthInput, this.backgroundInput, this.widthInput, this.heightInput, this.paddingInput, this.horizontalAlignmentToolbar, this.verticalAlignmentToolbar, this.saveButtonView, this.cancelButtonView].forEach(view => {\n      // Register the view as focusable.\n      this._focusables.add(view); // Register the view in the focus tracker.\n\n\n      this.focusTracker.add(view.element);\n    }); // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n\n    this.keystrokes.listenTo(this.element);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n  /**\n   * Focuses the fist focusable field in the form.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #borderStyleDropdown},\n   * * {@link #borderWidthInput},\n   * * {@link #borderColorInput}.\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createBorderFields() {\n    const defaultTableCellProperties = this.options.defaultTableCellProperties;\n    const defaultBorder = {\n      style: defaultTableCellProperties.borderStyle,\n      width: defaultTableCellProperties.borderWidth,\n      color: defaultTableCellProperties.borderColor\n    };\n    const colorInputCreator = getLabeledColorInputCreator({\n      colorConfig: this.options.borderColors,\n      columns: 5,\n      defaultColorValue: defaultBorder.color\n    });\n    const locale = this.locale;\n    const t = this.t; // -- Group label ---------------------------------------------\n\n    const borderRowLabel = new LabelView(locale);\n    borderRowLabel.text = t('Border'); // -- Style ---------------------------------------------------\n\n    const styleLabels = getBorderStyleLabels(t);\n    const borderStyleDropdown = new LabeledFieldView(locale, createLabeledDropdown);\n    borderStyleDropdown.set({\n      label: t('Style'),\n      class: 'ck-table-form__border-style'\n    });\n    borderStyleDropdown.fieldView.buttonView.set({\n      isOn: false,\n      withText: true,\n      tooltip: t('Style')\n    });\n    borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', value => {\n      return styleLabels[value ? value : 'none'];\n    });\n    borderStyleDropdown.fieldView.on('execute', evt => {\n      this.borderStyle = evt.source._borderStyleValue;\n    });\n    borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', value => !value);\n    addListToDropdown(borderStyleDropdown.fieldView, getBorderStyleDefinitions(this, defaultBorder.style)); // -- Width ---------------------------------------------------\n\n    const borderWidthInput = new LabeledFieldView(locale, createLabeledInputText);\n    borderWidthInput.set({\n      label: t('Width'),\n      class: 'ck-table-form__border-width'\n    });\n    borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n    borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n    borderWidthInput.fieldView.on('input', () => {\n      this.borderWidth = borderWidthInput.fieldView.element.value;\n    }); // -- Color ---------------------------------------------------\n\n    const borderColorInput = new LabeledFieldView(locale, colorInputCreator);\n    borderColorInput.set({\n      label: t('Color'),\n      class: 'ck-table-form__border-color'\n    });\n    borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n    borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n    borderColorInput.fieldView.on('input', () => {\n      this.borderColor = borderColorInput.fieldView.value;\n    }); // Reset the border color and width fields depending on the `border-style` value.\n\n    this.on('change:borderStyle', (evt, name, newValue, oldValue) => {\n      // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n      // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n      if (!isBorderStyleSet(newValue)) {\n        this.borderColor = '';\n        this.borderWidth = '';\n      } // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n\n\n      if (!isBorderStyleSet(oldValue)) {\n        this.borderColor = defaultBorder.color;\n        this.borderWidth = defaultBorder.width;\n      }\n    });\n    return {\n      borderRowLabel,\n      borderStyleDropdown,\n      borderColorInput,\n      borderWidthInput\n    };\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #backgroundInput}.\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createBackgroundFields() {\n    const locale = this.locale;\n    const t = this.t; // -- Group label ---------------------------------------------\n\n    const backgroundRowLabel = new LabelView(locale);\n    backgroundRowLabel.text = t('Background'); // -- Background color input -----------------------------------\n\n    const colorInputCreator = getLabeledColorInputCreator({\n      colorConfig: this.options.backgroundColors,\n      columns: 5,\n      defaultColorValue: this.options.defaultTableCellProperties.backgroundColor\n    });\n    const backgroundInput = new LabeledFieldView(locale, colorInputCreator);\n    backgroundInput.set({\n      label: t('Color'),\n      class: 'ck-table-cell-properties-form__background'\n    });\n    backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n    backgroundInput.fieldView.on('input', () => {\n      this.backgroundColor = backgroundInput.fieldView.value;\n    });\n    return {\n      backgroundRowLabel,\n      backgroundInput\n    };\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #widthInput}.\n   * * {@link #heightInput}.\n   *\n   * @private\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n   */\n\n\n  _createDimensionFields() {\n    const locale = this.locale;\n    const t = this.t; // -- Label ---------------------------------------------------\n\n    const dimensionsLabel = new LabelView(locale);\n    dimensionsLabel.text = t('Dimensions'); // -- Width ---------------------------------------------------\n\n    const widthInput = new LabeledFieldView(locale, createLabeledInputText);\n    widthInput.set({\n      label: t('Width'),\n      class: 'ck-table-form__dimensions-row__width'\n    });\n    widthInput.fieldView.bind('value').to(this, 'width');\n    widthInput.fieldView.on('input', () => {\n      this.width = widthInput.fieldView.element.value;\n    }); // -- Operator ---------------------------------------------------\n\n    const operatorLabel = new View(locale);\n    operatorLabel.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck-table-form__dimension-operator']\n      },\n      children: [{\n        text: '×'\n      }]\n    }); // -- Height ---------------------------------------------------\n\n    const heightInput = new LabeledFieldView(locale, createLabeledInputText);\n    heightInput.set({\n      label: t('Height'),\n      class: 'ck-table-form__dimensions-row__height'\n    });\n    heightInput.fieldView.bind('value').to(this, 'height');\n    heightInput.fieldView.on('input', () => {\n      this.height = heightInput.fieldView.element.value;\n    });\n    return {\n      dimensionsLabel,\n      widthInput,\n      operatorLabel,\n      heightInput\n    };\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #paddingInput}.\n   *\n   * @private\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n   */\n\n\n  _createPaddingField() {\n    const locale = this.locale;\n    const t = this.t;\n    const paddingInput = new LabeledFieldView(locale, createLabeledInputText);\n    paddingInput.set({\n      label: t('Padding'),\n      class: 'ck-table-cell-properties-form__padding'\n    });\n    paddingInput.fieldView.bind('value').to(this, 'padding');\n    paddingInput.fieldView.on('input', () => {\n      this.padding = paddingInput.fieldView.element.value;\n    });\n    return paddingInput;\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #horizontalAlignmentToolbar},\n   * * {@link #verticalAlignmentToolbar}.\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createAlignmentFields() {\n    const locale = this.locale;\n    const t = this.t;\n    const alignmentLabel = new LabelView(locale);\n    alignmentLabel.text = t('Table cell text alignment'); // -- Horizontal ---------------------------------------------------\n\n    const horizontalAlignmentToolbar = new ToolbarView(locale);\n    const isContentRTL = this.locale.contentLanguageDirection === 'rtl';\n    horizontalAlignmentToolbar.set({\n      isCompact: true,\n      ariaLabel: t('Horizontal text alignment toolbar')\n    });\n    fillToolbar({\n      view: this,\n      icons: ALIGNMENT_ICONS,\n      toolbar: horizontalAlignmentToolbar,\n      labels: this._horizontalAlignmentLabels,\n      propertyName: 'horizontalAlignment',\n      nameToValue: name => {\n        // For the RTL content, we want to swap the buttons \"align to the left\" and \"align to the right\".\n        if (isContentRTL) {\n          if (name === 'left') {\n            return 'right';\n          } else if (name === 'right') {\n            return 'left';\n          }\n        }\n\n        return name;\n      },\n      defaultValue: this.options.defaultTableCellProperties.horizontalAlignment\n    }); // -- Vertical -----------------------------------------------------\n\n    const verticalAlignmentToolbar = new ToolbarView(locale);\n    verticalAlignmentToolbar.set({\n      isCompact: true,\n      ariaLabel: t('Vertical text alignment toolbar')\n    });\n    fillToolbar({\n      view: this,\n      icons: ALIGNMENT_ICONS,\n      toolbar: verticalAlignmentToolbar,\n      labels: this._verticalAlignmentLabels,\n      propertyName: 'verticalAlignment',\n      defaultValue: this.options.defaultTableCellProperties.verticalAlignment\n    });\n    return {\n      horizontalAlignmentToolbar,\n      verticalAlignmentToolbar,\n      alignmentLabel\n    };\n  }\n  /**\n   * Creates the following form controls:\n   *\n   * * {@link #saveButtonView},\n   * * {@link #cancelButtonView}.\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createActionButtons() {\n    const locale = this.locale;\n    const t = this.t;\n    const saveButtonView = new ButtonView(locale);\n    const cancelButtonView = new ButtonView(locale);\n    const fieldsThatShouldValidateToSave = [this.borderWidthInput, this.borderColorInput, this.backgroundInput, this.paddingInput];\n    saveButtonView.set({\n      label: t('Save'),\n      icon: icons.check,\n      class: 'ck-button-save',\n      type: 'submit',\n      withText: true\n    });\n    saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', function () {\n      for (var _len = arguments.length, errorTexts = new Array(_len), _key = 0; _key < _len; _key++) {\n        errorTexts[_key] = arguments[_key];\n      }\n\n      return errorTexts.every(errorText => !errorText);\n    });\n    cancelButtonView.set({\n      label: t('Cancel'),\n      icon: icons.cancel,\n      class: 'ck-button-cancel',\n      withText: true\n    });\n    cancelButtonView.delegate('execute').to(this, 'cancel');\n    return {\n      saveButtonView,\n      cancelButtonView\n    };\n  }\n  /**\n   * Provides localized labels for {@link #horizontalAlignmentToolbar} buttons.\n   *\n   * @private\n   * @type {Object.<String,String>}\n   */\n\n\n  get _horizontalAlignmentLabels() {\n    const locale = this.locale;\n    const t = this.t;\n    const left = t('Align cell text to the left');\n    const center = t('Align cell text to the center');\n    const right = t('Align cell text to the right');\n    const justify = t('Justify cell text'); // Returns object with a proper order of labels.\n\n    if (locale.uiLanguageDirection === 'rtl') {\n      return {\n        right,\n        center,\n        left,\n        justify\n      };\n    } else {\n      return {\n        left,\n        center,\n        right,\n        justify\n      };\n    }\n  }\n  /**\n   * Provides localized labels for {@link #verticalAlignmentToolbar} buttons.\n   *\n   * @private\n   * @type {Object.<String,String>}\n   */\n\n\n  get _verticalAlignmentLabels() {\n    const t = this.t;\n    return {\n      top: t('Align cell text to the top'),\n      middle: t('Align cell text to the middle'),\n      bottom: t('Align cell text to the bottom')\n    };\n  }\n\n}\n\nfunction isBorderStyleSet(value) {\n  return value !== 'none';\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/ui/tablecellpropertiesview.js"],"names":["LabeledFieldView","createLabeledDropdown","createLabeledInputText","LabelView","addListToDropdown","ToolbarView","ButtonView","FocusCycler","View","ViewCollection","FormHeaderView","submitHandler","KeystrokeHandler","FocusTracker","icons","fillToolbar","getBorderStyleDefinitions","getBorderStyleLabels","getLabeledColorInputCreator","FormRowView","ALIGNMENT_ICONS","left","alignLeft","center","alignCenter","right","alignRight","justify","alignJustify","top","alignTop","middle","alignMiddle","bottom","alignBottom","TableCellPropertiesView","constructor","locale","options","set","borderStyle","borderWidth","borderColor","padding","backgroundColor","width","height","horizontalAlignment","verticalAlignment","borderStyleDropdown","borderWidthInput","borderColorInput","borderRowLabel","_createBorderFields","backgroundRowLabel","backgroundInput","_createBackgroundFields","widthInput","operatorLabel","heightInput","dimensionsLabel","_createDimensionFields","horizontalAlignmentToolbar","verticalAlignmentToolbar","alignmentLabel","_createAlignmentFields","focusTracker","keystrokes","children","createCollection","paddingInput","_createPaddingField","saveButtonView","cancelButtonView","_createActionButtons","_focusables","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","add","label","t","labelView","class","setTemplate","tag","attributes","tabindex","render","view","forEach","element","listenTo","destroy","focus","focusFirst","defaultTableCellProperties","defaultBorder","style","color","colorInputCreator","colorConfig","borderColors","columns","defaultColorValue","text","styleLabels","fieldView","buttonView","isOn","withText","tooltip","bind","to","value","on","evt","source","_borderStyleValue","isBorderStyleSet","name","newValue","oldValue","backgroundColors","isContentRTL","contentLanguageDirection","isCompact","ariaLabel","toolbar","labels","_horizontalAlignmentLabels","propertyName","nameToValue","defaultValue","_verticalAlignmentLabels","fieldsThatShouldValidateToSave","icon","check","type","toMany","errorTexts","every","errorText","cancel","delegate","uiLanguageDirection"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablecellproperties/ui/tablecellpropertiesview\n */\n\nimport {\n\tLabeledFieldView,\n\tcreateLabeledDropdown,\n\tcreateLabeledInputText,\n\tLabelView,\n\taddListToDropdown,\n\tToolbarView,\n\tButtonView,\n\tFocusCycler,\n\tView,\n\tViewCollection,\n\tFormHeaderView,\n\tsubmitHandler\n} from 'ckeditor5/src/ui';\nimport { KeystrokeHandler, FocusTracker } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\n\nimport {\n\tfillToolbar,\n\tgetBorderStyleDefinitions,\n\tgetBorderStyleLabels,\n\tgetLabeledColorInputCreator\n} from '../../utils/ui/table-properties';\nimport FormRowView from '../../ui/formrowview';\n\nimport '../../../theme/form.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tablecellproperties.css';\n\nconst ALIGNMENT_ICONS = {\n\tleft: icons.alignLeft,\n\tcenter: icons.alignCenter,\n\tright: icons.alignRight,\n\tjustify: icons.alignJustify,\n\ttop: icons.alignTop,\n\tmiddle: icons.alignMiddle,\n\tbottom: icons.alignBottom\n};\n\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n *\n * @extends module:ui/view~View\n */\nexport default class TableCellPropertiesView extends View {\n\t/**\n\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param {Object} options Additional configuration of the view.\n\t * @param {module:table/table~TableColorConfig} options.borderColors A configuration of the border\n\t * color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#borderColorInput}.\n\t * @param {module:table/table~TableColorConfig} options.backgroundColors A configuration of the background\n\t * color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#backgroundInput}.\n\t * @param {module:table/tablecellproperties~TableCellPropertiesOptions} options.defaultTableCellProperties The default\n\t * table cell properties.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tthis.set( {\n\t\t\t/**\n\t\t\t * The value of the cell border style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #borderStyle\n\t\t\t */\n\t\t\tborderStyle: '',\n\n\t\t\t/**\n\t\t\t * The value of the cell border width style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #borderWidth\n\t\t\t */\n\t\t\tborderWidth: '',\n\n\t\t\t/**\n\t\t\t * The value of the cell border color style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #borderColor\n\t\t\t */\n\t\t\tborderColor: '',\n\n\t\t\t/**\n\t\t\t * The value of the cell padding style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #padding\n\t\t\t */\n\t\t\tpadding: '',\n\n\t\t\t/**\n\t\t\t * The value of the cell background color style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #backgroundColor\n\t\t\t */\n\t\t\tbackgroundColor: '',\n\n\t\t\t/**\n\t\t\t * The value of the table cell width style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #width\n\t\t\t */\n\t\t\twidth: '',\n\n\t\t\t/**\n\t\t\t * The value of the table cell height style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #height\n\t\t\t */\n\t\t\theight: '',\n\n\t\t\t/**\n\t\t\t * The value of the horizontal text alignment style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #horizontalAlignment\n\t\t\t */\n\t\t\thorizontalAlignment: '',\n\n\t\t\t/**\n\t\t\t * The value of the vertical text alignment style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #verticalAlignment\n\t\t\t */\n\t\t\tverticalAlignment: ''\n\t\t} );\n\n\t\t/**\n\t\t * Options passed to the view. See {@link #constructor} to learn more.\n\t\t *\n\t\t * @member {Object}\n\t\t */\n\t\tthis.options = options;\n\n\t\tconst { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n\t\tconst { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n\t\tconst { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n\t\tconst { horizontalAlignmentToolbar, verticalAlignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * A collection of child views in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * A dropdown that allows selecting the style of the table cell border.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.borderStyleDropdown = borderStyleDropdown;\n\n\t\t/**\n\t\t * An input that allows specifying the width of the table cell border.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView}\n\t\t */\n\t\tthis.borderWidthInput = borderWidthInput;\n\n\t\t/**\n\t\t * An input that allows specifying the color of the table cell border.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:table/ui/colorinputview~ColorInputView}\n\t\t */\n\t\tthis.borderColorInput = borderColorInput;\n\n\t\t/**\n\t\t * An input that allows specifying the table cell background color.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:table/ui/colorinputview~ColorInputView}\n\t\t */\n\t\tthis.backgroundInput = backgroundInput;\n\n\t\t/**\n\t\t * An input that allows specifying the table cell padding.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView}\n\t\t */\n\t\tthis.paddingInput = this._createPaddingField();\n\n\t\t/**\n\t\t * An input that allows specifying the table cell width.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView}\n\t\t */\n\t\tthis.widthInput = widthInput;\n\n\t\t/**\n\t\t * An input that allows specifying the table cell height.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView}\n\t\t */\n\t\tthis.heightInput = heightInput;\n\n\t\t/**\n\t\t * A toolbar with buttons that allow changing the horizontal text alignment in a table cell.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbar~ToolbarView}\n\t\t */\n\t\tthis.horizontalAlignmentToolbar = horizontalAlignmentToolbar;\n\n\t\t/**\n\t\t * A toolbar with buttons that allow changing the vertical text alignment in a table cell.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbar~ToolbarView}\n\t\t */\n\t\tthis.verticalAlignmentToolbar = verticalAlignmentToolbar;\n\n\t\t// Defer creating to make sure other fields are present and the Save button can\n\t\t// bind its #isEnabled to their error messages so there's no way to save unless all\n\t\t// fields are valid.\n\t\tconst { saveButtonView, cancelButtonView } = this._createActionButtons();\n\n\t\t/**\n\t\t * The \"Save\" button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.saveButtonView = saveButtonView;\n\n\t\t/**\n\t\t * The \"Cancel\" button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.cancelButtonView = cancelButtonView;\n\n\t\t/**\n\t\t * A collection of views that can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._focusables = new ViewCollection();\n\n\t\t/**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t// Form header.\n\t\tthis.children.add( new FormHeaderView( locale, {\n\t\t\tlabel: this.t( 'Cell properties' )\n\t\t} ) );\n\n\t\t// Border row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: borderRowLabel,\n\t\t\tchildren: [\n\t\t\t\tborderRowLabel,\n\t\t\t\tborderStyleDropdown,\n\t\t\t\tborderColorInput,\n\t\t\t\tborderWidthInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__border-row'\n\t\t} ) );\n\n\t\t// Background.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: backgroundRowLabel,\n\t\t\tchildren: [\n\t\t\t\tbackgroundRowLabel,\n\t\t\t\tbackgroundInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__background-row'\n\t\t} ) );\n\n\t\t// Dimensions row and padding.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\t// Dimensions row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: dimensionsLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tdimensionsLabel,\n\t\t\t\t\t\twidthInput,\n\t\t\t\t\t\toperatorLabel,\n\t\t\t\t\t\theightInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-form__dimensions-row'\n\t\t\t\t} ),\n\t\t\t\t// Padding row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tthis.paddingInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-cell-properties-form__padding-row'\n\t\t\t\t} )\n\t\t\t]\n\t\t} ) );\n\n\t\t// Text alignment row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: alignmentLabel,\n\t\t\tchildren: [\n\t\t\t\talignmentLabel,\n\t\t\t\thorizontalAlignmentToolbar,\n\t\t\t\tverticalAlignmentToolbar\n\t\t\t],\n\t\t\tclass: 'ck-table-cell-properties-form__alignment-row'\n\t\t} ) );\n\n\t\t// Action row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t],\n\t\t\tclass: 'ck-table-form__action-row'\n\t\t} ) );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-form',\n\t\t\t\t\t'ck-table-form',\n\t\t\t\t\t'ck-table-cell-properties-form'\n\t\t\t\t],\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/90\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n\t\t// which is of the \"submit\" DOM \"type\".\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\t[\n\t\t\tthis.borderStyleDropdown,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.widthInput,\n\t\t\tthis.heightInput,\n\t\t\tthis.paddingInput,\n\t\t\tthis.horizontalAlignmentToolbar,\n\t\t\tthis.verticalAlignmentToolbar,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t].forEach( view => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( view );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( view.element );\n\t\t} );\n\n\t\t// Mainly for closing using \"Esc\" and navigation using \"Tab\".\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist focusable field in the form.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createBorderFields() {\n\t\tconst defaultTableCellProperties = this.options.defaultTableCellProperties;\n\t\tconst defaultBorder = {\n\t\t\tstyle: defaultTableCellProperties.borderStyle,\n\t\t\twidth: defaultTableCellProperties.borderWidth,\n\t\t\tcolor: defaultTableCellProperties.borderColor\n\t\t};\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.borderColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: defaultBorder.color\n\t\t} );\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst borderRowLabel = new LabelView( locale );\n\t\tborderRowLabel.text = t( 'Border' );\n\n\t\t// -- Style ---------------------------------------------------\n\n\t\tconst styleLabels = getBorderStyleLabels( t );\n\t\tconst borderStyleDropdown = new LabeledFieldView( locale, createLabeledDropdown );\n\t\tborderStyleDropdown.set( {\n\t\t\tlabel: t( 'Style' ),\n\t\t\tclass: 'ck-table-form__border-style'\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.set( {\n\t\t\tisOn: false,\n\t\t\twithText: true,\n\t\t\ttooltip: t( 'Style' )\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.bind( 'label' ).to( this, 'borderStyle', value => {\n\t\t\treturn styleLabels[ value ? value : 'none' ];\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.on( 'execute', evt => {\n\t\t\tthis.borderStyle = evt.source._borderStyleValue;\n\t\t} );\n\n\t\tborderStyleDropdown.bind( 'isEmpty' ).to( this, 'borderStyle', value => !value );\n\n\t\taddListToDropdown( borderStyleDropdown.fieldView, getBorderStyleDefinitions( this, defaultBorder.style ) );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst borderWidthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tborderWidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__border-width'\n\t\t} );\n\n\t\tborderWidthInput.fieldView.bind( 'value' ).to( this, 'borderWidth' );\n\t\tborderWidthInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\t\tborderWidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderWidth = borderWidthInput.fieldView.element.value;\n\t\t} );\n\n\t\t// -- Color ---------------------------------------------------\n\n\t\tconst borderColorInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tborderColorInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-form__border-color'\n\t\t} );\n\n\t\tborderColorInput.fieldView.bind( 'value' ).to( this, 'borderColor' );\n\t\tborderColorInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\n\t\tborderColorInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderColor = borderColorInput.fieldView.value;\n\t\t} );\n\n\t\t// Reset the border color and width fields depending on the `border-style` value.\n\t\tthis.on( 'change:borderStyle', ( evt, name, newValue, oldValue ) => {\n\t\t\t// When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/6227.\n\t\t\tif ( !isBorderStyleSet( newValue ) ) {\n\t\t\t\tthis.borderColor = '';\n\t\t\t\tthis.borderWidth = '';\n\t\t\t}\n\n\t\t\t// When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n\t\t\tif ( !isBorderStyleSet( oldValue ) ) {\n\t\t\t\tthis.borderColor = defaultBorder.color;\n\t\t\t\tthis.borderWidth = defaultBorder.width;\n\t\t\t}\n\t\t} );\n\n\t\treturn {\n\t\t\tborderRowLabel,\n\t\t\tborderStyleDropdown,\n\t\t\tborderColorInput,\n\t\t\tborderWidthInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createBackgroundFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst backgroundRowLabel = new LabelView( locale );\n\t\tbackgroundRowLabel.text = t( 'Background' );\n\n\t\t// -- Background color input -----------------------------------\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.backgroundColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: this.options.defaultTableCellProperties.backgroundColor\n\t\t} );\n\n\t\tconst backgroundInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tbackgroundInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-cell-properties-form__background'\n\t\t} );\n\n\t\tbackgroundInput.fieldView.bind( 'value' ).to( this, 'backgroundColor' );\n\t\tbackgroundInput.fieldView.on( 'input', () => {\n\t\t\tthis.backgroundColor = backgroundInput.fieldView.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tbackgroundRowLabel,\n\t\t\tbackgroundInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput}.\n\t * * {@link #heightInput}.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n\t */\n\t_createDimensionFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst dimensionsLabel = new LabelView( locale );\n\t\tdimensionsLabel.text = t( 'Dimensions' );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst widthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\twidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__width'\n\t\t} );\n\n\t\twidthInput.fieldView.bind( 'value' ).to( this, 'width' );\n\t\twidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.width = widthInput.fieldView.element.value;\n\t\t} );\n\n\t\t// -- Operator ---------------------------------------------------\n\n\t\tconst operatorLabel = new View( locale );\n\t\toperatorLabel.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-table-form__dimension-operator'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{ text: '×' }\n\t\t\t]\n\t\t} );\n\n\t\t// -- Height ---------------------------------------------------\n\n\t\tconst heightInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\theightInput.set( {\n\t\t\tlabel: t( 'Height' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__height'\n\t\t} );\n\n\t\theightInput.fieldView.bind( 'value' ).to( this, 'height' );\n\t\theightInput.fieldView.on( 'input', () => {\n\t\t\tthis.height = heightInput.fieldView.element.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tdimensionsLabel,\n\t\t\twidthInput,\n\t\t\toperatorLabel,\n\t\t\theightInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #paddingInput}.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n\t */\n\t_createPaddingField() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\tconst paddingInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tpaddingInput.set( {\n\t\t\tlabel: t( 'Padding' ),\n\t\t\tclass: 'ck-table-cell-properties-form__padding'\n\t\t} );\n\n\t\tpaddingInput.fieldView.bind( 'value' ).to( this, 'padding' );\n\t\tpaddingInput.fieldView.on( 'input', () => {\n\t\t\tthis.padding = paddingInput.fieldView.element.value;\n\t\t} );\n\n\t\treturn paddingInput;\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #horizontalAlignmentToolbar},\n\t * * {@link #verticalAlignmentToolbar}.\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createAlignmentFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\tconst alignmentLabel = new LabelView( locale );\n\n\t\talignmentLabel.text = t( 'Table cell text alignment' );\n\n\t\t// -- Horizontal ---------------------------------------------------\n\n\t\tconst horizontalAlignmentToolbar = new ToolbarView( locale );\n\t\tconst isContentRTL = this.locale.contentLanguageDirection === 'rtl';\n\n\t\thorizontalAlignmentToolbar.set( {\n\t\t\tisCompact: true,\n\t\t\tariaLabel: t( 'Horizontal text alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: ALIGNMENT_ICONS,\n\t\t\ttoolbar: horizontalAlignmentToolbar,\n\t\t\tlabels: this._horizontalAlignmentLabels,\n\t\t\tpropertyName: 'horizontalAlignment',\n\t\t\tnameToValue: name => {\n\t\t\t\t// For the RTL content, we want to swap the buttons \"align to the left\" and \"align to the right\".\n\t\t\t\tif ( isContentRTL ) {\n\t\t\t\t\tif ( name === 'left' ) {\n\t\t\t\t\t\treturn 'right';\n\t\t\t\t\t} else if ( name === 'right' ) {\n\t\t\t\t\t\treturn 'left';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn name;\n\t\t\t},\n\t\t\tdefaultValue: this.options.defaultTableCellProperties.horizontalAlignment\n\t\t} );\n\n\t\t// -- Vertical -----------------------------------------------------\n\n\t\tconst verticalAlignmentToolbar = new ToolbarView( locale );\n\n\t\tverticalAlignmentToolbar.set( {\n\t\t\tisCompact: true,\n\t\t\tariaLabel: t( 'Vertical text alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: ALIGNMENT_ICONS,\n\t\t\ttoolbar: verticalAlignmentToolbar,\n\t\t\tlabels: this._verticalAlignmentLabels,\n\t\t\tpropertyName: 'verticalAlignment',\n\t\t\tdefaultValue: this.options.defaultTableCellProperties.verticalAlignment\n\t\t} );\n\n\t\treturn {\n\t\t\thorizontalAlignmentToolbar,\n\t\t\tverticalAlignmentToolbar,\n\t\t\talignmentLabel\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createActionButtons() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\t\tconst saveButtonView = new ButtonView( locale );\n\t\tconst cancelButtonView = new ButtonView( locale );\n\t\tconst fieldsThatShouldValidateToSave = [\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.paddingInput\n\t\t];\n\n\t\tsaveButtonView.set( {\n\t\t\tlabel: t( 'Save' ),\n\t\t\ticon: icons.check,\n\t\t\tclass: 'ck-button-save',\n\t\t\ttype: 'submit',\n\t\t\twithText: true\n\t\t} );\n\n\t\tsaveButtonView.bind( 'isEnabled' ).toMany( fieldsThatShouldValidateToSave, 'errorText', ( ...errorTexts ) => {\n\t\t\treturn errorTexts.every( errorText => !errorText );\n\t\t} );\n\n\t\tcancelButtonView.set( {\n\t\t\tlabel: t( 'Cancel' ),\n\t\t\ticon: icons.cancel,\n\t\t\tclass: 'ck-button-cancel',\n\t\t\twithText: true\n\t\t} );\n\n\t\tcancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n\t\treturn {\n\t\t\tsaveButtonView, cancelButtonView\n\t\t};\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #horizontalAlignmentToolbar} buttons.\n\t *\n\t * @private\n\t * @type {Object.<String,String>}\n\t */\n\tget _horizontalAlignmentLabels() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\tconst left = t( 'Align cell text to the left' );\n\t\tconst center = t( 'Align cell text to the center' );\n\t\tconst right = t( 'Align cell text to the right' );\n\t\tconst justify = t( 'Justify cell text' );\n\n\t\t// Returns object with a proper order of labels.\n\t\tif ( locale.uiLanguageDirection === 'rtl' ) {\n\t\t\treturn { right, center, left, justify };\n\t\t} else {\n\t\t\treturn { left, center, right, justify };\n\t\t}\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #verticalAlignmentToolbar} buttons.\n\t *\n\t * @private\n\t * @type {Object.<String,String>}\n\t */\n\tget _verticalAlignmentLabels() {\n\t\tconst t = this.t;\n\n\t\treturn {\n\t\t\ttop: t( 'Align cell text to the top' ),\n\t\t\tmiddle: t( 'Align cell text to the middle' ),\n\t\t\tbottom: t( 'Align cell text to the bottom' )\n\t\t};\n\t}\n}\n\nfunction isBorderStyleSet( value ) {\n\treturn value !== 'none';\n}\n"]},"metadata":{},"sourceType":"module"}