{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/findandreplacestate\n */\nimport { ObservableMixin, mix, Collection } from 'ckeditor5/src/utils';\n/**\n * The object storing find and replace plugin state for a given editor instance.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class FindAndReplaceState {\n  /**\n   * Creates an instance of the state.\n   *\n   * @param {module:engine/model/model~Model} model\n   */\n  constructor(model) {\n    /**\n     * A collection of find matches.\n     *\n     * @protected\n     * @observable\n     * @member {module:utils/collection~Collection} #results\n     */\n    this.set('results', new Collection());\n    /**\n     * Currently highlighted search result in {@link #results matched results}.\n     *\n     * @readonly\n     * @observable\n     * @member {Object|null} #highlightedResult\n     */\n\n    this.set('highlightedResult', null);\n    /**\n     * Searched text value.\n     *\n     * @readonly\n     * @observable\n     * @member {String} #searchText\n     */\n\n    this.set('searchText', '');\n    /**\n     * Replace text value.\n     *\n     * @readonly\n     * @observable\n     * @member {String} #replaceText\n     */\n\n    this.set('replaceText', '');\n    /**\n     * Indicates whether the matchCase checkbox has been checked.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #matchCase\n     */\n\n    this.set('matchCase', false);\n    /**\n     * Indicates whether the matchWholeWords checkbox has been checked.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #matchWholeWords\n     */\n\n    this.set('matchWholeWords', false);\n    this.results.on('change', (eventInfo, _ref) => {\n      let {\n        removed,\n        index\n      } = _ref;\n      removed = Array.from(removed);\n\n      if (removed.length) {\n        let highlightedResultRemoved = false;\n        model.change(writer => {\n          for (const removedResult of removed) {\n            if (this.highlightedResult === removedResult) {\n              highlightedResultRemoved = true;\n            }\n\n            if (model.markers.has(removedResult.marker.name)) {\n              writer.removeMarker(removedResult.marker);\n            }\n          }\n        });\n\n        if (highlightedResultRemoved) {\n          const nextHighlightedIndex = index >= this.results.length ? 0 : index;\n          this.highlightedResult = this.results.get(nextHighlightedIndex);\n        }\n      }\n    });\n  }\n  /**\n   * Cleans the state up and removes markers from the model.\n   *\n   * @param {module:engine/model/model~Model} model\n   */\n\n\n  clear(model) {\n    this.searchText = '';\n    model.change(writer => {\n      if (this.highlightedResult) {\n        const oldMatchId = this.highlightedResult.marker.name.split(':')[1];\n        const oldMarker = model.markers.get(`findResultHighlighted:${oldMatchId}`);\n\n        if (oldMarker) {\n          writer.removeMarker(oldMarker);\n        }\n      }\n\n      [...this.results].forEach(_ref2 => {\n        let {\n          marker\n        } = _ref2;\n        writer.removeMarker(marker);\n      });\n    });\n    this.results.clear();\n  }\n\n}\nmix(FindAndReplaceState, ObservableMixin);","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-find-and-replace/src/findandreplacestate.js"],"names":["ObservableMixin","mix","Collection","FindAndReplaceState","constructor","model","set","results","on","eventInfo","removed","index","Array","from","length","highlightedResultRemoved","change","writer","removedResult","highlightedResult","markers","has","marker","name","removeMarker","nextHighlightedIndex","get","clear","searchText","oldMatchId","split","oldMarker","forEach"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/findandreplacestate\n */\n\nimport { ObservableMixin, mix, Collection } from 'ckeditor5/src/utils';\n\n/**\n * The object storing find and replace plugin state for a given editor instance.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class FindAndReplaceState {\n\t/**\n\t * Creates an instance of the state.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * A collection of find matches.\n\t\t *\n\t\t * @protected\n\t\t * @observable\n\t\t * @member {module:utils/collection~Collection} #results\n\t\t */\n\t\tthis.set( 'results', new Collection() );\n\n\t\t/**\n\t\t * Currently highlighted search result in {@link #results matched results}.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Object|null} #highlightedResult\n\t\t */\n\t\tthis.set( 'highlightedResult', null );\n\n\t\t/**\n\t\t * Searched text value.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #searchText\n\t\t */\n\t\tthis.set( 'searchText', '' );\n\n\t\t/**\n\t\t * Replace text value.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #replaceText\n\t\t */\n\t\tthis.set( 'replaceText', '' );\n\n\t\t/**\n\t\t * Indicates whether the matchCase checkbox has been checked.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #matchCase\n\t\t */\n\t\tthis.set( 'matchCase', false );\n\n\t\t/**\n\t\t * Indicates whether the matchWholeWords checkbox has been checked.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #matchWholeWords\n\t\t */\n\t\tthis.set( 'matchWholeWords', false );\n\n\t\tthis.results.on( 'change', ( eventInfo, { removed, index } ) => {\n\t\t\tremoved = Array.from( removed );\n\n\t\t\tif ( removed.length ) {\n\t\t\t\tlet highlightedResultRemoved = false;\n\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\tfor ( const removedResult of removed ) {\n\t\t\t\t\t\tif ( this.highlightedResult === removedResult ) {\n\t\t\t\t\t\t\thighlightedResultRemoved = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( model.markers.has( removedResult.marker.name ) ) {\n\t\t\t\t\t\t\twriter.removeMarker( removedResult.marker );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( highlightedResultRemoved ) {\n\t\t\t\t\tconst nextHighlightedIndex = index >= this.results.length ? 0 : index;\n\t\t\t\t\tthis.highlightedResult = this.results.get( nextHighlightedIndex );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Cleans the state up and removes markers from the model.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t */\n\tclear( model ) {\n\t\tthis.searchText = '';\n\n\t\tmodel.change( writer => {\n\t\t\tif ( this.highlightedResult ) {\n\t\t\t\tconst oldMatchId = this.highlightedResult.marker.name.split( ':' )[ 1 ];\n\t\t\t\tconst oldMarker = model.markers.get( `findResultHighlighted:${ oldMatchId }` );\n\n\t\t\t\tif ( oldMarker ) {\n\t\t\t\t\twriter.removeMarker( oldMarker );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t[ ...this.results ].forEach( ( { marker } ) => {\n\t\t\t\twriter.removeMarker( marker );\n\t\t\t} );\n\t\t} );\n\n\t\tthis.results.clear();\n\t}\n}\n\nmix( FindAndReplaceState, ObservableMixin );\n"]},"metadata":{},"sourceType":"module"}