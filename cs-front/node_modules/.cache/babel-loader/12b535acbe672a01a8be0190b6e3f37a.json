{"ast":null,"code":"var _jsxFileName = \"/Users/jaibhole/Documents/CS/cs-front/src/Component/QnA.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport Error from './Error';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport EditorToolbar, { modules, formats } from \"../EditorToolbar\";\nimport CreateAns from './CreateAns';\nimport UpdateQ from './UpdateQ';\nimport UpdateAns from './UpdateAns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  \"width\": \"50%\",\n  \"height\": \"50%\",\n  \"margin\": \"auto\",\n  \"position\": \"absolute\",\n  \"top\": '0',\n  \"left\": '0',\n  \"bottom\": '0',\n  \"right\": '0'\n};\n\nconst QnA = () => {\n  _s();\n\n  const BaseUrl = `http://127.0.0.1:8000`;\n  const history = useHistory();\n  const [question, setQuestion] = useState([]);\n  const [ans, setans] = useState([]);\n  const [clicked, setclicked] = useState({\n    clicked4ans: false,\n    clicked4update: false,\n    answer: false,\n    upVal: null,\n    clicked4ansUp: false\n  });\n\n  const getData = async () => {\n    const data = await fetch(`${BaseUrl}${history.location.pathname}`);\n    const resdata = await data.json();\n    setQuestion(resdata);\n    setans(resdata);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: typeof question[0] === \"undefined\" ? /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 47\n      }, this) : question.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\" \", clicked.clicked4update === true ? /*#__PURE__*/_jsxDEV(UpdateQ, {\n              q: item.question,\n              qd: item.question_data,\n              qid: item.id,\n              qslug: item.slug,\n              clickeed: clicked.clicked4update\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 25\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"container\",\n                style: {\n                  width: \"50%\",\n                  \"marginTop\": \"5%\",\n                  \"textAlign\": \"center\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: item.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    color: \"#808080\"\n                  },\n                  children: item.question_date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 25\n                }, this), item.question !== undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(EditorToolbar, {\n                    className: \"Editor-1\",\n                    toolbarId: 't1'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 47,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n                    theme: \"bubble\",\n                    readOnly: true,\n                    value: item.question_data,\n                    modules: modules('t1'),\n                    formats: formats\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 48,\n                    columnNumber: 29\n                  }, this), \" \"]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), item.question !== undefined && item.user === JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-success\",\n                  onClick: () => setclicked({\n                    clicked4update: true\n                  }),\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 25\n                }, this) : \"\"]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 25\n              }, this)\n            }, void 0, false)]\n          }, void 0, true), \"   \"]\n        }, void 0, true);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        \"width\": \"50%\",\n        \"textAlign\": \"center\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        top: \"20\"\n      },\n      children: \"Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        \"alignItems\": 'center',\n        \"width\": \"50%\",\n        marginTop: \"\"\n      },\n      children: typeof ans[1] === \"undefined\" || ans[1].length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"btn\",\n          className: \"btn btn-success\",\n          onClick: () => setclicked({\n            answer: true\n          }),\n          children: \"Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), clicked.answer === true ? /*#__PURE__*/_jsxDEV(CreateAns, {\n          qid: ans[0].id.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 44\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No answer Yet. Please Create it here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 88\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        style: {\n          \"width\": \"50%\",\n          \"height\": \"50%\",\n          \"marginTop\": \"15rem\"\n        },\n        children: ans[1].map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: clicked.clicked4ansUp === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(UpdateAns, {\n                clik: true,\n                aid: item.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 54\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"shadow p-3 mb-5 bg-white rounded\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: item.answer\n                }, item.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Answered on : \", item.answered_date]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 17\n                }, this), item.user === JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  id: item.id,\n                  className: \"btn btn-primary\",\n                  onClick: () => setclicked({\n                    clicked4ansUp: true,\n                    upVal: item.id\n                  }),\n                  children: \"Update Answer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 109\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 16\n              }, this)\n            }, void 0, false)\n          }, void 0, false) //updating answer is getting much difficult as multiple answers are there and getting multiple answers id's  will be a\n          // boon. As it is sending all the ids to the component and it's difficult to set the id for updating\n          ;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QnA, \"QMHRYqd3/zrHcpEc+FTSkOIdoD8=\", false, function () {\n  return [useHistory];\n});\n\n_c = QnA;\nexport default QnA;\n{\n  /* https://medium.com/always-be-coding/four-steps-to-google-without-a-degree-8f381aa6bd5e */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"QnA\");","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/src/Component/QnA.js"],"names":["React","useEffect","useState","useHistory","Navbar","Error","ReactQuill","EditorToolbar","modules","formats","CreateAns","UpdateQ","UpdateAns","containerStyle","QnA","BaseUrl","history","question","setQuestion","ans","setans","clicked","setclicked","clicked4ans","clicked4update","answer","upVal","clicked4ansUp","getData","data","fetch","location","pathname","resdata","json","map","item","index","question_data","id","slug","width","color","question_date","undefined","user","JSON","parse","atob","localStorage","getItem","split","user_id","textAlign","top","marginTop","length","toString","answered_date"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport Navbar from './Navbar';\nimport Error from './Error';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport EditorToolbar, { modules, formats } from \"../EditorToolbar\";\nimport CreateAns from './CreateAns';\nimport UpdateQ from './UpdateQ';\nimport UpdateAns from './UpdateAns';\nconst containerStyle = {\"width\": \"50%\", \"height\": \"50%\", \"margin\": \"auto\", \"position\": \"absolute\",\n                        \"top\": '0',\"left\": '0', \"bottom\": '0', \"right\": '0'}\nconst QnA = () => {\n    const BaseUrl = `http://127.0.0.1:8000`\n    const history = useHistory();\n    const [question, setQuestion] = useState([])\n    const [ans, setans] = useState([])\n    const [clicked, setclicked] = useState({clicked4ans : false, clicked4update : false, answer : false, upVal : null, clicked4ansUp : false});\n    const getData = async () => {\n        const data = await fetch(`${BaseUrl}${history.location.pathname}`)\n        const resdata = await data.json()\n        setQuestion(resdata)\n        setans(resdata)\n    }\n    \n    useEffect(() => {\n        getData(); \n    }, [])\n    \n    \n    return (\n        <>\n        <Navbar/>\n        \n        <div>\n        {typeof question[0] === \"undefined\" ? <Error/> : \n            question.map((item, index)=> {\n                    return(<>\n                        \n                        <> {clicked.clicked4update === true ?\n                        <UpdateQ q={item.question} qd={item.question_data} qid={item.id} qslug={item.slug} clickeed={clicked.clicked4update}/> : \n                        <>\n                        <div className='container' style={{width : \"50%\",\"marginTop\" : \"5%\", \"textAlign\" : \"center\"}}  key={index}>\n                        <h4>{item.question}</h4>\n                        <p style={{color : \"#808080\"}}>{item.question_date}</p>\n                        {item.question !== undefined ? <>\n                            <EditorToolbar className='Editor-1' toolbarId={'t1'}/>\n                            <ReactQuill \n                            theme=\"bubble\"\n                            readOnly={true}\n                            value={item.question_data}\n                            modules={modules('t1')}\n                            formats={formats}/> </>:<></>} \n                        {item.question !== undefined && item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id)\n                        ? \n                        <button type='button' className='btn btn-success' onClick={()=> setclicked({clicked4update:true})}>Update</button> : \"\" }\n                        </div>\n                        </>\n                        }\n                        \n                        </>   </>\n                    \n                    )\n                })}\n           \n        </div> \n        <hr style={{\"width\" : \"50%\", \"textAlign\" : \"center\"}}/>\n        <h2 style={{textAlign : 'center', top:\"20\"}}>Answers</h2>\n        <div className='container' style={{\"alignItems\" : 'center', \"width\" : \"50%\", marginTop: \"\"}}>\n        \n            {typeof ans[1] === \"undefined\" || ans[1].length === 0 ? \n            <div className='container'>\n                <button type='btn' className='btn btn-success' onClick={() => setclicked({answer : true})} >Answer</button>\n                {clicked.answer === true ? <CreateAns qid={(ans[0].id).toString()}/> : <h3>No answer Yet. Please Create it here</h3>}\n            </div> :\n            <div className='container' style={{\"width\": \"50%\", \"height\": \"50%\", \"marginTop\" : \"15rem\"}}>\n            {ans[1].map((item, index) => {\n               return( <>\n                {clicked.clicked4ansUp === true ? <> <UpdateAns clik={true} aid={item.id}/>\n                </> : \n                <>\n               <div className='shadow p-3 mb-5 bg-white rounded' >\n                <p key={item.id}>{item.answer}</p>\n                <p>Answered on : {item.answered_date}</p>\n            {item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id) ? <button type='button' id={item.id} className='btn btn-primary' onClick={() => setclicked({clicked4ansUp : true, upVal: item.id})}>\n                    Update Answer\n                </button>: <></> }\n                </div>\n                </>\n            }                \n                </>\n\n                //updating answer is getting much difficult as multiple answers are there and getting multiple answers id's  will be a\n                // boon. As it is sending all the ids to the component and it's difficult to set the id for updating\n                \n                )\n                \n            })}\n        </div>}\n        </div>\n\n \n         </>    \n    )\n}\n\nexport default QnA\n\n\n\n{/* https://medium.com/always-be-coding/four-steps-to-google-without-a-degree-8f381aa6bd5e */}"]},"metadata":{},"sourceType":"module"}