{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module special-characters/ui/specialcharactersnavigationview\n */\nimport { Collection } from 'ckeditor5/src/utils';\nimport { Model, FormHeaderView, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\n/**\n * A class representing the navigation part of the special characters UI. It is responsible\n * for describing the feature and allowing the user to select a particular character group.\n *\n * @extends module:ui/formheader/formheaderview~FormHeaderView\n */\n\nexport default class SpecialCharactersNavigationView extends FormHeaderView {\n  /**\n   * Creates an instance of the {@link module:special-characters/ui/specialcharactersnavigationview~SpecialCharactersNavigationView}\n   * class.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   * @param {Iterable.<String>} groupNames The names of the character groups.\n   */\n  constructor(locale, groupNames) {\n    super(locale);\n    const t = locale.t;\n    this.set('class', 'ck-special-characters-navigation');\n    /**\n     * A dropdown that allows selecting a group of special characters to be displayed.\n     *\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n    this.groupDropdownView = this._createGroupDropdown(groupNames);\n    this.groupDropdownView.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n    /**\n     * @inheritDoc\n     */\n\n    this.label = t('Special characters');\n    /**\n     * @inheritDoc\n     */\n\n    this.children.add(this.groupDropdownView);\n  }\n  /**\n   * Returns the name of the character group currently selected in the {@link #groupDropdownView}.\n   *\n   * @type {String}\n   */\n\n\n  get currentGroupName() {\n    return this.groupDropdownView.value;\n  }\n  /**\n   * Returns a dropdown that allows selecting character groups.\n   *\n   * @private\n   * @param {Iterable.<String>} groupNames The names of the character groups.\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n\n\n  _createGroupDropdown(groupNames) {\n    const locale = this.locale;\n    const t = locale.t;\n    const dropdown = createDropdown(locale);\n\n    const groupDefinitions = this._getCharacterGroupListItemDefinitions(dropdown, groupNames);\n\n    dropdown.set('value', groupDefinitions.first.model.label);\n    dropdown.buttonView.bind('label').to(dropdown, 'value');\n    dropdown.buttonView.set({\n      isOn: false,\n      withText: true,\n      tooltip: t('Character categories'),\n      class: ['ck-dropdown__button_label-width_auto']\n    });\n    dropdown.on('execute', evt => {\n      dropdown.value = evt.source.label;\n    });\n    dropdown.delegate('execute').to(this);\n    addListToDropdown(dropdown, groupDefinitions);\n    return dropdown;\n  }\n  /**\n   * Returns list item definitions to be used in the character group dropdown\n   * representing specific character groups.\n   *\n   * @private\n   * @param {module:ui/dropdown/dropdownview~DropdownView} dropdown\n   * @param {Iterable.<String>} groupNames The names of the character groups.\n   * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>}\n   */\n\n\n  _getCharacterGroupListItemDefinitions(dropdown, groupNames) {\n    const groupDefs = new Collection();\n\n    for (const name of groupNames) {\n      const definition = {\n        type: 'button',\n        model: new Model({\n          label: name,\n          withText: true\n        })\n      };\n      definition.model.bind('isOn').to(dropdown, 'value', value => {\n        return value === definition.model.label;\n      });\n      groupDefs.add(definition);\n    }\n\n    return groupDefs;\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-special-characters/src/ui/specialcharactersnavigationview.js"],"names":["Collection","Model","FormHeaderView","createDropdown","addListToDropdown","SpecialCharactersNavigationView","constructor","locale","groupNames","t","set","groupDropdownView","_createGroupDropdown","panelPosition","uiLanguageDirection","label","children","add","currentGroupName","value","dropdown","groupDefinitions","_getCharacterGroupListItemDefinitions","first","model","buttonView","bind","to","isOn","withText","tooltip","class","on","evt","source","delegate","groupDefs","name","definition","type"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module special-characters/ui/specialcharactersnavigationview\n */\n\nimport { Collection } from 'ckeditor5/src/utils';\nimport { Model, FormHeaderView, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\n\n/**\n * A class representing the navigation part of the special characters UI. It is responsible\n * for describing the feature and allowing the user to select a particular character group.\n *\n * @extends module:ui/formheader/formheaderview~FormHeaderView\n */\nexport default class SpecialCharactersNavigationView extends FormHeaderView {\n\t/**\n\t * Creates an instance of the {@link module:special-characters/ui/specialcharactersnavigationview~SpecialCharactersNavigationView}\n\t * class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {Iterable.<String>} groupNames The names of the character groups.\n\t */\n\tconstructor( locale, groupNames ) {\n\t\tsuper( locale );\n\n\t\tconst t = locale.t;\n\n\t\tthis.set( 'class', 'ck-special-characters-navigation' );\n\n\t\t/**\n\t\t * A dropdown that allows selecting a group of special characters to be displayed.\n\t\t *\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.groupDropdownView = this._createGroupDropdown( groupNames );\n\t\tthis.groupDropdownView.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t */\n\t\tthis.label = t( 'Special characters' );\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t */\n\t\tthis.children.add( this.groupDropdownView );\n\t}\n\n\t/**\n\t * Returns the name of the character group currently selected in the {@link #groupDropdownView}.\n\t *\n\t * @type {String}\n\t */\n\tget currentGroupName() {\n\t\treturn this.groupDropdownView.value;\n\t}\n\n\t/**\n\t * Returns a dropdown that allows selecting character groups.\n\t *\n\t * @private\n\t * @param {Iterable.<String>} groupNames The names of the character groups.\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createGroupDropdown( groupNames ) {\n\t\tconst locale = this.locale;\n\t\tconst t = locale.t;\n\t\tconst dropdown = createDropdown( locale );\n\t\tconst groupDefinitions = this._getCharacterGroupListItemDefinitions( dropdown, groupNames );\n\n\t\tdropdown.set( 'value', groupDefinitions.first.model.label );\n\n\t\tdropdown.buttonView.bind( 'label' ).to( dropdown, 'value' );\n\n\t\tdropdown.buttonView.set( {\n\t\t\tisOn: false,\n\t\t\twithText: true,\n\t\t\ttooltip: t( 'Character categories' ),\n\t\t\tclass: [ 'ck-dropdown__button_label-width_auto' ]\n\t\t} );\n\n\t\tdropdown.on( 'execute', evt => {\n\t\t\tdropdown.value = evt.source.label;\n\t\t} );\n\n\t\tdropdown.delegate( 'execute' ).to( this );\n\n\t\taddListToDropdown( dropdown, groupDefinitions );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Returns list item definitions to be used in the character group dropdown\n\t * representing specific character groups.\n\t *\n\t * @private\n\t * @param {module:ui/dropdown/dropdownview~DropdownView} dropdown\n\t * @param {Iterable.<String>} groupNames The names of the character groups.\n\t * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>}\n\t */\n\t_getCharacterGroupListItemDefinitions( dropdown, groupNames ) {\n\t\tconst groupDefs = new Collection();\n\n\t\tfor ( const name of groupNames ) {\n\t\t\tconst definition = {\n\t\t\t\ttype: 'button',\n\t\t\t\tmodel: new Model( {\n\t\t\t\t\tlabel: name,\n\t\t\t\t\twithText: true\n\t\t\t\t} )\n\t\t\t};\n\n\t\t\tdefinition.model.bind( 'isOn' ).to( dropdown, 'value', value => {\n\t\t\t\treturn value === definition.model.label;\n\t\t\t} );\n\n\t\t\tgroupDefs.add( definition );\n\t\t}\n\n\t\treturn groupDefs;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}