{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/liststylecommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { getSiblingNodes } from './utils';\n/**\n * The list style command. It is used by the {@link module:list/liststyle~ListStyle list style feature}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ListStyleCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {String} defaultType The list type that will be used by default if the value was not specified during\n   * the command execution.\n   */\n  constructor(editor, defaultType) {\n    super(editor);\n    /**\n     * The default type of the list style.\n     *\n     * @protected\n     * @member {String}\n     */\n\n    this._defaultType = defaultType;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    this.value = this._getValue();\n    this.isEnabled = this._checkEnabled();\n  }\n  /**\n   * Executes the command.\n   *\n   * @param {Object} options\n   * @param {String|null} options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n   * style will be applied.\n   * @protected\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const model = this.editor.model;\n    const document = model.document; // For all selected blocks find all list items that are being selected\n    // and update the `listStyle` attribute in those lists.\n\n    let listItems = [...document.selection.getSelectedBlocks()].filter(element => element.is('element', 'listItem')).map(element => {\n      const position = model.change(writer => writer.createPositionAt(element, 0));\n      return [...getSiblingNodes(position, 'backward'), ...getSiblingNodes(position, 'forward')];\n    }).flat(); // Since `getSelectedBlocks()` can return items that belong to the same list, and\n    // `getSiblingNodes()` returns the entire list, we need to remove duplicated items.\n\n    listItems = [...new Set(listItems)];\n\n    if (!listItems.length) {\n      return;\n    }\n\n    model.change(writer => {\n      for (const item of listItems) {\n        writer.setAttribute('listStyle', options.type || this._defaultType, item);\n      }\n    });\n  }\n  /**\n   * Checks the command's {@link #value}.\n   *\n   * @private\n   * @returns {String|null} The current value.\n   */\n\n\n  _getValue() {\n    const listItem = this.editor.model.document.selection.getFirstPosition().parent;\n\n    if (listItem && listItem.is('element', 'listItem')) {\n      return listItem.getAttribute('listStyle');\n    }\n\n    return null;\n  }\n  /**\n   * Checks whether the command can be enabled in the current context.\n   *\n   * @private\n   * @returns {Boolean} Whether the command should be enabled.\n   */\n\n\n  _checkEnabled() {\n    const editor = this.editor;\n    const numberedList = editor.commands.get('numberedList');\n    const bulletedList = editor.commands.get('bulletedList');\n    return numberedList.isEnabled || bulletedList.isEnabled;\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-list/src/liststylecommand.js"],"names":["Command","getSiblingNodes","ListStyleCommand","constructor","editor","defaultType","_defaultType","refresh","value","_getValue","isEnabled","_checkEnabled","execute","options","model","document","listItems","selection","getSelectedBlocks","filter","element","is","map","position","change","writer","createPositionAt","flat","Set","length","item","setAttribute","type","listItem","getFirstPosition","parent","getAttribute","numberedList","commands","get","bulletedList"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BF,OAA/B,CAAuC;AACrD;AACD;AACA;AACA;AACA;AACA;AACA;AACCG,EAAAA,WAAW,CAAEC,MAAF,EAAUC,WAAV,EAAwB;AAClC,UAAOD,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKE,YAAL,GAAoBD,WAApB;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,OAAO,GAAG;AACT,SAAKC,KAAL,GAAa,KAAKC,SAAL,EAAb;AACA,SAAKC,SAAL,GAAiB,KAAKC,aAAL,EAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,GAAiB;AAAA,QAAfC,OAAe,uEAAL,EAAK;AACvB,UAAMC,KAAK,GAAG,KAAKV,MAAL,CAAYU,KAA1B;AACA,UAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB,CAFuB,CAIvB;AACA;;AACA,QAAIC,SAAS,GAAG,CAAE,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,iBAAnB,EAAL,EACdC,MADc,CACNC,OAAO,IAAIA,OAAO,CAACC,EAAR,CAAY,SAAZ,EAAuB,UAAvB,CADL,EAEdC,GAFc,CAETF,OAAO,IAAI;AAChB,YAAMG,QAAQ,GAAGT,KAAK,CAACU,MAAN,CAAcC,MAAM,IAAIA,MAAM,CAACC,gBAAP,CAAyBN,OAAzB,EAAkC,CAAlC,CAAxB,CAAjB;AAEA,aAAO,CACN,GAAGnB,eAAe,CAAEsB,QAAF,EAAY,UAAZ,CADZ,EAEN,GAAGtB,eAAe,CAAEsB,QAAF,EAAY,SAAZ,CAFZ,CAAP;AAIA,KATc,EAUdI,IAVc,EAAhB,CANuB,CAkBvB;AACA;;AACAX,IAAAA,SAAS,GAAG,CAAE,GAAG,IAAIY,GAAJ,CAASZ,SAAT,CAAL,CAAZ;;AAEA,QAAK,CAACA,SAAS,CAACa,MAAhB,EAAyB;AACxB;AACA;;AAEDf,IAAAA,KAAK,CAACU,MAAN,CAAcC,MAAM,IAAI;AACvB,WAAM,MAAMK,IAAZ,IAAoBd,SAApB,EAAgC;AAC/BS,QAAAA,MAAM,CAACM,YAAP,CAAqB,WAArB,EAAkClB,OAAO,CAACmB,IAAR,IAAgB,KAAK1B,YAAvD,EAAqEwB,IAArE;AACA;AACD,KAJD;AAKA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCrB,EAAAA,SAAS,GAAG;AACX,UAAMwB,QAAQ,GAAG,KAAK7B,MAAL,CAAYU,KAAZ,CAAkBC,QAAlB,CAA2BE,SAA3B,CAAqCiB,gBAArC,GAAwDC,MAAzE;;AAEA,QAAKF,QAAQ,IAAIA,QAAQ,CAACZ,EAAT,CAAa,SAAb,EAAwB,UAAxB,CAAjB,EAAwD;AACvD,aAAOY,QAAQ,CAACG,YAAT,CAAuB,WAAvB,CAAP;AACA;;AAED,WAAO,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCzB,EAAAA,aAAa,GAAG;AACf,UAAMP,MAAM,GAAG,KAAKA,MAApB;AAEA,UAAMiC,YAAY,GAAGjC,MAAM,CAACkC,QAAP,CAAgBC,GAAhB,CAAqB,cAArB,CAArB;AACA,UAAMC,YAAY,GAAGpC,MAAM,CAACkC,QAAP,CAAgBC,GAAhB,CAAqB,cAArB,CAArB;AAEA,WAAOF,YAAY,CAAC3B,SAAb,IAA0B8B,YAAY,CAAC9B,SAA9C;AACA;;AAlGoD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/liststylecommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { getSiblingNodes } from './utils';\n\n/**\n * The list style command. It is used by the {@link module:list/liststyle~ListStyle list style feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class ListStyleCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {String} defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t */\n\tconstructor( editor, defaultType ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The default type of the list style.\n\t\t *\n\t\t * @protected\n\t\t * @member {String}\n\t\t */\n\t\tthis._defaultType = defaultType;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @param {Object} options\n\t * @param {String|null} options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t * @protected\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// For all selected blocks find all list items that are being selected\n\t\t// and update the `listStyle` attribute in those lists.\n\t\tlet listItems = [ ...document.selection.getSelectedBlocks() ]\n\t\t\t.filter( element => element.is( 'element', 'listItem' ) )\n\t\t\t.map( element => {\n\t\t\t\tconst position = model.change( writer => writer.createPositionAt( element, 0 ) );\n\n\t\t\t\treturn [\n\t\t\t\t\t...getSiblingNodes( position, 'backward' ),\n\t\t\t\t\t...getSiblingNodes( position, 'forward' )\n\t\t\t\t];\n\t\t\t} )\n\t\t\t.flat();\n\n\t\t// Since `getSelectedBlocks()` can return items that belong to the same list, and\n\t\t// `getSiblingNodes()` returns the entire list, we need to remove duplicated items.\n\t\tlistItems = [ ...new Set( listItems ) ];\n\n\t\tif ( !listItems.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of listItems ) {\n\t\t\t\twriter.setAttribute( 'listStyle', options.type || this._defaultType, item );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {String|null} The current value.\n\t */\n\t_getValue() {\n\t\tconst listItem = this.editor.model.document.selection.getFirstPosition().parent;\n\n\t\tif ( listItem && listItem.is( 'element', 'listItem' ) ) {\n\t\t\treturn listItem.getAttribute( 'listStyle' );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\tconst editor = this.editor;\n\n\t\tconst numberedList = editor.commands.get( 'numberedList' );\n\t\tconst bulletedList = editor.commands.get( 'bulletedList' );\n\n\t\treturn numberedList.isEnabled || bulletedList.isEnabled;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}