{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/findandreplaceui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { createDropdown } from 'ckeditor5/src/ui';\nimport FindAndReplaceFormView from './ui/findandreplaceformview';\nimport loupeIcon from '../theme/icons/find-replace.svg';\n/**\n * The default find and replace UI.\n *\n * It registers the `'findAndReplace'` UI button in the editor's {@link module:ui/componentfactory~ComponentFactory component factory}.\n * that uses the {@link module:find-and-replace/findandreplace~FindAndReplace FindAndReplace} plugin API.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FindAndReplaceUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FindAndReplaceUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * A reference to the find and replace form view.\n     *\n     * @member {module:find-and-replace/ui/findandreplaceformview~FindAndReplaceFormView} #formView\n     */\n\n    this.formView = null;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Register the toolbar dropdown component.\n\n    editor.ui.componentFactory.add('findAndReplace', locale => {\n      const dropdown = createDropdown(locale);\n      const formView = this.formView = new FindAndReplaceFormView(editor.locale); // Dropdown should be disabled when in source editing mode. See #10001.\n\n      dropdown.bind('isEnabled').to(editor.commands.get('find'));\n      dropdown.panelView.children.add(formView); // Every time a dropdown is opened, the search text field should get focused and selected for better UX.\n      // Note: Using the low priority here to make sure the following listener starts working after\n      // the default action of the drop-down is executed (i.e. the panel showed up). Otherwise,\n      // the invisible form/input cannot be focused/selected.\n      //\n      // Each time a dropdown is closed, move the focus back to the find and replace toolbar button\n      // and let the find and replace editing feature know that all search results can be invalidated\n      // and no longer should be marked in the content.\n\n      dropdown.on('change:isOpen', (event, name, isOpen) => {\n        if (isOpen) {\n          formView.disableCssTransitions();\n          formView.reset();\n\n          formView._findInputView.fieldView.select();\n\n          formView.focus();\n          formView.enableCssTransitions();\n        } else {\n          formView.focus();\n          this.fire('searchReseted');\n        }\n      }, {\n        priority: 'low'\n      });\n\n      this._setupDropdownButton(dropdown);\n\n      this._setupFormView(formView);\n\n      return dropdown;\n    });\n  }\n  /**\n   * Sets up the find and replace button.\n   *\n   * @private\n   * @param {module:ui/dropdown/dropdownview~DropdownView} dropdown\n   */\n\n\n  _setupDropdownButton(dropdown) {\n    const editor = this.editor;\n    const t = editor.locale.t;\n    dropdown.buttonView.set({\n      icon: loupeIcon,\n      label: t('Find and replace'),\n      keystroke: 'CTRL+F',\n      tooltip: true\n    });\n    editor.keystrokes.set('Ctrl+F', (data, cancelEvent) => {\n      dropdown.isOpen = true;\n      cancelEvent();\n    });\n  }\n  /**\n   * Sets up the form view for the find and replace.\n   *\n   * @private\n   * @param {module:find-and-replace/ui/findandreplaceformview~FindAndReplaceFormView} formView A related form view.\n   */\n\n\n  _setupFormView(formView) {\n    const editor = this.editor;\n    const commands = editor.commands;\n    const findAndReplaceEditing = this.editor.plugins.get('FindAndReplaceEditing');\n    const editingState = findAndReplaceEditing.state;\n    const sortMapping = {\n      before: -1,\n      same: 0,\n      after: 1\n    }; // Let the form know which result is being highlighted.\n\n    formView.bind('highlightOffset').to(editingState, 'highlightedResult', highlightedResult => {\n      if (!highlightedResult) {\n        return 0;\n      }\n\n      return Array.from(editingState.results).sort((a, b) => sortMapping[a.marker.getStart().compareWith(b.marker.getStart())]).indexOf(highlightedResult) + 1;\n    }); // Let the form know how many results were found in total.\n\n    formView.listenTo(editingState.results, 'change', () => {\n      formView.matchCount = editingState.results.length;\n    }); // Command states are used to enable/disable individual form controls.\n    // To keep things simple, instead of binding 4 individual observables, there's only one that combines every\n    // commands' isEnabled state. Yes, it will change more often but this simplifies the structure of the form.\n\n    formView.bind('_areCommandsEnabled').to(commands.get('findNext'), 'isEnabled', commands.get('findPrevious'), 'isEnabled', commands.get('replace'), 'isEnabled', commands.get('replaceAll'), 'isEnabled', (findNext, findPrevious, replace, replaceAll) => ({\n      findNext,\n      findPrevious,\n      replace,\n      replaceAll\n    })); // The UI plugin works as an interface between the form and the editing part of the feature.\n\n    formView.delegate('findNext', 'findPrevious', 'replace', 'replaceAll').to(this); // Let the feature know that search results are no longer relevant because the user changed the searched phrase\n    // (or options) but didn't hit the \"Find\" button yet (e.g. still typing).\n\n    formView.on('change:isDirty', (evt, data, isDirty) => {\n      if (isDirty) {\n        this.fire('searchReseted');\n      }\n    });\n  }\n\n}\n/**\n * Fired when the find next button is triggered.\n *\n * @event findNext\n * @param {String} searchText Search text.\n */\n\n/**\n * Fired when the find previous button is triggered.\n *\n * @event findPrevious\n * @param {String} searchText Search text.\n */\n\n/**\n * Fired when the replace button is triggered.\n *\n * @event replace\n * @param {String} replaceText Replacement text.\n */\n\n/**\n * Fired when the replaceAll button is triggered.\n *\n * @event replaceAll\n * @param {String} replaceText Replacement text.\n */\n\n/**\n * Fired when the UI was reset and the search results marked in the editing root should be invalidated,\n * for instance, because the user changed the searched phrase (or options) but didn't hit\n * the \"Find\" button yet.\n *\n * @event searchReseted\n */","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-find-and-replace/src/findandreplaceui.js"],"names":["Plugin","createDropdown","FindAndReplaceFormView","loupeIcon","FindAndReplaceUI","pluginName","constructor","editor","formView","init","ui","componentFactory","add","locale","dropdown","bind","to","commands","get","panelView","children","on","event","name","isOpen","disableCssTransitions","reset","_findInputView","fieldView","select","focus","enableCssTransitions","fire","priority","_setupDropdownButton","_setupFormView","t","buttonView","set","icon","label","keystroke","tooltip","keystrokes","data","cancelEvent","findAndReplaceEditing","plugins","editingState","state","sortMapping","before","same","after","highlightedResult","Array","from","results","sort","a","b","marker","getStart","compareWith","indexOf","listenTo","matchCount","length","findNext","findPrevious","replace","replaceAll","delegate","evt","isDirty"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/findandreplaceui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { createDropdown } from 'ckeditor5/src/ui';\nimport FindAndReplaceFormView from './ui/findandreplaceformview';\n\nimport loupeIcon from '../theme/icons/find-replace.svg';\n\n/**\n * The default find and replace UI.\n *\n * It registers the `'findAndReplace'` UI button in the editor's {@link module:ui/componentfactory~ComponentFactory component factory}.\n * that uses the {@link module:find-and-replace/findandreplace~FindAndReplace FindAndReplace} plugin API.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FindAndReplaceUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FindAndReplaceUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A reference to the find and replace form view.\n\t\t *\n\t\t * @member {module:find-and-replace/ui/findandreplaceformview~FindAndReplaceFormView} #formView\n\t\t */\n\t\tthis.formView = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Register the toolbar dropdown component.\n\t\teditor.ui.componentFactory.add( 'findAndReplace', locale => {\n\t\t\tconst dropdown = createDropdown( locale );\n\t\t\tconst formView = this.formView = new FindAndReplaceFormView( editor.locale );\n\n\t\t\t// Dropdown should be disabled when in source editing mode. See #10001.\n\t\t\tdropdown.bind( 'isEnabled' ).to( editor.commands.get( 'find' ) );\n\t\t\tdropdown.panelView.children.add( formView );\n\n\t\t\t// Every time a dropdown is opened, the search text field should get focused and selected for better UX.\n\t\t\t// Note: Using the low priority here to make sure the following listener starts working after\n\t\t\t// the default action of the drop-down is executed (i.e. the panel showed up). Otherwise,\n\t\t\t// the invisible form/input cannot be focused/selected.\n\t\t\t//\n\t\t\t// Each time a dropdown is closed, move the focus back to the find and replace toolbar button\n\t\t\t// and let the find and replace editing feature know that all search results can be invalidated\n\t\t\t// and no longer should be marked in the content.\n\t\t\tdropdown.on( 'change:isOpen', ( event, name, isOpen ) => {\n\t\t\t\tif ( isOpen ) {\n\t\t\t\t\tformView.disableCssTransitions();\n\n\t\t\t\t\tformView.reset();\n\t\t\t\t\tformView._findInputView.fieldView.select();\n\t\t\t\t\tformView.focus();\n\n\t\t\t\t\tformView.enableCssTransitions();\n\t\t\t\t} else {\n\t\t\t\t\tformView.focus();\n\n\t\t\t\t\tthis.fire( 'searchReseted' );\n\t\t\t\t}\n\t\t\t}, { priority: 'low' } );\n\n\t\t\tthis._setupDropdownButton( dropdown );\n\t\t\tthis._setupFormView( formView );\n\n\t\t\treturn dropdown;\n\t\t} );\n\t}\n\n\t/**\n\t * Sets up the find and replace button.\n\t *\n\t * @private\n\t * @param {module:ui/dropdown/dropdownview~DropdownView} dropdown\n\t */\n\t_setupDropdownButton( dropdown ) {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.locale.t;\n\n\t\tdropdown.buttonView.set( {\n\t\t\ticon: loupeIcon,\n\t\t\tlabel: t( 'Find and replace' ),\n\t\t\tkeystroke: 'CTRL+F',\n\t\t\ttooltip: true\n\t\t} );\n\n\t\teditor.keystrokes.set( 'Ctrl+F', ( data, cancelEvent ) => {\n\t\t\tdropdown.isOpen = true;\n\t\t\tcancelEvent();\n\t\t} );\n\t}\n\n\t/**\n\t * Sets up the form view for the find and replace.\n\t *\n\t * @private\n\t * @param {module:find-and-replace/ui/findandreplaceformview~FindAndReplaceFormView} formView A related form view.\n\t */\n\t_setupFormView( formView ) {\n\t\tconst editor = this.editor;\n\t\tconst commands = editor.commands;\n\t\tconst findAndReplaceEditing = this.editor.plugins.get( 'FindAndReplaceEditing' );\n\t\tconst editingState = findAndReplaceEditing.state;\n\t\tconst sortMapping = { before: -1, same: 0, after: 1 };\n\n\t\t// Let the form know which result is being highlighted.\n\t\tformView.bind( 'highlightOffset' ).to( editingState, 'highlightedResult', highlightedResult => {\n\t\t\tif ( !highlightedResult ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\treturn Array.from( editingState.results )\n\t\t\t\t.sort( ( a, b ) => sortMapping[ a.marker.getStart().compareWith( b.marker.getStart() ) ] )\n\t\t\t\t.indexOf( highlightedResult ) + 1;\n\t\t} );\n\n\t\t// Let the form know how many results were found in total.\n\t\tformView.listenTo( editingState.results, 'change', () => {\n\t\t\tformView.matchCount = editingState.results.length;\n\t\t} );\n\n\t\t// Command states are used to enable/disable individual form controls.\n\t\t// To keep things simple, instead of binding 4 individual observables, there's only one that combines every\n\t\t// commands' isEnabled state. Yes, it will change more often but this simplifies the structure of the form.\n\t\tformView.bind( '_areCommandsEnabled' ).to(\n\t\t\tcommands.get( 'findNext' ), 'isEnabled',\n\t\t\tcommands.get( 'findPrevious' ), 'isEnabled',\n\t\t\tcommands.get( 'replace' ), 'isEnabled',\n\t\t\tcommands.get( 'replaceAll' ), 'isEnabled',\n\t\t\t( findNext, findPrevious, replace, replaceAll ) => ( { findNext, findPrevious, replace, replaceAll } )\n\t\t);\n\n\t\t// The UI plugin works as an interface between the form and the editing part of the feature.\n\t\tformView.delegate( 'findNext', 'findPrevious', 'replace', 'replaceAll' ).to( this );\n\n\t\t// Let the feature know that search results are no longer relevant because the user changed the searched phrase\n\t\t// (or options) but didn't hit the \"Find\" button yet (e.g. still typing).\n\t\tformView.on( 'change:isDirty', ( evt, data, isDirty ) => {\n\t\t\tif ( isDirty ) {\n\t\t\t\tthis.fire( 'searchReseted' );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Fired when the find next button is triggered.\n *\n * @event findNext\n * @param {String} searchText Search text.\n */\n\n/**\n * Fired when the find previous button is triggered.\n *\n * @event findPrevious\n * @param {String} searchText Search text.\n */\n\n/**\n * Fired when the replace button is triggered.\n *\n * @event replace\n * @param {String} replaceText Replacement text.\n */\n\n/**\n * Fired when the replaceAll button is triggered.\n *\n * @event replaceAll\n * @param {String} replaceText Replacement text.\n */\n\n/**\n * Fired when the UI was reset and the search results marked in the editing root should be invalidated,\n * for instance, because the user changed the searched phrase (or options) but didn't hit\n * the \"Find\" button yet.\n *\n * @event searchReseted\n */\n"]},"metadata":{},"sourceType":"module"}