{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module horizontal-line/horizontallinecommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { findOptimalInsertionRange } from 'ckeditor5/src/widget';\n/**\n * The horizontal line command.\n *\n * The command is registered by {@link module:horizontal-line/horizontallineediting~HorizontalLineEditing} as `'horizontalLine'`.\n *\n * To insert a horizontal line at the current selection, execute the command:\n *\n *\t\teditor.execute( 'horizontalLine' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class HorizontalLineCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const selection = model.document.selection;\n    this.isEnabled = isHorizontalLineAllowedInParent(selection, schema, model);\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    model.change(writer => {\n      const horizontalElement = writer.createElement('horizontalLine');\n      model.insertContent(horizontalElement);\n      let nextElement = horizontalElement.nextSibling; // Check whether an element next to the inserted horizontal line is defined and can contain a text.\n\n      const canSetSelection = nextElement && model.schema.checkChild(nextElement, '$text'); // If the element is missing, but a paragraph could be inserted next to the horizontal line, let's add it.\n\n      if (!canSetSelection && model.schema.checkChild(horizontalElement.parent, 'paragraph')) {\n        nextElement = writer.createElement('paragraph');\n        model.insertContent(nextElement, writer.createPositionAfter(horizontalElement));\n      } // Put the selection inside the element, at the beginning.\n\n\n      if (nextElement) {\n        writer.setSelection(nextElement, 0);\n      }\n    });\n  }\n\n} // Checks if a horizontal line is allowed by the schema in the optimal insertion parent.\n//\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/model~Model} model Model instance.\n// @returns {Boolean}\n\nfunction isHorizontalLineAllowedInParent(selection, schema, model) {\n  const parent = getInsertHorizontalLineParent(selection, model);\n  return schema.checkChild(parent, 'horizontalLine');\n} // Returns a node that will be used to insert a horizontal line with `model.insertContent` to check if the horizontal line can be\n// placed there.\n//\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// @param {module:engine/model/model~Model} model Model instance.\n// @returns {module:engine/model/element~Element}\n\n\nfunction getInsertHorizontalLineParent(selection, model) {\n  const insertionRange = findOptimalInsertionRange(selection, model);\n  const parent = insertionRange.start.parent;\n\n  if (parent.isEmpty && !parent.is('element', '$root')) {\n    return parent.parent;\n  }\n\n  return parent;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-horizontal-line/src/horizontallinecommand.js"],"names":["Command","findOptimalInsertionRange","HorizontalLineCommand","refresh","model","editor","schema","selection","document","isEnabled","isHorizontalLineAllowedInParent","execute","change","writer","horizontalElement","createElement","insertContent","nextElement","nextSibling","canSetSelection","checkChild","parent","createPositionAfter","setSelection","getInsertHorizontalLineParent","insertionRange","start","isEmpty","is"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,yBAAT,QAA0C,sBAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,qBAAN,SAAoCF,OAApC,CAA4C;AAC1D;AACD;AACA;AACCG,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,UAAMC,SAAS,GAAGH,KAAK,CAACI,QAAN,CAAeD,SAAjC;AAEA,SAAKE,SAAL,GAAiBC,+BAA+B,CAAEH,SAAF,EAAaD,MAAb,EAAqBF,KAArB,CAAhD;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCO,EAAAA,OAAO,GAAG;AACT,UAAMP,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AAEAA,IAAAA,KAAK,CAACQ,MAAN,CAAcC,MAAM,IAAI;AACvB,YAAMC,iBAAiB,GAAGD,MAAM,CAACE,aAAP,CAAsB,gBAAtB,CAA1B;AAEAX,MAAAA,KAAK,CAACY,aAAN,CAAqBF,iBAArB;AAEA,UAAIG,WAAW,GAAGH,iBAAiB,CAACI,WAApC,CALuB,CAOvB;;AACA,YAAMC,eAAe,GAAGF,WAAW,IAAIb,KAAK,CAACE,MAAN,CAAac,UAAb,CAAyBH,WAAzB,EAAsC,OAAtC,CAAvC,CARuB,CAUvB;;AACA,UAAK,CAACE,eAAD,IAAoBf,KAAK,CAACE,MAAN,CAAac,UAAb,CAAyBN,iBAAiB,CAACO,MAA3C,EAAmD,WAAnD,CAAzB,EAA4F;AAC3FJ,QAAAA,WAAW,GAAGJ,MAAM,CAACE,aAAP,CAAsB,WAAtB,CAAd;AAEAX,QAAAA,KAAK,CAACY,aAAN,CAAqBC,WAArB,EAAkCJ,MAAM,CAACS,mBAAP,CAA4BR,iBAA5B,CAAlC;AACA,OAfsB,CAiBvB;;;AACA,UAAKG,WAAL,EAAmB;AAClBJ,QAAAA,MAAM,CAACU,YAAP,CAAqBN,WAArB,EAAkC,CAAlC;AACA;AACD,KArBD;AAsBA;;AA1CyD,C,CA6C3D;AACA;AACA;AACA;AACA;AACA;;AACA,SAASP,+BAAT,CAA0CH,SAA1C,EAAqDD,MAArD,EAA6DF,KAA7D,EAAqE;AACpE,QAAMiB,MAAM,GAAGG,6BAA6B,CAAEjB,SAAF,EAAaH,KAAb,CAA5C;AAEA,SAAOE,MAAM,CAACc,UAAP,CAAmBC,MAAnB,EAA2B,gBAA3B,CAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,6BAAT,CAAwCjB,SAAxC,EAAmDH,KAAnD,EAA2D;AAC1D,QAAMqB,cAAc,GAAGxB,yBAAyB,CAAEM,SAAF,EAAaH,KAAb,CAAhD;AACA,QAAMiB,MAAM,GAAGI,cAAc,CAACC,KAAf,CAAqBL,MAApC;;AAEA,MAAKA,MAAM,CAACM,OAAP,IAAkB,CAACN,MAAM,CAACO,EAAP,CAAW,SAAX,EAAsB,OAAtB,CAAxB,EAA0D;AACzD,WAAOP,MAAM,CAACA,MAAd;AACA;;AAED,SAAOA,MAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module horizontal-line/horizontallinecommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { findOptimalInsertionRange } from 'ckeditor5/src/widget';\n\n/**\n * The horizontal line command.\n *\n * The command is registered by {@link module:horizontal-line/horizontallineediting~HorizontalLineEditing} as `'horizontalLine'`.\n *\n * To insert a horizontal line at the current selection, execute the command:\n *\n *\t\teditor.execute( 'horizontalLine' );\n *\n * @extends module:core/command~Command\n */\nexport default class HorizontalLineCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tthis.isEnabled = isHorizontalLineAllowedInParent( selection, schema, model );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\n\t\tmodel.change( writer => {\n\t\t\tconst horizontalElement = writer.createElement( 'horizontalLine' );\n\n\t\t\tmodel.insertContent( horizontalElement );\n\n\t\t\tlet nextElement = horizontalElement.nextSibling;\n\n\t\t\t// Check whether an element next to the inserted horizontal line is defined and can contain a text.\n\t\t\tconst canSetSelection = nextElement && model.schema.checkChild( nextElement, '$text' );\n\n\t\t\t// If the element is missing, but a paragraph could be inserted next to the horizontal line, let's add it.\n\t\t\tif ( !canSetSelection && model.schema.checkChild( horizontalElement.parent, 'paragraph' ) ) {\n\t\t\t\tnextElement = writer.createElement( 'paragraph' );\n\n\t\t\t\tmodel.insertContent( nextElement, writer.createPositionAfter( horizontalElement ) );\n\t\t\t}\n\n\t\t\t// Put the selection inside the element, at the beginning.\n\t\t\tif ( nextElement ) {\n\t\t\t\twriter.setSelection( nextElement, 0 );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks if a horizontal line is allowed by the schema in the optimal insertion parent.\n//\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/model~Model} model Model instance.\n// @returns {Boolean}\nfunction isHorizontalLineAllowedInParent( selection, schema, model ) {\n\tconst parent = getInsertHorizontalLineParent( selection, model );\n\n\treturn schema.checkChild( parent, 'horizontalLine' );\n}\n\n// Returns a node that will be used to insert a horizontal line with `model.insertContent` to check if the horizontal line can be\n// placed there.\n//\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// @param {module:engine/model/model~Model} model Model instance.\n// @returns {module:engine/model/element~Element}\nfunction getInsertHorizontalLineParent( selection, model ) {\n\tconst insertionRange = findOptimalInsertionRange( selection, model );\n\tconst parent = insertionRange.start.parent;\n\n\tif ( parent.isEmpty && !parent.is( 'element', '$root' ) ) {\n\t\treturn parent.parent;\n\t}\n\n\treturn parent;\n}\n"]},"metadata":{},"sourceType":"module"}