{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/findcommand\n*/\nimport { Command } from 'ckeditor5/src/core';\nimport { updateFindResultFromRange, findByTextCallback } from './utils';\n/**\n * The find command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class FindCommand extends Command {\n  /**\n   * Creates a new `FindCommand` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n   * @param {module:find-and-replace/findandreplacestate~FindAndReplaceState} state An object to hold plugin state.\n   */\n  constructor(editor, state) {\n    super(editor); // The find command is always enabled.\n\n    this.isEnabled = true; // It does not affect data so should be enabled in read-only mode.\n\n    this.affectsData = false;\n    /**\n     * The find and replace state object used for command operations.\n     *\n     * @private\n     * @member {module:find-and-replace/findandreplacestate~FindAndReplaceState} #_state\n     */\n\n    this._state = state;\n  }\n  /**\n   * Executes the command.\n   *\n   * @param {Function|String} callbackOrText\n   * @param {Object} [options]\n   * @param {Boolean} [options.matchCase=false] If set to `true`, the letter case will be matched.\n   * @param {Boolean} [options.wholeWords=false] If set to `true`, only whole words that match `callbackOrText` will be matched.\n   *\n   * @fires execute\n   */\n\n\n  execute(callbackOrText) {\n    let {\n      matchCase,\n      wholeWords\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      editor\n    } = this;\n    const {\n      model\n    } = editor;\n    let findCallback; // Allow to execute `find()` on a plugin with a keyword only.\n\n    if (typeof callbackOrText === 'string') {\n      findCallback = findByTextCallback(callbackOrText, {\n        matchCase,\n        wholeWords\n      });\n      this._state.searchText = callbackOrText;\n    } else {\n      findCallback = callbackOrText;\n    } // Initial search is done on all nodes in all roots inside the content.\n\n\n    const results = model.document.getRootNames().reduce((currentResults, rootName) => updateFindResultFromRange(model.createRangeIn(model.document.getRoot(rootName)), model, findCallback, currentResults), null);\n\n    this._state.clear(model);\n\n    this._state.results.addMany(Array.from(results));\n\n    this._state.highlightedResult = results.get(0);\n\n    if (typeof callbackOrText === 'string') {\n      this._state.searchText = callbackOrText;\n    }\n\n    this._state.matchCase = !!matchCase;\n    this._state.matchWholeWords = !!wholeWords;\n    return {\n      results,\n      findCallback\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-find-and-replace/src/findcommand.js"],"names":["Command","updateFindResultFromRange","findByTextCallback","FindCommand","constructor","editor","state","isEnabled","affectsData","_state","execute","callbackOrText","matchCase","wholeWords","model","findCallback","searchText","results","document","getRootNames","reduce","currentResults","rootName","createRangeIn","getRoot","clear","addMany","Array","from","highlightedResult","get","matchWholeWords"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,yBAAT,EAAoCC,kBAApC,QAA8D,SAA9D;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,SAA0BH,OAA1B,CAAkC;AAChD;AACD;AACA;AACA;AACA;AACA;AACCI,EAAAA,WAAW,CAAEC,MAAF,EAAUC,KAAV,EAAkB;AAC5B,UAAOD,MAAP,EAD4B,CAG5B;;AACA,SAAKE,SAAL,GAAiB,IAAjB,CAJ4B,CAM5B;;AACA,SAAKC,WAAL,GAAmB,KAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,MAAL,GAAcH,KAAd;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,EAAAA,OAAO,CAAEC,cAAF,EAAmD;AAAA,QAAjC;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAiC,uEAAL,EAAK;AACzD,UAAM;AAAER,MAAAA;AAAF,QAAa,IAAnB;AACA,UAAM;AAAES,MAAAA;AAAF,QAAYT,MAAlB;AAEA,QAAIU,YAAJ,CAJyD,CAMzD;;AACA,QAAK,OAAOJ,cAAP,KAA0B,QAA/B,EAA0C;AACzCI,MAAAA,YAAY,GAAGb,kBAAkB,CAAES,cAAF,EAAkB;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,OAAlB,CAAjC;AAEA,WAAKJ,MAAL,CAAYO,UAAZ,GAAyBL,cAAzB;AACA,KAJD,MAIO;AACNI,MAAAA,YAAY,GAAGJ,cAAf;AACA,KAbwD,CAezD;;;AACA,UAAMM,OAAO,GAAGH,KAAK,CAACI,QAAN,CAAeC,YAAf,GACdC,MADc,CACJ,CAAEC,cAAF,EAAkBC,QAAlB,KAAgCrB,yBAAyB,CACnEa,KAAK,CAACS,aAAN,CAAqBT,KAAK,CAACI,QAAN,CAAeM,OAAf,CAAwBF,QAAxB,CAArB,CADmE,EAEnER,KAFmE,EAGnEC,YAHmE,EAInEM,cAJmE,CADrD,EAMV,IANU,CAAhB;;AAQA,SAAKZ,MAAL,CAAYgB,KAAZ,CAAmBX,KAAnB;;AACA,SAAKL,MAAL,CAAYQ,OAAZ,CAAoBS,OAApB,CAA6BC,KAAK,CAACC,IAAN,CAAYX,OAAZ,CAA7B;;AACA,SAAKR,MAAL,CAAYoB,iBAAZ,GAAgCZ,OAAO,CAACa,GAAR,CAAa,CAAb,CAAhC;;AAEA,QAAK,OAAOnB,cAAP,KAA0B,QAA/B,EAA0C;AACzC,WAAKF,MAAL,CAAYO,UAAZ,GAAyBL,cAAzB;AACA;;AAED,SAAKF,MAAL,CAAYG,SAAZ,GAAwB,CAAC,CAACA,SAA1B;AACA,SAAKH,MAAL,CAAYsB,eAAZ,GAA8B,CAAC,CAAClB,UAAhC;AAEA,WAAO;AACNI,MAAAA,OADM;AAENF,MAAAA;AAFM,KAAP;AAIA;;AA1E+C","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/findcommand\n*/\n\nimport { Command } from 'ckeditor5/src/core';\nimport { updateFindResultFromRange, findByTextCallback } from './utils';\n\n/**\n * The find command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class FindCommand extends Command {\n\t/**\n\t * Creates a new `FindCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {module:find-and-replace/findandreplacestate~FindAndReplaceState} state An object to hold plugin state.\n\t */\n\tconstructor( editor, state ) {\n\t\tsuper( editor );\n\n\t\t// The find command is always enabled.\n\t\tthis.isEnabled = true;\n\n\t\t// It does not affect data so should be enabled in read-only mode.\n\t\tthis.affectsData = false;\n\n\t\t/**\n\t\t * The find and replace state object used for command operations.\n\t\t *\n\t\t * @private\n\t\t * @member {module:find-and-replace/findandreplacestate~FindAndReplaceState} #_state\n\t\t */\n\t\tthis._state = state;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @param {Function|String} callbackOrText\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.matchCase=false] If set to `true`, the letter case will be matched.\n\t * @param {Boolean} [options.wholeWords=false] If set to `true`, only whole words that match `callbackOrText` will be matched.\n\t *\n\t * @fires execute\n\t */\n\texecute( callbackOrText, { matchCase, wholeWords } = {} ) {\n\t\tconst { editor } = this;\n\t\tconst { model } = editor;\n\n\t\tlet findCallback;\n\n\t\t// Allow to execute `find()` on a plugin with a keyword only.\n\t\tif ( typeof callbackOrText === 'string' ) {\n\t\t\tfindCallback = findByTextCallback( callbackOrText, { matchCase, wholeWords } );\n\n\t\t\tthis._state.searchText = callbackOrText;\n\t\t} else {\n\t\t\tfindCallback = callbackOrText;\n\t\t}\n\n\t\t// Initial search is done on all nodes in all roots inside the content.\n\t\tconst results = model.document.getRootNames()\n\t\t\t.reduce( ( ( currentResults, rootName ) => updateFindResultFromRange(\n\t\t\t\tmodel.createRangeIn( model.document.getRoot( rootName ) ),\n\t\t\t\tmodel,\n\t\t\t\tfindCallback,\n\t\t\t\tcurrentResults\n\t\t\t) ), null );\n\n\t\tthis._state.clear( model );\n\t\tthis._state.results.addMany( Array.from( results ) );\n\t\tthis._state.highlightedResult = results.get( 0 );\n\n\t\tif ( typeof callbackOrText === 'string' ) {\n\t\t\tthis._state.searchText = callbackOrText;\n\t\t}\n\n\t\tthis._state.matchCase = !!matchCase;\n\t\tthis._state.matchWholeWords = !!wholeWords;\n\n\t\treturn {\n\t\t\tresults,\n\t\t\tfindCallback\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}