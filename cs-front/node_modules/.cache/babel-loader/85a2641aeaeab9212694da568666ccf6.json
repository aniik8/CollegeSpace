{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indentblockcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n/**\n * The indent block command.\n *\n * The command is registered by the {@link module:indent/indentblock~IndentBlock} as `'indentBlock'` for indenting blocks and\n * `'outdentBlock'` for outdenting blocks.\n *\n * To increase block indentation at the current selection, execute the command:\n *\n *\t\teditor.execute( 'indentBlock' );\n *\n * To decrease block indentation at the current selection, execute the command:\n *\n *\t\teditor.execute( 'outdentBlock' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class IndentBlockCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {module:indent/indentblockcommand~IndentBehavior} indentBehavior\n   */\n  constructor(editor, indentBehavior) {\n    super(editor);\n    /**\n     * The command's indentation behavior.\n     *\n     * @type {module:indent/indentblockcommand~IndentBehavior}\n     * @private\n     */\n\n    this._indentBehavior = indentBehavior;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    // Check whether any of the position's ancestors is a list item.\n    const editor = this.editor;\n    const model = editor.model;\n    const block = first(model.document.selection.getSelectedBlocks());\n\n    if (!block || !model.schema.checkAttribute(block, 'blockIndent')) {\n      this.isEnabled = false;\n      return;\n    }\n\n    this.isEnabled = this._indentBehavior.checkEnabled(block.getAttribute('blockIndent'));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const blocksToChange = getBlocksToChange(model);\n    model.change(writer => {\n      for (const block of blocksToChange) {\n        const currentIndent = block.getAttribute('blockIndent');\n\n        const nextIndent = this._indentBehavior.getNextIndent(currentIndent);\n\n        if (nextIndent) {\n          writer.setAttribute('blockIndent', nextIndent, block);\n        } else {\n          writer.removeAttribute('blockIndent', block);\n        }\n      }\n    });\n  }\n\n} // Returns blocks from selection that should have blockIndent selection set.\n//\n// @param {module:engine/model/model~model} model A model.\n\nfunction getBlocksToChange(model) {\n  const selection = model.document.selection;\n  const schema = model.schema;\n  const blocksInSelection = Array.from(selection.getSelectedBlocks());\n  return blocksInSelection.filter(block => schema.checkAttribute(block, 'blockIndent'));\n}\n/**\n * Provides indentation behavior to {@link module:indent/indentblockcommand~IndentBlockCommand}.\n *\n * @interface module:indent/indentblockcommand~IndentBehavior\n */\n\n/**\n * Checks if the command should be enabled.\n *\n * @method #checkEnabled\n * @param {String} indentAttributeValue The current indent attribute value.\n * @returns {Boolean}\n */\n\n/**\n * Returns a new indent attribute value based on the current indent. This method returns `undefined` when the indentation should be removed.\n *\n * @method #getNextIndent\n * @param {String} indentAttributeValue The current indent attribute value.\n * @returns {String|undefined}\n */","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-indent/src/indentblockcommand.js"],"names":["Command","first","IndentBlockCommand","constructor","editor","indentBehavior","_indentBehavior","refresh","model","block","document","selection","getSelectedBlocks","schema","checkAttribute","isEnabled","checkEnabled","getAttribute","execute","blocksToChange","getBlocksToChange","change","writer","currentIndent","nextIndent","getNextIndent","setAttribute","removeAttribute","blocksInSelection","Array","from","filter"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCF,OAAjC,CAAyC;AACvD;AACD;AACA;AACA;AACA;AACA;AACCG,EAAAA,WAAW,CAAEC,MAAF,EAAUC,cAAV,EAA2B;AACrC,UAAOD,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKE,eAAL,GAAuBD,cAAvB;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,OAAO,GAAG;AACT;AACA,UAAMH,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMI,KAAK,GAAGJ,MAAM,CAACI,KAArB;AAEA,UAAMC,KAAK,GAAGR,KAAK,CAAEO,KAAK,CAACE,QAAN,CAAeC,SAAf,CAAyBC,iBAAzB,EAAF,CAAnB;;AAEA,QAAK,CAACH,KAAD,IAAU,CAACD,KAAK,CAACK,MAAN,CAAaC,cAAb,CAA6BL,KAA7B,EAAoC,aAApC,CAAhB,EAAsE;AACrE,WAAKM,SAAL,GAAiB,KAAjB;AAEA;AACA;;AAED,SAAKA,SAAL,GAAiB,KAAKT,eAAL,CAAqBU,YAArB,CAAmCP,KAAK,CAACQ,YAAN,CAAoB,aAApB,CAAnC,CAAjB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMV,KAAK,GAAG,KAAKJ,MAAL,CAAYI,KAA1B;AAEA,UAAMW,cAAc,GAAGC,iBAAiB,CAAEZ,KAAF,CAAxC;AAEAA,IAAAA,KAAK,CAACa,MAAN,CAAcC,MAAM,IAAI;AACvB,WAAM,MAAMb,KAAZ,IAAqBU,cAArB,EAAsC;AACrC,cAAMI,aAAa,GAAGd,KAAK,CAACQ,YAAN,CAAoB,aAApB,CAAtB;;AAEA,cAAMO,UAAU,GAAG,KAAKlB,eAAL,CAAqBmB,aAArB,CAAoCF,aAApC,CAAnB;;AAEA,YAAKC,UAAL,EAAkB;AACjBF,UAAAA,MAAM,CAACI,YAAP,CAAqB,aAArB,EAAoCF,UAApC,EAAgDf,KAAhD;AACA,SAFD,MAEO;AACNa,UAAAA,MAAM,CAACK,eAAP,CAAwB,aAAxB,EAAuClB,KAAvC;AACA;AACD;AACD,KAZD;AAaA;;AA3DsD,C,CA8DxD;AACA;AACA;;AACA,SAASW,iBAAT,CAA4BZ,KAA5B,EAAoC;AACnC,QAAMG,SAAS,GAAGH,KAAK,CAACE,QAAN,CAAeC,SAAjC;AACA,QAAME,MAAM,GAAGL,KAAK,CAACK,MAArB;AACA,QAAMe,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAYnB,SAAS,CAACC,iBAAV,EAAZ,CAA1B;AAEA,SAAOgB,iBAAiB,CAACG,MAAlB,CAA0BtB,KAAK,IAAII,MAAM,CAACC,cAAP,CAAuBL,KAAvB,EAA8B,aAA9B,CAAnC,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indentblockcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n\n/**\n * The indent block command.\n *\n * The command is registered by the {@link module:indent/indentblock~IndentBlock} as `'indentBlock'` for indenting blocks and\n * `'outdentBlock'` for outdenting blocks.\n *\n * To increase block indentation at the current selection, execute the command:\n *\n *\t\teditor.execute( 'indentBlock' );\n *\n * To decrease block indentation at the current selection, execute the command:\n *\n *\t\teditor.execute( 'outdentBlock' );\n *\n * @extends module:core/command~Command\n */\nexport default class IndentBlockCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:indent/indentblockcommand~IndentBehavior} indentBehavior\n\t */\n\tconstructor( editor, indentBehavior ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The command's indentation behavior.\n\t\t *\n\t\t * @type {module:indent/indentblockcommand~IndentBehavior}\n\t\t * @private\n\t\t */\n\t\tthis._indentBehavior = indentBehavior;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\t// Check whether any of the position's ancestors is a list item.\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tconst block = first( model.document.selection.getSelectedBlocks() );\n\n\t\tif ( !block || !model.schema.checkAttribute( block, 'blockIndent' ) ) {\n\t\t\tthis.isEnabled = false;\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isEnabled = this._indentBehavior.checkEnabled( block.getAttribute( 'blockIndent' ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\n\t\tconst blocksToChange = getBlocksToChange( model );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const block of blocksToChange ) {\n\t\t\t\tconst currentIndent = block.getAttribute( 'blockIndent' );\n\n\t\t\t\tconst nextIndent = this._indentBehavior.getNextIndent( currentIndent );\n\n\t\t\t\tif ( nextIndent ) {\n\t\t\t\t\twriter.setAttribute( 'blockIndent', nextIndent, block );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'blockIndent', block );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Returns blocks from selection that should have blockIndent selection set.\n//\n// @param {module:engine/model/model~model} model A model.\nfunction getBlocksToChange( model ) {\n\tconst selection = model.document.selection;\n\tconst schema = model.schema;\n\tconst blocksInSelection = Array.from( selection.getSelectedBlocks() );\n\n\treturn blocksInSelection.filter( block => schema.checkAttribute( block, 'blockIndent' ) );\n}\n\n/**\n * Provides indentation behavior to {@link module:indent/indentblockcommand~IndentBlockCommand}.\n *\n * @interface module:indent/indentblockcommand~IndentBehavior\n */\n\n/**\n * Checks if the command should be enabled.\n *\n * @method #checkEnabled\n * @param {String} indentAttributeValue The current indent attribute value.\n * @returns {Boolean}\n */\n\n/**\n * Returns a new indent attribute value based on the current indent. This method returns `undefined` when the indentation should be removed.\n *\n * @method #getNextIndent\n * @param {String} indentAttributeValue The current indent attribute value.\n * @returns {String|undefined}\n */\n"]},"metadata":{},"sourceType":"module"}