{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport upcastTable, { ensureParagraphInTableCell, skipEmptyTableRow, upcastTableFigure } from './converters/upcasttable';\nimport { convertParagraphInTableCell, downcastInsertCell, downcastInsertRow, downcastInsertTable, downcastRemoveRow, downcastTableHeadingColumnsChange } from './converters/downcast';\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport MergeCellsCommand from './commands/mergecellscommand';\nimport SelectRowCommand from './commands/selectrowcommand';\nimport SelectColumnCommand from './commands/selectcolumncommand';\nimport TableUtils from '../src/tableutils';\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellParagraphPostFixer from './converters/table-cell-paragraph-post-fixer';\nimport injectTableCellRefreshPostFixer from './converters/table-cell-refresh-post-fixer';\nimport injectTableHeadingRowsRefreshPostFixer from './converters/table-heading-rows-refresh-post-fixer';\nimport '../theme/tableediting.css';\n/**\n * The table editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TableEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TableEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const model = editor.model;\n    const schema = model.schema;\n    const conversion = editor.conversion;\n    schema.register('table', {\n      allowWhere: '$block',\n      allowAttributes: ['headingRows', 'headingColumns'],\n      isObject: true,\n      isBlock: true\n    });\n    schema.register('tableRow', {\n      allowIn: 'table',\n      isLimit: true\n    });\n    schema.register('tableCell', {\n      allowIn: 'tableRow',\n      allowChildren: '$block',\n      allowAttributes: ['colspan', 'rowspan'],\n      isLimit: true,\n      isSelectable: true\n    }); // Figure conversion.\n\n    conversion.for('upcast').add(upcastTableFigure()); // Table conversion.\n\n    conversion.for('upcast').add(upcastTable());\n    conversion.for('editingDowncast').add(downcastInsertTable({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastInsertTable()); // Table row conversion.\n\n    conversion.for('upcast').elementToElement({\n      model: 'tableRow',\n      view: 'tr'\n    });\n    conversion.for('upcast').add(skipEmptyTableRow());\n    conversion.for('editingDowncast').add(downcastInsertRow());\n    conversion.for('editingDowncast').add(downcastRemoveRow()); // Table cell conversion.\n\n    conversion.for('upcast').elementToElement({\n      model: 'tableCell',\n      view: 'td'\n    });\n    conversion.for('upcast').elementToElement({\n      model: 'tableCell',\n      view: 'th'\n    });\n    conversion.for('upcast').add(ensureParagraphInTableCell('td'));\n    conversion.for('upcast').add(ensureParagraphInTableCell('th'));\n    conversion.for('editingDowncast').add(downcastInsertCell()); // Duplicates code - needed to properly refresh paragraph inside a table cell.\n\n    conversion.for('editingDowncast').elementToElement({\n      model: 'paragraph',\n      view: convertParagraphInTableCell,\n      converterPriority: 'high'\n    }); // Table attributes conversion.\n\n    conversion.for('downcast').attributeToAttribute({\n      model: 'colspan',\n      view: 'colspan'\n    });\n    conversion.for('upcast').attributeToAttribute({\n      model: {\n        key: 'colspan',\n        value: upcastCellSpan('colspan')\n      },\n      view: 'colspan'\n    });\n    conversion.for('downcast').attributeToAttribute({\n      model: 'rowspan',\n      view: 'rowspan'\n    });\n    conversion.for('upcast').attributeToAttribute({\n      model: {\n        key: 'rowspan',\n        value: upcastCellSpan('rowspan')\n      },\n      view: 'rowspan'\n    }); // Table heading columns conversion (a change of heading rows requires a reconversion of the whole table).\n\n    conversion.for('editingDowncast').add(downcastTableHeadingColumnsChange()); // Manually adjust model position mappings in a special case, when a table cell contains a paragraph, which is bound\n    // to its parent (to the table cell). This custom model-to-view position mapping is necessary in data pipeline only,\n    // because only during this conversion a paragraph can be bound to its parent.\n\n    editor.data.mapper.on('modelToViewPosition', mapTableCellModelPositionToView()); // Define the config.\n\n    editor.config.define('table.defaultHeadings.rows', 0);\n    editor.config.define('table.defaultHeadings.columns', 0); // Define all the commands.\n\n    editor.commands.add('insertTable', new InsertTableCommand(editor));\n    editor.commands.add('insertTableRowAbove', new InsertRowCommand(editor, {\n      order: 'above'\n    }));\n    editor.commands.add('insertTableRowBelow', new InsertRowCommand(editor, {\n      order: 'below'\n    }));\n    editor.commands.add('insertTableColumnLeft', new InsertColumnCommand(editor, {\n      order: 'left'\n    }));\n    editor.commands.add('insertTableColumnRight', new InsertColumnCommand(editor, {\n      order: 'right'\n    }));\n    editor.commands.add('removeTableRow', new RemoveRowCommand(editor));\n    editor.commands.add('removeTableColumn', new RemoveColumnCommand(editor));\n    editor.commands.add('splitTableCellVertically', new SplitCellCommand(editor, {\n      direction: 'vertically'\n    }));\n    editor.commands.add('splitTableCellHorizontally', new SplitCellCommand(editor, {\n      direction: 'horizontally'\n    }));\n    editor.commands.add('mergeTableCells', new MergeCellsCommand(editor));\n    editor.commands.add('mergeTableCellRight', new MergeCellCommand(editor, {\n      direction: 'right'\n    }));\n    editor.commands.add('mergeTableCellLeft', new MergeCellCommand(editor, {\n      direction: 'left'\n    }));\n    editor.commands.add('mergeTableCellDown', new MergeCellCommand(editor, {\n      direction: 'down'\n    }));\n    editor.commands.add('mergeTableCellUp', new MergeCellCommand(editor, {\n      direction: 'up'\n    }));\n    editor.commands.add('setTableColumnHeader', new SetHeaderColumnCommand(editor));\n    editor.commands.add('setTableRowHeader', new SetHeaderRowCommand(editor));\n    editor.commands.add('selectTableRow', new SelectRowCommand(editor));\n    editor.commands.add('selectTableColumn', new SelectColumnCommand(editor));\n    injectTableHeadingRowsRefreshPostFixer(model);\n    injectTableLayoutPostFixer(model);\n    injectTableCellRefreshPostFixer(model, editor.editing.mapper);\n    injectTableCellParagraphPostFixer(model);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [TableUtils];\n  }\n\n} // Creates a mapper callback to adjust model position mappings in a table cell containing a paragraph, which is bound to its parent\n// (to the table cell). Only positions after this paragraph have to be adjusted, because after binding this paragraph to the table cell,\n// elements located after this paragraph would point either to a non-existent offset inside `tableCell` (if paragraph is empty), or after\n// the first character of the paragraph's text. See https://github.com/ckeditor/ckeditor5/issues/10116.\n//\n// <tableCell><paragraph></paragraph>^</tableCell> -> <td>^&nbsp;</td>\n//\n// <tableCell><paragraph>foobar</paragraph>^</tableCell> -> <td>foobar^</td>\n//\n// @returns {Function}\n\nfunction mapTableCellModelPositionToView() {\n  return (evt, data) => {\n    const modelParent = data.modelPosition.parent;\n    const modelNodeBefore = data.modelPosition.nodeBefore;\n\n    if (!modelParent.is('element', 'tableCell')) {\n      return;\n    }\n\n    if (!modelNodeBefore || !modelNodeBefore.is('element', 'paragraph')) {\n      return;\n    }\n\n    const viewNodeBefore = data.mapper.toViewElement(modelNodeBefore);\n    const viewParent = data.mapper.toViewElement(modelParent);\n\n    if (viewNodeBefore === viewParent) {\n      // Since the paragraph has already been bound to its parent, update the current position in the model with paragraph's\n      // max offset, so it points to the place which should normally (in all other cases) be the end position of this paragraph.\n      data.viewPosition = data.mapper.findPositionIn(viewParent, modelNodeBefore.maxOffset);\n    }\n  };\n} // Returns fixed colspan and rowspan attrbutes values.\n//\n// @private\n// @param {String} type colspan or rowspan.\n// @returns {Function} conversion value function.\n\n\nfunction upcastCellSpan(type) {\n  return cell => {\n    const span = parseInt(cell.getAttribute(type));\n\n    if (Number.isNaN(span) || span <= 0) {\n      return null;\n    }\n\n    return span;\n  };\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tableediting.js"],"names":["Plugin","upcastTable","ensureParagraphInTableCell","skipEmptyTableRow","upcastTableFigure","convertParagraphInTableCell","downcastInsertCell","downcastInsertRow","downcastInsertTable","downcastRemoveRow","downcastTableHeadingColumnsChange","InsertTableCommand","InsertRowCommand","InsertColumnCommand","SplitCellCommand","MergeCellCommand","RemoveRowCommand","RemoveColumnCommand","SetHeaderRowCommand","SetHeaderColumnCommand","MergeCellsCommand","SelectRowCommand","SelectColumnCommand","TableUtils","injectTableLayoutPostFixer","injectTableCellParagraphPostFixer","injectTableCellRefreshPostFixer","injectTableHeadingRowsRefreshPostFixer","TableEditing","pluginName","init","editor","model","schema","conversion","register","allowWhere","allowAttributes","isObject","isBlock","allowIn","isLimit","allowChildren","isSelectable","for","add","asWidget","elementToElement","view","converterPriority","attributeToAttribute","key","value","upcastCellSpan","data","mapper","on","mapTableCellModelPositionToView","config","define","commands","order","direction","editing","requires","evt","modelParent","modelPosition","parent","modelNodeBefore","nodeBefore","is","viewNodeBefore","toViewElement","viewParent","viewPosition","findPositionIn","maxOffset","type","cell","span","parseInt","getAttribute","Number","isNaN"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\n\nimport upcastTable, { ensureParagraphInTableCell, skipEmptyTableRow, upcastTableFigure } from './converters/upcasttable';\nimport {\n\tconvertParagraphInTableCell,\n\tdowncastInsertCell,\n\tdowncastInsertRow,\n\tdowncastInsertTable,\n\tdowncastRemoveRow,\n\tdowncastTableHeadingColumnsChange\n} from './converters/downcast';\n\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport MergeCellsCommand from './commands/mergecellscommand';\nimport SelectRowCommand from './commands/selectrowcommand';\nimport SelectColumnCommand from './commands/selectcolumncommand';\nimport TableUtils from '../src/tableutils';\n\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellParagraphPostFixer from './converters/table-cell-paragraph-post-fixer';\nimport injectTableCellRefreshPostFixer from './converters/table-cell-refresh-post-fixer';\nimport injectTableHeadingRowsRefreshPostFixer from './converters/table-heading-rows-refresh-post-fixer';\n\nimport '../theme/tableediting.css';\n\n/**\n * The table editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TableEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\tschema.register( 'table', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowAttributes: [ 'headingRows', 'headingColumns' ],\n\t\t\tisObject: true,\n\t\t\tisBlock: true\n\t\t} );\n\n\t\tschema.register( 'tableRow', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.register( 'tableCell', {\n\t\t\tallowIn: 'tableRow',\n\t\t\tallowChildren: '$block',\n\t\t\tallowAttributes: [ 'colspan', 'rowspan' ],\n\t\t\tisLimit: true,\n\t\t\tisSelectable: true\n\t\t} );\n\n\t\t// Figure conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTableFigure() );\n\n\t\t// Table conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTable() );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertTable( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertTable() );\n\n\t\t// Table row conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableRow', view: 'tr' } );\n\t\tconversion.for( 'upcast' ).add( skipEmptyTableRow() );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertRow() );\n\t\tconversion.for( 'editingDowncast' ).add( downcastRemoveRow() );\n\n\t\t// Table cell conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableCell', view: 'td' } );\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableCell', view: 'th' } );\n\t\tconversion.for( 'upcast' ).add( ensureParagraphInTableCell( 'td' ) );\n\t\tconversion.for( 'upcast' ).add( ensureParagraphInTableCell( 'th' ) );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertCell() );\n\n\t\t// Duplicates code - needed to properly refresh paragraph inside a table cell.\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'paragraph',\n\t\t\tview: convertParagraphInTableCell,\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\t\t// Table attributes conversion.\n\t\tconversion.for( 'downcast' ).attributeToAttribute( { model: 'colspan', view: 'colspan' } );\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: { key: 'colspan', value: upcastCellSpan( 'colspan' ) },\n\t\t\tview: 'colspan'\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToAttribute( { model: 'rowspan', view: 'rowspan' } );\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: { key: 'rowspan', value: upcastCellSpan( 'rowspan' ) },\n\t\t\tview: 'rowspan'\n\t\t} );\n\n\t\t// Table heading columns conversion (a change of heading rows requires a reconversion of the whole table).\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingColumnsChange() );\n\n\t\t// Manually adjust model position mappings in a special case, when a table cell contains a paragraph, which is bound\n\t\t// to its parent (to the table cell). This custom model-to-view position mapping is necessary in data pipeline only,\n\t\t// because only during this conversion a paragraph can be bound to its parent.\n\t\teditor.data.mapper.on( 'modelToViewPosition', mapTableCellModelPositionToView() );\n\n\t\t// Define the config.\n\t\teditor.config.define( 'table.defaultHeadings.rows', 0 );\n\t\teditor.config.define( 'table.defaultHeadings.columns', 0 );\n\n\t\t// Define all the commands.\n\t\teditor.commands.add( 'insertTable', new InsertTableCommand( editor ) );\n\t\teditor.commands.add( 'insertTableRowAbove', new InsertRowCommand( editor, { order: 'above' } ) );\n\t\teditor.commands.add( 'insertTableRowBelow', new InsertRowCommand( editor, { order: 'below' } ) );\n\t\teditor.commands.add( 'insertTableColumnLeft', new InsertColumnCommand( editor, { order: 'left' } ) );\n\t\teditor.commands.add( 'insertTableColumnRight', new InsertColumnCommand( editor, { order: 'right' } ) );\n\n\t\teditor.commands.add( 'removeTableRow', new RemoveRowCommand( editor ) );\n\t\teditor.commands.add( 'removeTableColumn', new RemoveColumnCommand( editor ) );\n\n\t\teditor.commands.add( 'splitTableCellVertically', new SplitCellCommand( editor, { direction: 'vertically' } ) );\n\t\teditor.commands.add( 'splitTableCellHorizontally', new SplitCellCommand( editor, { direction: 'horizontally' } ) );\n\n\t\teditor.commands.add( 'mergeTableCells', new MergeCellsCommand( editor ) );\n\n\t\teditor.commands.add( 'mergeTableCellRight', new MergeCellCommand( editor, { direction: 'right' } ) );\n\t\teditor.commands.add( 'mergeTableCellLeft', new MergeCellCommand( editor, { direction: 'left' } ) );\n\t\teditor.commands.add( 'mergeTableCellDown', new MergeCellCommand( editor, { direction: 'down' } ) );\n\t\teditor.commands.add( 'mergeTableCellUp', new MergeCellCommand( editor, { direction: 'up' } ) );\n\n\t\teditor.commands.add( 'setTableColumnHeader', new SetHeaderColumnCommand( editor ) );\n\t\teditor.commands.add( 'setTableRowHeader', new SetHeaderRowCommand( editor ) );\n\n\t\teditor.commands.add( 'selectTableRow', new SelectRowCommand( editor ) );\n\t\teditor.commands.add( 'selectTableColumn', new SelectColumnCommand( editor ) );\n\n\t\tinjectTableHeadingRowsRefreshPostFixer( model );\n\t\tinjectTableLayoutPostFixer( model );\n\t\tinjectTableCellRefreshPostFixer( model, editor.editing.mapper );\n\t\tinjectTableCellParagraphPostFixer( model );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableUtils ];\n\t}\n}\n\n// Creates a mapper callback to adjust model position mappings in a table cell containing a paragraph, which is bound to its parent\n// (to the table cell). Only positions after this paragraph have to be adjusted, because after binding this paragraph to the table cell,\n// elements located after this paragraph would point either to a non-existent offset inside `tableCell` (if paragraph is empty), or after\n// the first character of the paragraph's text. See https://github.com/ckeditor/ckeditor5/issues/10116.\n//\n// <tableCell><paragraph></paragraph>^</tableCell> -> <td>^&nbsp;</td>\n//\n// <tableCell><paragraph>foobar</paragraph>^</tableCell> -> <td>foobar^</td>\n//\n// @returns {Function}\nfunction mapTableCellModelPositionToView() {\n\treturn ( evt, data ) => {\n\t\tconst modelParent = data.modelPosition.parent;\n\t\tconst modelNodeBefore = data.modelPosition.nodeBefore;\n\n\t\tif ( !modelParent.is( 'element', 'tableCell' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !modelNodeBefore || !modelNodeBefore.is( 'element', 'paragraph' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewNodeBefore = data.mapper.toViewElement( modelNodeBefore );\n\t\tconst viewParent = data.mapper.toViewElement( modelParent );\n\n\t\tif ( viewNodeBefore === viewParent ) {\n\t\t\t// Since the paragraph has already been bound to its parent, update the current position in the model with paragraph's\n\t\t\t// max offset, so it points to the place which should normally (in all other cases) be the end position of this paragraph.\n\t\t\tdata.viewPosition = data.mapper.findPositionIn( viewParent, modelNodeBefore.maxOffset );\n\t\t}\n\t};\n}\n\n// Returns fixed colspan and rowspan attrbutes values.\n//\n// @private\n// @param {String} type colspan or rowspan.\n// @returns {Function} conversion value function.\nfunction upcastCellSpan( type ) {\n\treturn cell => {\n\t\tconst span = parseInt( cell.getAttribute( type ) );\n\n\t\tif ( Number.isNaN( span ) || span <= 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn span;\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}