{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaembedcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { findOptimalInsertionRange } from 'ckeditor5/src/widget';\nimport { getSelectedMediaModelWidget, insertMedia } from './utils';\n/**\n * The insert media command.\n *\n * The command is registered by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} as `'mediaEmbed'`.\n *\n * To insert media at the current selection, execute the command and specify the URL:\n *\n *\t\teditor.execute( 'mediaEmbed', 'http://url.to.the/media' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class MediaEmbedCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const selectedMedia = getSelectedMediaModelWidget(selection);\n    this.value = selectedMedia ? selectedMedia.getAttribute('url') : null;\n    this.isEnabled = isMediaSelected(selection) || isAllowedInParent(selection, model);\n  }\n  /**\n   * Executes the command, which either:\n   *\n   * * updates the URL of the selected media,\n   * * inserts the new media into the editor and puts the selection around it.\n   *\n   * @fires execute\n   * @param {String} url The URL of the media.\n   */\n\n\n  execute(url) {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const selectedMedia = getSelectedMediaModelWidget(selection);\n\n    if (selectedMedia) {\n      model.change(writer => {\n        writer.setAttribute('url', url, selectedMedia);\n      });\n    } else {\n      insertMedia(model, url, findOptimalInsertionRange(selection, model));\n    }\n  }\n\n} // Checks if the table is allowed in the parent.\n//\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// @param {module:engine/model/model~Model} model\n// @returns {Boolean}\n\nfunction isAllowedInParent(selection, model) {\n  const insertionRange = findOptimalInsertionRange(selection, model);\n  let parent = insertionRange.start.parent; // The model.insertContent() will remove empty parent (unless it is a $root or a limit).\n\n  if (parent.isEmpty && !model.schema.isLimit(parent)) {\n    parent = parent.parent;\n  }\n\n  return model.schema.checkChild(parent, 'media');\n} // Checks if the media object is selected.\n//\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// @returns {Boolean}\n\n\nfunction isMediaSelected(selection) {\n  const element = selection.getSelectedElement();\n  return !!element && element.name === 'media';\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-media-embed/src/mediaembedcommand.js"],"names":["Command","findOptimalInsertionRange","getSelectedMediaModelWidget","insertMedia","MediaEmbedCommand","refresh","model","editor","selection","document","selectedMedia","value","getAttribute","isEnabled","isMediaSelected","isAllowedInParent","execute","url","change","writer","setAttribute","insertionRange","parent","start","isEmpty","schema","isLimit","checkChild","element","getSelectedElement","name"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,yBAAT,QAA0C,sBAA1C;AACA,SAASC,2BAAT,EAAsCC,WAAtC,QAAyD,SAAzD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,SAAgCJ,OAAhC,CAAwC;AACtD;AACD;AACA;AACCK,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,SAAS,GAAGF,KAAK,CAACG,QAAN,CAAeD,SAAjC;AACA,UAAME,aAAa,GAAGR,2BAA2B,CAAEM,SAAF,CAAjD;AAEA,SAAKG,KAAL,GAAaD,aAAa,GAAGA,aAAa,CAACE,YAAd,CAA4B,KAA5B,CAAH,GAAyC,IAAnE;AAEA,SAAKC,SAAL,GAAiBC,eAAe,CAAEN,SAAF,CAAf,IAAgCO,iBAAiB,CAAEP,SAAF,EAAaF,KAAb,CAAlE;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCU,EAAAA,OAAO,CAAEC,GAAF,EAAQ;AACd,UAAMX,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,SAAS,GAAGF,KAAK,CAACG,QAAN,CAAeD,SAAjC;AACA,UAAME,aAAa,GAAGR,2BAA2B,CAAEM,SAAF,CAAjD;;AAEA,QAAKE,aAAL,EAAqB;AACpBJ,MAAAA,KAAK,CAACY,MAAN,CAAcC,MAAM,IAAI;AACvBA,QAAAA,MAAM,CAACC,YAAP,CAAqB,KAArB,EAA4BH,GAA5B,EAAiCP,aAAjC;AACA,OAFD;AAGA,KAJD,MAIO;AACNP,MAAAA,WAAW,CAAEG,KAAF,EAASW,GAAT,EAAchB,yBAAyB,CAAEO,SAAF,EAAaF,KAAb,CAAvC,CAAX;AACA;AACD;;AAnCqD,C,CAsCvD;AACA;AACA;AACA;AACA;;AACA,SAASS,iBAAT,CAA4BP,SAA5B,EAAuCF,KAAvC,EAA+C;AAC9C,QAAMe,cAAc,GAAGpB,yBAAyB,CAAEO,SAAF,EAAaF,KAAb,CAAhD;AACA,MAAIgB,MAAM,GAAGD,cAAc,CAACE,KAAf,CAAqBD,MAAlC,CAF8C,CAI9C;;AACA,MAAKA,MAAM,CAACE,OAAP,IAAkB,CAAClB,KAAK,CAACmB,MAAN,CAAaC,OAAb,CAAsBJ,MAAtB,CAAxB,EAAyD;AACxDA,IAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACA;;AAED,SAAOhB,KAAK,CAACmB,MAAN,CAAaE,UAAb,CAAyBL,MAAzB,EAAiC,OAAjC,CAAP;AACA,C,CAED;AACA;AACA;AACA;;;AACA,SAASR,eAAT,CAA0BN,SAA1B,EAAsC;AACrC,QAAMoB,OAAO,GAAGpB,SAAS,CAACqB,kBAAV,EAAhB;AACA,SAAO,CAAC,CAACD,OAAF,IAAaA,OAAO,CAACE,IAAR,KAAiB,OAArC;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaembedcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { findOptimalInsertionRange } from 'ckeditor5/src/widget';\nimport { getSelectedMediaModelWidget, insertMedia } from './utils';\n\n/**\n * The insert media command.\n *\n * The command is registered by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} as `'mediaEmbed'`.\n *\n * To insert media at the current selection, execute the command and specify the URL:\n *\n *\t\teditor.execute( 'mediaEmbed', 'http://url.to.the/media' );\n *\n * @extends module:core/command~Command\n */\nexport default class MediaEmbedCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst selectedMedia = getSelectedMediaModelWidget( selection );\n\n\t\tthis.value = selectedMedia ? selectedMedia.getAttribute( 'url' ) : null;\n\n\t\tthis.isEnabled = isMediaSelected( selection ) || isAllowedInParent( selection, model );\n\t}\n\n\t/**\n\t * Executes the command, which either:\n\t *\n\t * * updates the URL of the selected media,\n\t * * inserts the new media into the editor and puts the selection around it.\n\t *\n\t * @fires execute\n\t * @param {String} url The URL of the media.\n\t */\n\texecute( url ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst selectedMedia = getSelectedMediaModelWidget( selection );\n\n\t\tif ( selectedMedia ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setAttribute( 'url', url, selectedMedia );\n\t\t\t} );\n\t\t} else {\n\t\t\tinsertMedia( model, url, findOptimalInsertionRange( selection, model ) );\n\t\t}\n\t}\n}\n\n// Checks if the table is allowed in the parent.\n//\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// @param {module:engine/model/model~Model} model\n// @returns {Boolean}\nfunction isAllowedInParent( selection, model ) {\n\tconst insertionRange = findOptimalInsertionRange( selection, model );\n\tlet parent = insertionRange.start.parent;\n\n\t// The model.insertContent() will remove empty parent (unless it is a $root or a limit).\n\tif ( parent.isEmpty && !model.schema.isLimit( parent ) ) {\n\t\tparent = parent.parent;\n\t}\n\n\treturn model.schema.checkChild( parent, 'media' );\n}\n\n// Checks if the media object is selected.\n//\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// @returns {Boolean}\nfunction isMediaSelected( selection ) {\n\tconst element = selection.getSelectedElement();\n\treturn !!element && element.name === 'media';\n}\n"]},"metadata":{},"sourceType":"module"}