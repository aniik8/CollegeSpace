{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/automediaembed\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { LiveRange, LivePosition } from 'ckeditor5/src/engine';\nimport { Clipboard } from 'ckeditor5/src/clipboard';\nimport { Delete } from 'ckeditor5/src/typing';\nimport { Undo } from 'ckeditor5/src/undo';\nimport { global } from 'ckeditor5/src/utils';\nimport MediaEmbedEditing from './mediaembedediting';\nimport { insertMedia } from './utils';\nconst URL_REGEXP = /^(?:http(s)?:\\/\\/)?[\\w-]+\\.[\\w-.~:/?#[\\]@!$&'()*+,;=%]+$/;\n/**\n * The auto-media embed plugin. It recognizes media links in the pasted content and embeds\n * them shortly after they are injected into the document.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class AutoMediaEmbed extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [Clipboard, Delete, Undo];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'AutoMediaEmbed';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * The paste–to–embed `setTimeout` ID. Stored as a property to allow\n     * cleaning of the timeout.\n     *\n     * @private\n     * @member {Number} #_timeoutId\n     */\n\n    this._timeoutId = null;\n    /**\n     * The position where the `<media>` element will be inserted after the timeout,\n     * determined each time the new content is pasted into the document.\n     *\n     * @private\n     * @member {module:engine/model/liveposition~LivePosition} #_positionToInsert\n     */\n\n    this._positionToInsert = null;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const modelDocument = editor.model.document; // We need to listen on `Clipboard#inputTransformation` because we need to save positions of selection.\n    // After pasting, the content between those positions will be checked for a URL that could be transformed\n    // into media.\n\n    this.listenTo(editor.plugins.get('ClipboardPipeline'), 'inputTransformation', () => {\n      const firstRange = modelDocument.selection.getFirstRange();\n      const leftLivePosition = LivePosition.fromPosition(firstRange.start);\n      leftLivePosition.stickiness = 'toPrevious';\n      const rightLivePosition = LivePosition.fromPosition(firstRange.end);\n      rightLivePosition.stickiness = 'toNext';\n      modelDocument.once('change:data', () => {\n        this._embedMediaBetweenPositions(leftLivePosition, rightLivePosition);\n\n        leftLivePosition.detach();\n        rightLivePosition.detach();\n      }, {\n        priority: 'high'\n      });\n    });\n    editor.commands.get('undo').on('execute', () => {\n      if (this._timeoutId) {\n        global.window.clearTimeout(this._timeoutId);\n\n        this._positionToInsert.detach();\n\n        this._timeoutId = null;\n        this._positionToInsert = null;\n      }\n    }, {\n      priority: 'high'\n    });\n  }\n  /**\n   * Analyzes the part of the document between provided positions in search for a URL representing media.\n   * When the URL is found, it is automatically converted into media.\n   *\n   * @protected\n   * @param {module:engine/model/liveposition~LivePosition} leftPosition Left position of the selection.\n   * @param {module:engine/model/liveposition~LivePosition} rightPosition Right position of the selection.\n   */\n\n\n  _embedMediaBetweenPositions(leftPosition, rightPosition) {\n    const editor = this.editor;\n    const mediaRegistry = editor.plugins.get(MediaEmbedEditing).registry; // TODO: Use marker instead of LiveRange & LivePositions.\n\n    const urlRange = new LiveRange(leftPosition, rightPosition);\n    const walker = urlRange.getWalker({\n      ignoreElementEnd: true\n    });\n    let url = '';\n\n    for (const node of walker) {\n      if (node.item.is('$textProxy')) {\n        url += node.item.data;\n      }\n    }\n\n    url = url.trim(); // If the URL does not match to universal URL regexp, let's skip that.\n\n    if (!url.match(URL_REGEXP)) {\n      urlRange.detach();\n      return;\n    } // If the URL represents a media, let's use it.\n\n\n    if (!mediaRegistry.hasMedia(url)) {\n      urlRange.detach();\n      return;\n    }\n\n    const mediaEmbedCommand = editor.commands.get('mediaEmbed'); // Do not anything if media element cannot be inserted at the current position (#47).\n\n    if (!mediaEmbedCommand.isEnabled) {\n      urlRange.detach();\n      return;\n    } // Position won't be available in the `setTimeout` function so let's clone it.\n\n\n    this._positionToInsert = LivePosition.fromPosition(leftPosition); // This action mustn't be executed if undo was called between pasting and auto-embedding.\n\n    this._timeoutId = global.window.setTimeout(() => {\n      editor.model.change(writer => {\n        this._timeoutId = null;\n        writer.remove(urlRange);\n        urlRange.detach();\n        let insertionPosition; // Check if position where the media element should be inserted is still valid.\n        // Otherwise leave it as undefined to use document.selection - default behavior of model.insertContent().\n\n        if (this._positionToInsert.root.rootName !== '$graveyard') {\n          insertionPosition = this._positionToInsert;\n        }\n\n        insertMedia(editor.model, url, insertionPosition);\n\n        this._positionToInsert.detach();\n\n        this._positionToInsert = null;\n      });\n      editor.plugins.get('Delete').requestUndoOnBackspace();\n    }, 100);\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-media-embed/src/automediaembed.js"],"names":["Plugin","LiveRange","LivePosition","Clipboard","Delete","Undo","global","MediaEmbedEditing","insertMedia","URL_REGEXP","AutoMediaEmbed","requires","pluginName","constructor","editor","_timeoutId","_positionToInsert","init","modelDocument","model","document","listenTo","plugins","get","firstRange","selection","getFirstRange","leftLivePosition","fromPosition","start","stickiness","rightLivePosition","end","once","_embedMediaBetweenPositions","detach","priority","commands","on","window","clearTimeout","leftPosition","rightPosition","mediaRegistry","registry","urlRange","walker","getWalker","ignoreElementEnd","url","node","item","is","data","trim","match","hasMedia","mediaEmbedCommand","isEnabled","setTimeout","change","writer","remove","insertionPosition","root","rootName","requestUndoOnBackspace"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/automediaembed\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { LiveRange, LivePosition } from 'ckeditor5/src/engine';\nimport { Clipboard } from 'ckeditor5/src/clipboard';\nimport { Delete } from 'ckeditor5/src/typing';\nimport { Undo } from 'ckeditor5/src/undo';\nimport { global } from 'ckeditor5/src/utils';\n\nimport MediaEmbedEditing from './mediaembedediting';\nimport { insertMedia } from './utils';\n\nconst URL_REGEXP = /^(?:http(s)?:\\/\\/)?[\\w-]+\\.[\\w-.~:/?#[\\]@!$&'()*+,;=%]+$/;\n\n/**\n * The auto-media embed plugin. It recognizes media links in the pasted content and embeds\n * them shortly after they are injected into the document.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class AutoMediaEmbed extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Clipboard, Delete, Undo ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'AutoMediaEmbed';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The paste–to–embed `setTimeout` ID. Stored as a property to allow\n\t\t * cleaning of the timeout.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} #_timeoutId\n\t\t */\n\t\tthis._timeoutId = null;\n\n\t\t/**\n\t\t * The position where the `<media>` element will be inserted after the timeout,\n\t\t * determined each time the new content is pasted into the document.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition} #_positionToInsert\n\t\t */\n\t\tthis._positionToInsert = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\n\t\t// We need to listen on `Clipboard#inputTransformation` because we need to save positions of selection.\n\t\t// After pasting, the content between those positions will be checked for a URL that could be transformed\n\t\t// into media.\n\t\tthis.listenTo( editor.plugins.get( 'ClipboardPipeline' ), 'inputTransformation', () => {\n\t\t\tconst firstRange = modelDocument.selection.getFirstRange();\n\n\t\t\tconst leftLivePosition = LivePosition.fromPosition( firstRange.start );\n\t\t\tleftLivePosition.stickiness = 'toPrevious';\n\n\t\t\tconst rightLivePosition = LivePosition.fromPosition( firstRange.end );\n\t\t\trightLivePosition.stickiness = 'toNext';\n\n\t\t\tmodelDocument.once( 'change:data', () => {\n\t\t\t\tthis._embedMediaBetweenPositions( leftLivePosition, rightLivePosition );\n\n\t\t\t\tleftLivePosition.detach();\n\t\t\t\trightLivePosition.detach();\n\t\t\t}, { priority: 'high' } );\n\t\t} );\n\n\t\teditor.commands.get( 'undo' ).on( 'execute', () => {\n\t\t\tif ( this._timeoutId ) {\n\t\t\t\tglobal.window.clearTimeout( this._timeoutId );\n\t\t\t\tthis._positionToInsert.detach();\n\n\t\t\t\tthis._timeoutId = null;\n\t\t\t\tthis._positionToInsert = null;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Analyzes the part of the document between provided positions in search for a URL representing media.\n\t * When the URL is found, it is automatically converted into media.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liveposition~LivePosition} leftPosition Left position of the selection.\n\t * @param {module:engine/model/liveposition~LivePosition} rightPosition Right position of the selection.\n\t */\n\t_embedMediaBetweenPositions( leftPosition, rightPosition ) {\n\t\tconst editor = this.editor;\n\t\tconst mediaRegistry = editor.plugins.get( MediaEmbedEditing ).registry;\n\t\t// TODO: Use marker instead of LiveRange & LivePositions.\n\t\tconst urlRange = new LiveRange( leftPosition, rightPosition );\n\t\tconst walker = urlRange.getWalker( { ignoreElementEnd: true } );\n\n\t\tlet url = '';\n\n\t\tfor ( const node of walker ) {\n\t\t\tif ( node.item.is( '$textProxy' ) ) {\n\t\t\t\turl += node.item.data;\n\t\t\t}\n\t\t}\n\n\t\turl = url.trim();\n\n\t\t// If the URL does not match to universal URL regexp, let's skip that.\n\t\tif ( !url.match( URL_REGEXP ) ) {\n\t\t\turlRange.detach();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If the URL represents a media, let's use it.\n\t\tif ( !mediaRegistry.hasMedia( url ) ) {\n\t\t\turlRange.detach();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst mediaEmbedCommand = editor.commands.get( 'mediaEmbed' );\n\n\t\t// Do not anything if media element cannot be inserted at the current position (#47).\n\t\tif ( !mediaEmbedCommand.isEnabled ) {\n\t\t\turlRange.detach();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Position won't be available in the `setTimeout` function so let's clone it.\n\t\tthis._positionToInsert = LivePosition.fromPosition( leftPosition );\n\n\t\t// This action mustn't be executed if undo was called between pasting and auto-embedding.\n\t\tthis._timeoutId = global.window.setTimeout( () => {\n\t\t\teditor.model.change( writer => {\n\t\t\t\tthis._timeoutId = null;\n\n\t\t\t\twriter.remove( urlRange );\n\t\t\t\turlRange.detach();\n\n\t\t\t\tlet insertionPosition;\n\n\t\t\t\t// Check if position where the media element should be inserted is still valid.\n\t\t\t\t// Otherwise leave it as undefined to use document.selection - default behavior of model.insertContent().\n\t\t\t\tif ( this._positionToInsert.root.rootName !== '$graveyard' ) {\n\t\t\t\t\tinsertionPosition = this._positionToInsert;\n\t\t\t\t}\n\n\t\t\t\tinsertMedia( editor.model, url, insertionPosition );\n\n\t\t\t\tthis._positionToInsert.detach();\n\t\t\t\tthis._positionToInsert = null;\n\t\t\t} );\n\n\t\t\teditor.plugins.get( 'Delete' ).requestUndoOnBackspace();\n\t\t}, 100 );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}