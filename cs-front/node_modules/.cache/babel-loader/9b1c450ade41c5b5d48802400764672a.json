{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellpropertycommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { getSelectionAffectedTableCells } from '../../utils/selection';\n/**\n * The table cell attribute command.\n *\n * The command is a base command for other table cell property commands.\n *\n * @extends module:core/command~Command\n */\n\nexport default class TableCellPropertyCommand extends Command {\n  /**\n   * Creates a new `TableCellPropertyCommand` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor An editor in which this command will be used.\n   * @param {String} attributeName Table cell attribute name.\n   * @param {String} defaultValue The default value of the attribute.\n   */\n  constructor(editor, attributeName, defaultValue) {\n    super(editor);\n    /**\n     * The attribute that will be set by the command.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.attributeName = attributeName;\n    /**\n     * The default value for the attribute.\n     *\n     * @readonly\n     * @protected\n     * @member {String}\n     */\n\n    this._defaultValue = defaultValue;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const editor = this.editor;\n    const selectedTableCells = getSelectionAffectedTableCells(editor.model.document.selection);\n    this.isEnabled = !!selectedTableCells.length;\n    this.value = this._getSingleValue(selectedTableCells);\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} [options]\n   * @param {*} [options.value] If set, the command will set the attribute on selected table cells.\n   * If it is not set, the command will remove the attribute from the selected table cells.\n   * @param {module:engine/model/batch~Batch} [options.batch] Pass the model batch instance to the command to aggregate changes,\n   * for example to allow a single undo step for multiple executions.\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      value,\n      batch\n    } = options;\n    const model = this.editor.model;\n    const tableCells = getSelectionAffectedTableCells(model.document.selection);\n\n    const valueToSet = this._getValueToSet(value);\n\n    model.enqueueChange(batch || 'default', writer => {\n      if (valueToSet) {\n        tableCells.forEach(tableCell => writer.setAttribute(this.attributeName, valueToSet, tableCell));\n      } else {\n        tableCells.forEach(tableCell => writer.removeAttribute(this.attributeName, tableCell));\n      }\n    });\n  }\n  /**\n   * Returns the attribute value for a table cell.\n   *\n   * @param {module:engine/model/element~Element} tableCell\n   * @returns {String|undefined}\n   * @private\n   */\n\n\n  _getAttribute(tableCell) {\n    if (!tableCell) {\n      return;\n    }\n\n    const value = tableCell.getAttribute(this.attributeName);\n\n    if (value === this._defaultValue) {\n      return;\n    }\n\n    return value;\n  }\n  /**\n   * Returns the proper model value. It can be used to add a default unit to numeric values.\n   *\n   * @private\n   * @param {*} value\n   * @returns {*}\n   */\n\n\n  _getValueToSet(value) {\n    if (value === this._defaultValue) {\n      return;\n    }\n\n    return value;\n  }\n  /**\n   * Returns a single value for all selected table cells. If the value is the same for all cells,\n   * it will be returned (`undefined` otherwise).\n   *\n   * @param {Array.<module:engine/model/element~Element>} tableCell\n   * @returns {*}\n   * @private\n   */\n\n\n  _getSingleValue(tableCell) {\n    const firstCellValue = this._getAttribute(tableCell[0]);\n\n    const everyCellHasAttribute = tableCell.every(tableCell => this._getAttribute(tableCell) === firstCellValue);\n    return everyCellHasAttribute ? firstCellValue : undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js"],"names":["Command","getSelectionAffectedTableCells","TableCellPropertyCommand","constructor","editor","attributeName","defaultValue","_defaultValue","refresh","selectedTableCells","model","document","selection","isEnabled","length","value","_getSingleValue","execute","options","batch","tableCells","valueToSet","_getValueToSet","enqueueChange","writer","forEach","tableCell","setAttribute","removeAttribute","_getAttribute","getAttribute","firstCellValue","everyCellHasAttribute","every","undefined"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellpropertycommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { getSelectionAffectedTableCells } from '../../utils/selection';\n\n/**\n * The table cell attribute command.\n *\n * The command is a base command for other table cell property commands.\n *\n * @extends module:core/command~Command\n */\nexport default class TableCellPropertyCommand extends Command {\n\t/**\n\t * Creates a new `TableCellPropertyCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor An editor in which this command will be used.\n\t * @param {String} attributeName Table cell attribute name.\n\t * @param {String} defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor, attributeName, defaultValue ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The attribute that will be set by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attributeName = attributeName;\n\n\t\t/**\n\t\t * The default value for the attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {String}\n\t\t */\n\t\tthis._defaultValue = defaultValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst selectedTableCells = getSelectionAffectedTableCells( editor.model.document.selection );\n\n\t\tthis.isEnabled = !!selectedTableCells.length;\n\t\tthis.value = this._getSingleValue( selectedTableCells );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} [options]\n\t * @param {*} [options.value] If set, the command will set the attribute on selected table cells.\n\t * If it is not set, the command will remove the attribute from the selected table cells.\n\t * @param {module:engine/model/batch~Batch} [options.batch] Pass the model batch instance to the command to aggregate changes,\n\t * for example to allow a single undo step for multiple executions.\n\t */\n\texecute( options = {} ) {\n\t\tconst { value, batch } = options;\n\t\tconst model = this.editor.model;\n\t\tconst tableCells = getSelectionAffectedTableCells( model.document.selection );\n\t\tconst valueToSet = this._getValueToSet( value );\n\n\t\tmodel.enqueueChange( batch || 'default', writer => {\n\t\t\tif ( valueToSet ) {\n\t\t\t\ttableCells.forEach( tableCell => writer.setAttribute( this.attributeName, valueToSet, tableCell ) );\n\t\t\t} else {\n\t\t\t\ttableCells.forEach( tableCell => writer.removeAttribute( this.attributeName, tableCell ) );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the attribute value for a table cell.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @returns {String|undefined}\n\t * @private\n\t */\n\t_getAttribute( tableCell ) {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = tableCell.getAttribute( this.attributeName );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t *\n\t * @private\n\t * @param {*} value\n\t * @returns {*}\n\t */\n\t_getValueToSet( value ) {\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns a single value for all selected table cells. If the value is the same for all cells,\n\t * it will be returned (`undefined` otherwise).\n\t *\n\t * @param {Array.<module:engine/model/element~Element>} tableCell\n\t * @returns {*}\n\t * @private\n\t */\n\t_getSingleValue( tableCell ) {\n\t\tconst firstCellValue = this._getAttribute( tableCell[ 0 ] );\n\n\t\tconst everyCellHasAttribute = tableCell.every( tableCell => this._getAttribute( tableCell ) === firstCellValue );\n\n\t\treturn everyCellHasAttribute ? firstCellValue : undefined;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}