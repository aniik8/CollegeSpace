{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/codeblockui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { Model, SplitButtonView, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { getNormalizedAndLocalizedLanguageDefinitions } from './utils';\nimport codeBlockIcon from '../theme/icons/codeblock.svg';\nimport '../theme/codeblock.css';\n/**\n * The code block UI plugin.\n *\n * Introduces the `'codeBlock'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class CodeBlockUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'CodeBlockUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    const componentFactory = editor.ui.componentFactory;\n    const normalizedLanguageDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n    componentFactory.add('codeBlock', locale => {\n      const command = editor.commands.get('codeBlock');\n      const dropdownView = createDropdown(locale, SplitButtonView);\n      const splitButtonView = dropdownView.buttonView;\n      splitButtonView.set({\n        label: t('Insert code block'),\n        tooltip: true,\n        icon: codeBlockIcon,\n        isToggleable: true\n      });\n      splitButtonView.bind('isOn').to(command, 'value', value => !!value);\n      splitButtonView.on('execute', () => {\n        editor.execute('codeBlock', {\n          usePreviousLanguageChoice: true\n        });\n        editor.editing.view.focus();\n      });\n      dropdownView.on('execute', evt => {\n        editor.execute('codeBlock', {\n          language: evt.source._codeBlockLanguage,\n          forceValue: true\n        });\n        editor.editing.view.focus();\n      });\n      dropdownView.class = 'ck-code-block-dropdown';\n      dropdownView.bind('isEnabled').to(command);\n      addListToDropdown(dropdownView, this._getLanguageListItemDefinitions(normalizedLanguageDefs));\n      return dropdownView;\n    });\n  }\n  /**\n   * A helper returning a collection of the `codeBlock` dropdown items representing languages\n   * available for the user to choose from.\n   *\n   * @private\n   * @param {Array.<module:code-block/codeblock~CodeBlockLanguageDefinition>} normalizedLanguageDefs\n   * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>}\n   */\n\n\n  _getLanguageListItemDefinitions(normalizedLanguageDefs) {\n    const editor = this.editor;\n    const command = editor.commands.get('codeBlock');\n    const itemDefinitions = new Collection();\n\n    for (const languageDef of normalizedLanguageDefs) {\n      const definition = {\n        type: 'button',\n        model: new Model({\n          _codeBlockLanguage: languageDef.language,\n          label: languageDef.label,\n          withText: true\n        })\n      };\n      definition.model.bind('isOn').to(command, 'value', value => {\n        return value === definition.model._codeBlockLanguage;\n      });\n      itemDefinitions.add(definition);\n    }\n\n    return itemDefinitions;\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-code-block/src/codeblockui.js"],"names":["Plugin","Collection","Model","SplitButtonView","createDropdown","addListToDropdown","getNormalizedAndLocalizedLanguageDefinitions","codeBlockIcon","CodeBlockUI","pluginName","init","editor","t","componentFactory","ui","normalizedLanguageDefs","add","locale","command","commands","get","dropdownView","splitButtonView","buttonView","set","label","tooltip","icon","isToggleable","bind","to","value","on","execute","usePreviousLanguageChoice","editing","view","focus","evt","language","source","_codeBlockLanguage","forceValue","class","_getLanguageListItemDefinitions","itemDefinitions","languageDef","definition","type","model","withText"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/codeblockui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { Model, SplitButtonView, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\n\nimport { getNormalizedAndLocalizedLanguageDefinitions } from './utils';\n\nimport codeBlockIcon from '../theme/icons/codeblock.svg';\nimport '../theme/codeblock.css';\n\n/**\n * The code block UI plugin.\n *\n * Introduces the `'codeBlock'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CodeBlockUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'CodeBlockUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst componentFactory = editor.ui.componentFactory;\n\t\tconst normalizedLanguageDefs = getNormalizedAndLocalizedLanguageDefinitions( editor );\n\n\t\tcomponentFactory.add( 'codeBlock', locale => {\n\t\t\tconst command = editor.commands.get( 'codeBlock' );\n\t\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\t\tconst splitButtonView = dropdownView.buttonView;\n\n\t\t\tsplitButtonView.set( {\n\t\t\t\tlabel: t( 'Insert code block' ),\n\t\t\t\ttooltip: true,\n\t\t\t\ticon: codeBlockIcon,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\tsplitButtonView.bind( 'isOn' ).to( command, 'value', value => !!value );\n\n\t\t\tsplitButtonView.on( 'execute', () => {\n\t\t\t\teditor.execute( 'codeBlock', {\n\t\t\t\t\tusePreviousLanguageChoice: true\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tdropdownView.on( 'execute', evt => {\n\t\t\t\teditor.execute( 'codeBlock', {\n\t\t\t\t\tlanguage: evt.source._codeBlockLanguage,\n\t\t\t\t\tforceValue: true\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tdropdownView.class = 'ck-code-block-dropdown';\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\taddListToDropdown( dropdownView, this._getLanguageListItemDefinitions( normalizedLanguageDefs ) );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n\n\t/**\n\t * A helper returning a collection of the `codeBlock` dropdown items representing languages\n\t * available for the user to choose from.\n\t *\n\t * @private\n\t * @param {Array.<module:code-block/codeblock~CodeBlockLanguageDefinition>} normalizedLanguageDefs\n\t * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>}\n\t */\n\t_getLanguageListItemDefinitions( normalizedLanguageDefs ) {\n\t\tconst editor = this.editor;\n\t\tconst command = editor.commands.get( 'codeBlock' );\n\t\tconst itemDefinitions = new Collection();\n\n\t\tfor ( const languageDef of normalizedLanguageDefs ) {\n\t\t\tconst definition = {\n\t\t\t\ttype: 'button',\n\t\t\t\tmodel: new Model( {\n\t\t\t\t\t_codeBlockLanguage: languageDef.language,\n\t\t\t\t\tlabel: languageDef.label,\n\t\t\t\t\twithText: true\n\t\t\t\t} )\n\t\t\t};\n\n\t\t\tdefinition.model.bind( 'isOn' ).to( command, 'value', value => {\n\t\t\t\treturn value === definition.model._codeBlockLanguage;\n\t\t\t} );\n\n\t\t\titemDefinitions.add( definition );\n\t\t}\n\n\t\treturn itemDefinitions;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}