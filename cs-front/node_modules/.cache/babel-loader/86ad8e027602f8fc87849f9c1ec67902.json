{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removerowcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { getRowIndexes, getSelectionAffectedTableCells } from '../utils/selection';\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableRow' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class RemoveRowCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const selectedCells = getSelectionAffectedTableCells(this.editor.model.document.selection);\n    const firstCell = selectedCells[0];\n\n    if (firstCell) {\n      const table = firstCell.findAncestor('table');\n      const tableRowCount = this.editor.plugins.get('TableUtils').getRows(table);\n      const lastRowIndex = tableRowCount - 1;\n      const selectedRowIndexes = getRowIndexes(selectedCells);\n      const areAllRowsSelected = selectedRowIndexes.first === 0 && selectedRowIndexes.last === lastRowIndex; // Disallow selecting whole table -> delete whole table should be used instead.\n\n      this.isEnabled = !areAllRowsSelected;\n    } else {\n      this.isEnabled = false;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const referenceCells = getSelectionAffectedTableCells(model.document.selection);\n    const removedRowIndexes = getRowIndexes(referenceCells);\n    const firstCell = referenceCells[0];\n    const table = firstCell.findAncestor('table');\n    const columnIndexToFocus = tableUtils.getCellLocation(firstCell).column;\n    model.change(writer => {\n      const rowsToRemove = removedRowIndexes.last - removedRowIndexes.first + 1;\n      tableUtils.removeRows(table, {\n        at: removedRowIndexes.first,\n        rows: rowsToRemove\n      });\n      const cellToFocus = getCellToFocus(table, removedRowIndexes.first, columnIndexToFocus, tableUtils.getRows(table));\n      writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n    });\n  }\n\n} // Returns a cell that should be focused before removing the row, belonging to the same column as the currently focused cell.\n// * If the row was not the last one, the cell to focus will be in the row that followed it (before removal).\n// * If the row was the last one, the cell to focus will be in the row that preceded it (before removal).\n\nfunction getCellToFocus(table, removedRowIndex, columnToFocus, tableRowCount) {\n  // Don't go beyond last row's index.\n  const row = table.getChild(Math.min(removedRowIndex, tableRowCount - 1)); // Default to first table cell.\n\n  let cellToFocus = row.getChild(0);\n  let column = 0;\n\n  for (const tableCell of row.getChildren()) {\n    if (column > columnToFocus) {\n      return cellToFocus;\n    }\n\n    cellToFocus = tableCell;\n    column += parseInt(tableCell.getAttribute('colspan') || 1);\n  }\n\n  return cellToFocus;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/commands/removerowcommand.js"],"names":["Command","getRowIndexes","getSelectionAffectedTableCells","RemoveRowCommand","refresh","selectedCells","editor","model","document","selection","firstCell","table","findAncestor","tableRowCount","plugins","get","getRows","lastRowIndex","selectedRowIndexes","areAllRowsSelected","first","last","isEnabled","execute","tableUtils","referenceCells","removedRowIndexes","columnIndexToFocus","getCellLocation","column","change","writer","rowsToRemove","removeRows","at","rows","cellToFocus","getCellToFocus","setSelection","createPositionAt","removedRowIndex","columnToFocus","row","getChild","Math","min","tableCell","getChildren","parseInt","getAttribute"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,SAASC,aAAT,EAAwBC,8BAAxB,QAA8D,oBAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BH,OAA/B,CAAuC;AACrD;AACD;AACA;AACCI,EAAAA,OAAO,GAAG;AACT,UAAMC,aAAa,GAAGH,8BAA8B,CAAE,KAAKI,MAAL,CAAYC,KAAZ,CAAkBC,QAAlB,CAA2BC,SAA7B,CAApD;AACA,UAAMC,SAAS,GAAGL,aAAa,CAAE,CAAF,CAA/B;;AAEA,QAAKK,SAAL,EAAiB;AAChB,YAAMC,KAAK,GAAGD,SAAS,CAACE,YAAV,CAAwB,OAAxB,CAAd;AACA,YAAMC,aAAa,GAAG,KAAKP,MAAL,CAAYQ,OAAZ,CAAoBC,GAApB,CAAyB,YAAzB,EAAwCC,OAAxC,CAAiDL,KAAjD,CAAtB;AACA,YAAMM,YAAY,GAAGJ,aAAa,GAAG,CAArC;AAEA,YAAMK,kBAAkB,GAAGjB,aAAa,CAAEI,aAAF,CAAxC;AAEA,YAAMc,kBAAkB,GAAGD,kBAAkB,CAACE,KAAnB,KAA6B,CAA7B,IAAkCF,kBAAkB,CAACG,IAAnB,KAA4BJ,YAAzF,CAPgB,CAShB;;AACA,WAAKK,SAAL,GAAiB,CAACH,kBAAlB;AACA,KAXD,MAWO;AACN,WAAKG,SAAL,GAAiB,KAAjB;AACA;AACD;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMhB,KAAK,GAAG,KAAKD,MAAL,CAAYC,KAA1B;AACA,UAAMiB,UAAU,GAAG,KAAKlB,MAAL,CAAYQ,OAAZ,CAAoBC,GAApB,CAAyB,YAAzB,CAAnB;AAEA,UAAMU,cAAc,GAAGvB,8BAA8B,CAAEK,KAAK,CAACC,QAAN,CAAeC,SAAjB,CAArD;AACA,UAAMiB,iBAAiB,GAAGzB,aAAa,CAAEwB,cAAF,CAAvC;AAEA,UAAMf,SAAS,GAAGe,cAAc,CAAE,CAAF,CAAhC;AACA,UAAMd,KAAK,GAAGD,SAAS,CAACE,YAAV,CAAwB,OAAxB,CAAd;AAEA,UAAMe,kBAAkB,GAAGH,UAAU,CAACI,eAAX,CAA4BlB,SAA5B,EAAwCmB,MAAnE;AAEAtB,IAAAA,KAAK,CAACuB,MAAN,CAAcC,MAAM,IAAI;AACvB,YAAMC,YAAY,GAAGN,iBAAiB,CAACL,IAAlB,GAAyBK,iBAAiB,CAACN,KAA3C,GAAmD,CAAxE;AAEAI,MAAAA,UAAU,CAACS,UAAX,CAAuBtB,KAAvB,EAA8B;AAC7BuB,QAAAA,EAAE,EAAER,iBAAiB,CAACN,KADO;AAE7Be,QAAAA,IAAI,EAAEH;AAFuB,OAA9B;AAKA,YAAMI,WAAW,GAAGC,cAAc,CAAE1B,KAAF,EAASe,iBAAiB,CAACN,KAA3B,EAAkCO,kBAAlC,EAAsDH,UAAU,CAACR,OAAX,CAAoBL,KAApB,CAAtD,CAAlC;AAEAoB,MAAAA,MAAM,CAACO,YAAP,CAAqBP,MAAM,CAACQ,gBAAP,CAAyBH,WAAzB,EAAsC,CAAtC,CAArB;AACA,KAXD;AAYA;;AAnDoD,C,CAsDtD;AACA;AACA;;AACA,SAASC,cAAT,CAAyB1B,KAAzB,EAAgC6B,eAAhC,EAAiDC,aAAjD,EAAgE5B,aAAhE,EAAgF;AAC/E;AACA,QAAM6B,GAAG,GAAG/B,KAAK,CAACgC,QAAN,CAAgBC,IAAI,CAACC,GAAL,CAAUL,eAAV,EAA2B3B,aAAa,GAAG,CAA3C,CAAhB,CAAZ,CAF+E,CAI/E;;AACA,MAAIuB,WAAW,GAAGM,GAAG,CAACC,QAAJ,CAAc,CAAd,CAAlB;AACA,MAAId,MAAM,GAAG,CAAb;;AAEA,OAAM,MAAMiB,SAAZ,IAAyBJ,GAAG,CAACK,WAAJ,EAAzB,EAA6C;AAC5C,QAAKlB,MAAM,GAAGY,aAAd,EAA8B;AAC7B,aAAOL,WAAP;AACA;;AAEDA,IAAAA,WAAW,GAAGU,SAAd;AACAjB,IAAAA,MAAM,IAAImB,QAAQ,CAAEF,SAAS,CAACG,YAAV,CAAwB,SAAxB,KAAuC,CAAzC,CAAlB;AACA;;AAED,SAAOb,WAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removerowcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\nimport { getRowIndexes, getSelectionAffectedTableCells } from '../utils/selection';\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableRow' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selectedCells = getSelectionAffectedTableCells( this.editor.model.document.selection );\n\t\tconst firstCell = selectedCells[ 0 ];\n\n\t\tif ( firstCell ) {\n\t\t\tconst table = firstCell.findAncestor( 'table' );\n\t\t\tconst tableRowCount = this.editor.plugins.get( 'TableUtils' ).getRows( table );\n\t\t\tconst lastRowIndex = tableRowCount - 1;\n\n\t\t\tconst selectedRowIndexes = getRowIndexes( selectedCells );\n\n\t\t\tconst areAllRowsSelected = selectedRowIndexes.first === 0 && selectedRowIndexes.last === lastRowIndex;\n\n\t\t\t// Disallow selecting whole table -> delete whole table should be used instead.\n\t\t\tthis.isEnabled = !areAllRowsSelected;\n\t\t} else {\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst referenceCells = getSelectionAffectedTableCells( model.document.selection );\n\t\tconst removedRowIndexes = getRowIndexes( referenceCells );\n\n\t\tconst firstCell = referenceCells[ 0 ];\n\t\tconst table = firstCell.findAncestor( 'table' );\n\n\t\tconst columnIndexToFocus = tableUtils.getCellLocation( firstCell ).column;\n\n\t\tmodel.change( writer => {\n\t\t\tconst rowsToRemove = removedRowIndexes.last - removedRowIndexes.first + 1;\n\n\t\t\ttableUtils.removeRows( table, {\n\t\t\t\tat: removedRowIndexes.first,\n\t\t\t\trows: rowsToRemove\n\t\t\t} );\n\n\t\t\tconst cellToFocus = getCellToFocus( table, removedRowIndexes.first, columnIndexToFocus, tableUtils.getRows( table ) );\n\n\t\t\twriter.setSelection( writer.createPositionAt( cellToFocus, 0 ) );\n\t\t} );\n\t}\n}\n\n// Returns a cell that should be focused before removing the row, belonging to the same column as the currently focused cell.\n// * If the row was not the last one, the cell to focus will be in the row that followed it (before removal).\n// * If the row was the last one, the cell to focus will be in the row that preceded it (before removal).\nfunction getCellToFocus( table, removedRowIndex, columnToFocus, tableRowCount ) {\n\t// Don't go beyond last row's index.\n\tconst row = table.getChild( Math.min( removedRowIndex, tableRowCount - 1 ) );\n\n\t// Default to first table cell.\n\tlet cellToFocus = row.getChild( 0 );\n\tlet column = 0;\n\n\tfor ( const tableCell of row.getChildren() ) {\n\t\tif ( column > columnToFocus ) {\n\t\t\treturn cellToFocus;\n\t\t}\n\n\t\tcellToFocus = tableCell;\n\t\tcolumn += parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\t}\n\n\treturn cellToFocus;\n}\n"]},"metadata":{},"sourceType":"module"}