{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils/table-properties\n */\nimport { isObject } from 'lodash-es';\n/**\n * Returns a string if all four values of box sides are equal.\n *\n * If a string is passed, it is treated as a single value (pass-through).\n *\n *\t\t// Returns 'foo':\n *\t\tgetSingleValue( { top: 'foo', right: 'foo', bottom: 'foo', left: 'foo' } );\n *\t\tgetSingleValue( 'foo' );\n *\n *\t\t// Returns undefined:\n *\t\tgetSingleValue( { top: 'foo', right: 'foo', bottom: 'bar', left: 'foo' } );\n *\t\tgetSingleValue( { top: 'foo', right: 'foo' } );\n *\n * @param objectOrString\n * @returns {module:engine/view/stylesmap~BoxSides|String}\n */\n\nexport function getSingleValue(objectOrString) {\n  if (!objectOrString || !isObject(objectOrString)) {\n    return objectOrString;\n  }\n\n  const {\n    top,\n    right,\n    bottom,\n    left\n  } = objectOrString;\n\n  if (top == right && right == bottom && bottom == left) {\n    return top;\n  }\n}\n/**\n * Adds a unit to a value if the value is a number or a string representing a number.\n *\n * **Note**: It does nothing to non-numeric values.\n *\n *\t\tgetSingleValue( 25, 'px' );\t\t// '25px'\n *\t\tgetSingleValue( 25, 'em' );\t\t// '25em'\n *\t\tgetSingleValue( '25em', 'px' );\t// '25em'\n *\t\tgetSingleValue( 'foo', 'px' );\t// 'foo'\n *\n * @param {*} value\n * @param {String} defaultUnit A default unit added to a numeric value.\n * @returns {String|*}\n */\n\nexport function addDefaultUnitToNumericValue(value, defaultUnit) {\n  const numericValue = parseFloat(value);\n\n  if (Number.isNaN(numericValue)) {\n    return value;\n  }\n\n  if (String(numericValue) !== String(value)) {\n    return value;\n  }\n\n  return `${numericValue}${defaultUnit}`;\n}\n/**\n * Returns the normalized configuration.\n *\n * @param {Object} config\n * @param {Object} [options={}]\n * @param {Boolean} [options.includeAlignmentProperty=false] Whether the \"alignment\" property should be added.\n * @param {Boolean} [options.includePaddingProperty=false] Whether the \"padding\" property should be added.\n * @param {Boolean} [options.includeVerticalAlignmentProperty=false] Whether the \"verticalAlignment\" property should be added.\n * @param {Boolean} [options.includeHorizontalAlignmentProperty=false] Whether the \"horizontalAlignment\" property should be added.\n * @param {Boolean} [options.isRightToLeftContent=false] Whether the content is right-to-left.\n * @returns {Object}\n */\n\nexport function getNormalizedDefaultProperties(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const normalizedConfig = Object.assign({\n    borderStyle: 'none',\n    borderWidth: '',\n    borderColor: '',\n    backgroundColor: '',\n    width: '',\n    height: ''\n  }, config);\n\n  if (options.includeAlignmentProperty && !normalizedConfig.alignment) {\n    normalizedConfig.alignment = 'center';\n  }\n\n  if (options.includePaddingProperty && !normalizedConfig.padding) {\n    normalizedConfig.padding = '';\n  }\n\n  if (options.includeVerticalAlignmentProperty && !normalizedConfig.verticalAlignment) {\n    normalizedConfig.verticalAlignment = 'middle';\n  }\n\n  if (options.includeHorizontalAlignmentProperty && !normalizedConfig.horizontalAlignment) {\n    normalizedConfig.horizontalAlignment = options.isRightToLeftContent ? 'right' : 'left';\n  }\n\n  return normalizedConfig;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js"],"names":["isObject","getSingleValue","objectOrString","top","right","bottom","left","addDefaultUnitToNumericValue","value","defaultUnit","numericValue","parseFloat","Number","isNaN","String","getNormalizedDefaultProperties","config","options","normalizedConfig","Object","assign","borderStyle","borderWidth","borderColor","backgroundColor","width","height","includeAlignmentProperty","alignment","includePaddingProperty","padding","includeVerticalAlignmentProperty","verticalAlignment","includeHorizontalAlignmentProperty","horizontalAlignment","isRightToLeftContent"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,WAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAyBC,cAAzB,EAA0C;AAChD,MAAK,CAACA,cAAD,IAAmB,CAACF,QAAQ,CAAEE,cAAF,CAAjC,EAAsD;AACrD,WAAOA,cAAP;AACA;;AAED,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA;AAAtB,MAA+BJ,cAArC;;AAEA,MAAKC,GAAG,IAAIC,KAAP,IAAgBA,KAAK,IAAIC,MAAzB,IAAmCA,MAAM,IAAIC,IAAlD,EAAyD;AACxD,WAAOH,GAAP;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,4BAAT,CAAuCC,KAAvC,EAA8CC,WAA9C,EAA4D;AAClE,QAAMC,YAAY,GAAGC,UAAU,CAAEH,KAAF,CAA/B;;AAEA,MAAKI,MAAM,CAACC,KAAP,CAAcH,YAAd,CAAL,EAAoC;AACnC,WAAOF,KAAP;AACA;;AAED,MAAKM,MAAM,CAAEJ,YAAF,CAAN,KAA2BI,MAAM,CAAEN,KAAF,CAAtC,EAAkD;AACjD,WAAOA,KAAP;AACA;;AAED,SAAQ,GAAGE,YAAc,GAAGD,WAAa,EAAzC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,8BAAT,CAAyCC,MAAzC,EAAgE;AAAA,MAAfC,OAAe,uEAAL,EAAK;AACtE,QAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAe;AACvCC,IAAAA,WAAW,EAAE,MAD0B;AAEvCC,IAAAA,WAAW,EAAE,EAF0B;AAGvCC,IAAAA,WAAW,EAAE,EAH0B;AAIvCC,IAAAA,eAAe,EAAE,EAJsB;AAKvCC,IAAAA,KAAK,EAAE,EALgC;AAMvCC,IAAAA,MAAM,EAAE;AAN+B,GAAf,EAOtBV,MAPsB,CAAzB;;AASA,MAAKC,OAAO,CAACU,wBAAR,IAAoC,CAACT,gBAAgB,CAACU,SAA3D,EAAuE;AACtEV,IAAAA,gBAAgB,CAACU,SAAjB,GAA6B,QAA7B;AACA;;AAED,MAAKX,OAAO,CAACY,sBAAR,IAAkC,CAACX,gBAAgB,CAACY,OAAzD,EAAmE;AAClEZ,IAAAA,gBAAgB,CAACY,OAAjB,GAA2B,EAA3B;AACA;;AAED,MAAKb,OAAO,CAACc,gCAAR,IAA4C,CAACb,gBAAgB,CAACc,iBAAnE,EAAuF;AACtFd,IAAAA,gBAAgB,CAACc,iBAAjB,GAAqC,QAArC;AACA;;AAED,MAAKf,OAAO,CAACgB,kCAAR,IAA8C,CAACf,gBAAgB,CAACgB,mBAArE,EAA2F;AAC1FhB,IAAAA,gBAAgB,CAACgB,mBAAjB,GAAuCjB,OAAO,CAACkB,oBAAR,GAA+B,OAA/B,GAAyC,MAAhF;AACA;;AAED,SAAOjB,gBAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils/table-properties\n */\n\nimport { isObject } from 'lodash-es';\n\n/**\n * Returns a string if all four values of box sides are equal.\n *\n * If a string is passed, it is treated as a single value (pass-through).\n *\n *\t\t// Returns 'foo':\n *\t\tgetSingleValue( { top: 'foo', right: 'foo', bottom: 'foo', left: 'foo' } );\n *\t\tgetSingleValue( 'foo' );\n *\n *\t\t// Returns undefined:\n *\t\tgetSingleValue( { top: 'foo', right: 'foo', bottom: 'bar', left: 'foo' } );\n *\t\tgetSingleValue( { top: 'foo', right: 'foo' } );\n *\n * @param objectOrString\n * @returns {module:engine/view/stylesmap~BoxSides|String}\n */\nexport function getSingleValue( objectOrString ) {\n\tif ( !objectOrString || !isObject( objectOrString ) ) {\n\t\treturn objectOrString;\n\t}\n\n\tconst { top, right, bottom, left } = objectOrString;\n\n\tif ( top == right && right == bottom && bottom == left ) {\n\t\treturn top;\n\t}\n}\n\n/**\n * Adds a unit to a value if the value is a number or a string representing a number.\n *\n * **Note**: It does nothing to non-numeric values.\n *\n *\t\tgetSingleValue( 25, 'px' );\t\t// '25px'\n *\t\tgetSingleValue( 25, 'em' );\t\t// '25em'\n *\t\tgetSingleValue( '25em', 'px' );\t// '25em'\n *\t\tgetSingleValue( 'foo', 'px' );\t// 'foo'\n *\n * @param {*} value\n * @param {String} defaultUnit A default unit added to a numeric value.\n * @returns {String|*}\n */\nexport function addDefaultUnitToNumericValue( value, defaultUnit ) {\n\tconst numericValue = parseFloat( value );\n\n\tif ( Number.isNaN( numericValue ) ) {\n\t\treturn value;\n\t}\n\n\tif ( String( numericValue ) !== String( value ) ) {\n\t\treturn value;\n\t}\n\n\treturn `${ numericValue }${ defaultUnit }`;\n}\n\n/**\n * Returns the normalized configuration.\n *\n * @param {Object} config\n * @param {Object} [options={}]\n * @param {Boolean} [options.includeAlignmentProperty=false] Whether the \"alignment\" property should be added.\n * @param {Boolean} [options.includePaddingProperty=false] Whether the \"padding\" property should be added.\n * @param {Boolean} [options.includeVerticalAlignmentProperty=false] Whether the \"verticalAlignment\" property should be added.\n * @param {Boolean} [options.includeHorizontalAlignmentProperty=false] Whether the \"horizontalAlignment\" property should be added.\n * @param {Boolean} [options.isRightToLeftContent=false] Whether the content is right-to-left.\n * @returns {Object}\n */\nexport function getNormalizedDefaultProperties( config, options = {} ) {\n\tconst normalizedConfig = Object.assign( {\n\t\tborderStyle: 'none',\n\t\tborderWidth: '',\n\t\tborderColor: '',\n\t\tbackgroundColor: '',\n\t\twidth: '',\n\t\theight: ''\n\t}, config );\n\n\tif ( options.includeAlignmentProperty && !normalizedConfig.alignment ) {\n\t\tnormalizedConfig.alignment = 'center';\n\t}\n\n\tif ( options.includePaddingProperty && !normalizedConfig.padding ) {\n\t\tnormalizedConfig.padding = '';\n\t}\n\n\tif ( options.includeVerticalAlignmentProperty && !normalizedConfig.verticalAlignment ) {\n\t\tnormalizedConfig.verticalAlignment = 'middle';\n\t}\n\n\tif ( options.includeHorizontalAlignmentProperty && !normalizedConfig.horizontalAlignment ) {\n\t\tnormalizedConfig.horizontalAlignment = options.isRightToLeftContent ? 'right' : 'left';\n\t}\n\n\treturn normalizedConfig;\n}\n"]},"metadata":{},"sourceType":"module"}