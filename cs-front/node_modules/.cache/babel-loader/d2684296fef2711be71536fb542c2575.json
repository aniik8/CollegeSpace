{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableproperties/commands/tablepropertycommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The table cell attribute command.\n *\n * This command is a base command for other table property commands.\n *\n * @extends module:core/command~Command\n */\n\nexport default class TablePropertyCommand extends Command {\n  /**\n   * Creates a new `TablePropertyCommand` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor An editor in which this command will be used.\n   * @param {String} attributeName Table cell attribute name.\n   * @param {String} defaultValue The default value of the attribute.\n   */\n  constructor(editor, attributeName, defaultValue) {\n    super(editor);\n    /**\n     * The attribute that will be set by the command.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.attributeName = attributeName;\n    /**\n     * The default value for the attribute.\n     *\n     * @readonly\n     * @protected\n     * @member {String}\n     */\n\n    this._defaultValue = defaultValue;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n    const table = selection.getFirstPosition().findAncestor('table');\n    this.isEnabled = !!table;\n    this.value = this._getValue(table);\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} [options]\n   * @param {*} [options.value] If set, the command will set the attribute on the selected table.\n   * If not set, the command will remove the attribute from the selected table.\n   * @param {module:engine/model/batch~Batch} [options.batch] Pass the model batch instance to the command to aggregate changes,\n   * for example, to allow a single undo step for multiple executions.\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const {\n      value,\n      batch\n    } = options;\n    const table = selection.getFirstPosition().findAncestor('table');\n\n    const valueToSet = this._getValueToSet(value);\n\n    model.enqueueChange(batch || 'default', writer => {\n      if (valueToSet) {\n        writer.setAttribute(this.attributeName, valueToSet, table);\n      } else {\n        writer.removeAttribute(this.attributeName, table);\n      }\n    });\n  }\n  /**\n   * Returns the attribute value for a table.\n   *\n   * @param {module:engine/model/element~Element} table\n   * @returns {String|undefined}\n   * @private\n   */\n\n\n  _getValue(table) {\n    if (!table) {\n      return;\n    }\n\n    const value = table.getAttribute(this.attributeName);\n\n    if (value === this._defaultValue) {\n      return;\n    }\n\n    return value;\n  }\n  /**\n   * Returns the proper model value. It can be used to add a default unit to numeric values.\n   *\n   * @private\n   * @param {*} value\n   * @returns {*}\n   */\n\n\n  _getValueToSet(value) {\n    if (value === this._defaultValue) {\n      return;\n    }\n\n    return value;\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js"],"names":["Command","TablePropertyCommand","constructor","editor","attributeName","defaultValue","_defaultValue","refresh","selection","model","document","table","getFirstPosition","findAncestor","isEnabled","value","_getValue","execute","options","batch","valueToSet","_getValueToSet","enqueueChange","writer","setAttribute","removeAttribute","getAttribute"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,oBAAN,SAAmCD,OAAnC,CAA2C;AACzD;AACD;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,MAAF,EAAUC,aAAV,EAAyBC,YAAzB,EAAwC;AAClD,UAAOF,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,aAAL,GAAqBA,aAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKE,aAAL,GAAqBD,YAArB;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,OAAO,GAAG;AACT,UAAMJ,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMK,SAAS,GAAGL,MAAM,CAACM,KAAP,CAAaC,QAAb,CAAsBF,SAAxC;AAEA,UAAMG,KAAK,GAAGH,SAAS,CAACI,gBAAV,GAA6BC,YAA7B,CAA2C,OAA3C,CAAd;AAEA,SAAKC,SAAL,GAAiB,CAAC,CAACH,KAAnB;AACA,SAAKI,KAAL,GAAa,KAAKC,SAAL,CAAgBL,KAAhB,CAAb;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCM,EAAAA,OAAO,GAAiB;AAAA,QAAfC,OAAe,uEAAL,EAAK;AACvB,UAAMT,KAAK,GAAG,KAAKN,MAAL,CAAYM,KAA1B;AACA,UAAMD,SAAS,GAAGC,KAAK,CAACC,QAAN,CAAeF,SAAjC;AAEA,UAAM;AAAEO,MAAAA,KAAF;AAASI,MAAAA;AAAT,QAAmBD,OAAzB;AAEA,UAAMP,KAAK,GAAGH,SAAS,CAACI,gBAAV,GAA6BC,YAA7B,CAA2C,OAA3C,CAAd;;AACA,UAAMO,UAAU,GAAG,KAAKC,cAAL,CAAqBN,KAArB,CAAnB;;AAEAN,IAAAA,KAAK,CAACa,aAAN,CAAqBH,KAAK,IAAI,SAA9B,EAAyCI,MAAM,IAAI;AAClD,UAAKH,UAAL,EAAkB;AACjBG,QAAAA,MAAM,CAACC,YAAP,CAAqB,KAAKpB,aAA1B,EAAyCgB,UAAzC,EAAqDT,KAArD;AACA,OAFD,MAEO;AACNY,QAAAA,MAAM,CAACE,eAAP,CAAwB,KAAKrB,aAA7B,EAA4CO,KAA5C;AACA;AACD,KAND;AAOA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCK,EAAAA,SAAS,CAAEL,KAAF,EAAU;AAClB,QAAK,CAACA,KAAN,EAAc;AACb;AACA;;AAED,UAAMI,KAAK,GAAGJ,KAAK,CAACe,YAAN,CAAoB,KAAKtB,aAAzB,CAAd;;AAEA,QAAKW,KAAK,KAAK,KAAKT,aAApB,EAAoC;AACnC;AACA;;AAED,WAAOS,KAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCM,EAAAA,cAAc,CAAEN,KAAF,EAAU;AACvB,QAAKA,KAAK,KAAK,KAAKT,aAApB,EAAoC;AACnC;AACA;;AAED,WAAOS,KAAP;AACA;;AAxGwD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableproperties/commands/tablepropertycommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\n/**\n * The table cell attribute command.\n *\n * This command is a base command for other table property commands.\n *\n * @extends module:core/command~Command\n */\nexport default class TablePropertyCommand extends Command {\n\t/**\n\t * Creates a new `TablePropertyCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor An editor in which this command will be used.\n\t * @param {String} attributeName Table cell attribute name.\n\t * @param {String} defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor, attributeName, defaultValue ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The attribute that will be set by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attributeName = attributeName;\n\n\t\t/**\n\t\t * The default value for the attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {String}\n\t\t */\n\t\tthis._defaultValue = defaultValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\tconst table = selection.getFirstPosition().findAncestor( 'table' );\n\n\t\tthis.isEnabled = !!table;\n\t\tthis.value = this._getValue( table );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} [options]\n\t * @param {*} [options.value] If set, the command will set the attribute on the selected table.\n\t * If not set, the command will remove the attribute from the selected table.\n\t * @param {module:engine/model/batch~Batch} [options.batch] Pass the model batch instance to the command to aggregate changes,\n\t * for example, to allow a single undo step for multiple executions.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst { value, batch } = options;\n\n\t\tconst table = selection.getFirstPosition().findAncestor( 'table' );\n\t\tconst valueToSet = this._getValueToSet( value );\n\n\t\tmodel.enqueueChange( batch || 'default', writer => {\n\t\t\tif ( valueToSet ) {\n\t\t\t\twriter.setAttribute( this.attributeName, valueToSet, table );\n\t\t\t} else {\n\t\t\t\twriter.removeAttribute( this.attributeName, table );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the attribute value for a table.\n\t *\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {String|undefined}\n\t * @private\n\t */\n\t_getValue( table ) {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = table.getAttribute( this.attributeName );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t *\n\t * @private\n\t * @param {*} value\n\t * @returns {*}\n\t */\n\t_getValueToSet( value ) {\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}