{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/ui/findandreplaceformview\n */\nimport { View, ButtonView, FormHeaderView, LabeledFieldView, Model, FocusCycler, createLabeledInputText, submitHandler, ViewCollection, injectCssTransitionDisabler, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler, Collection, Rect } from 'ckeditor5/src/utils'; // See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\n\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/findandreplaceform.css'; // eslint-disable-next-line ckeditor5-rules/ckeditor-imports\n\nimport previousArrow from '@ckeditor/ckeditor5-ui/theme/icons/previous-arrow.svg';\nimport { icons } from 'ckeditor5/src/core';\n/**\n * The find and replace form view class.\n *\n * See {@link module:find-and-replace/ui/findandreplaceformview~FindAndReplaceFormView}.\n *\n * @extends module:ui/view~View\n */\n\nexport default class FindAndReplaceFormView extends View {\n  /**\n   * Creates a view of find and replace form.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   */\n  constructor(locale) {\n    super(locale);\n    const t = locale.t;\n    /**\n     * Stores the number of matched search results.\n     *\n     * @readonly\n     * @observable\n     * @member {Number} #matchCount\n     */\n\n    this.set('matchCount', 0);\n    /**\n     * The offset of currently highlighted search result in {@link #matchCount matched results}.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #highlightOffset\n     */\n\n    this.set('highlightOffset', 0);\n    /**\n     * `true` when the search params (find text, options) has been changed by the user since\n     * the last time find was executed. `false` otherwise.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isDirty\n     */\n\n    this.set('isDirty', false);\n    /**\n     * A live object with the aggregated `isEnabled` states of editor commands related to find and\n     * replace. For instance, it may look as follows:\n     *\n     *\t\t{\n     *\t\t\tfindNext: true,\n     *\t\t\tfindPrevious: true,\n     *\t\t\treplace: false,\n     *\t\t\treplaceAll: false\n     *\t\t}\n     *\n     * @protected\n     * @readonly\n     * @observable\n     * @member {Object} #_areCommandsEnabled\n     */\n\n    this.set('_areCommandsEnabled', {});\n    /**\n     * The content of the counter label displaying the index of the current highlighted match\n     * on top of the find input, for instance \"3 of 50\".\n     *\n     * @protected\n     * @readonly\n     * @observable\n     * @member {String} #_resultsCounterText\n     */\n\n    this.set('_resultsCounterText', '');\n    /**\n     * The flag reflecting the state of the \"Match case\" switch button in the search options\n     * dropdown.\n     *\n     * @protected\n     * @readonly\n     * @observable\n     * @member {Boolean} #_matchCase\n     */\n\n    this.set('_matchCase', false);\n    /**\n     * The flag reflecting the state of the \"Whole words only\" switch button in the search options\n     * dropdown.\n     *\n     * @protected\n     * @readonly\n     * @observable\n     * @member {Boolean} #_wholeWordsOnly\n     */\n\n    this.set('_wholeWordsOnly', false);\n    /**\n     * This flag is set `true` when some matches were found and the user didn't change the search\n     * params (text to find, options) yet. This is only possible immediately after hitting the \"Find\" button.\n     * `false` when there were no matches (see {@link #matchCount}) or the user changed the params (see {@link #isDirty}).\n     *\n     * It is used to control the enabled state of the replace UI (input and buttons); replacing text is only possible\n     * if this flag is `true`.\n     *\n     * @protected\n     * @readonly\n     * @observable\n     * @member {Boolean} #_searchResultsFound\n     */\n\n    this.bind('_searchResultsFound').to(this, 'matchCount', this, 'isDirty', (matchCount, isDirty) => {\n      return matchCount > 0 && !isDirty;\n    });\n    /**\n     * The find in text input view that stores the searched string.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n     */\n\n    this._findInputView = this._createInputField(t('Find in text…'));\n    /**\n     * The replace input view.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n     */\n\n    this._replaceInputView = this._createInputField(t('Replace with…'));\n    /**\n     * The find button view that initializes the search process.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this._findButtonView = this._createButton({\n      label: t('Find'),\n      class: 'ck-button-find ck-button-action',\n      withText: true\n    });\n    /**\n     * The find previous button view.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this._findPrevButtonView = this._createButton({\n      label: t('Previous result'),\n      class: 'ck-button-prev',\n      icon: previousArrow,\n      keystroke: 'Shift+F3',\n      tooltip: true\n    });\n    /**\n     * The find next button view.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this._findNextButtonView = this._createButton({\n      label: t('Next result'),\n      class: 'ck-button-next',\n      icon: previousArrow,\n      keystroke: 'F3',\n      tooltip: true\n    });\n    /**\n     * The find options dropdown.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n    this._optionsDropdown = this._createOptionsDropdown();\n    /**\n     * The replace button view.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this._replaceButtonView = this._createButton({\n      label: t('Replace'),\n      class: 'ck-button-replace',\n      withText: true\n    });\n    /**\n     * The replace all button view.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this._replaceAllButtonView = this._createButton({\n      label: t('Replace all'),\n      class: 'ck-button-replaceall',\n      withText: true\n    });\n    /**\n     * The fieldset aggregating the find UI.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/view/view~View}\n     */\n\n    this._findFieldsetView = this._createFindFieldset();\n    /**\n     * The fieldset aggregating the replace UI.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/view/view~View}\n     */\n\n    this._replaceFieldsetView = this._createReplaceFieldset();\n    /**\n     * Tracks information about the DOM focus in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this._focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @protected\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this._keystrokes = new KeystrokeHandler();\n    /**\n     * A collection of views that can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this._focusTracker,\n      keystrokeHandler: this._keystrokes,\n      actions: {\n        // Navigate form fields backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the <kbd>Tab</kbd> key.\n        focusNext: 'tab'\n      }\n    });\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-find-and-replace-form'],\n        tabindex: '-1'\n      },\n      children: [new FormHeaderView(locale, {\n        label: t('Find and replace')\n      }), this._findFieldsetView, this._replaceFieldsetView]\n    });\n    injectCssTransitionDisabler(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    submitHandler({\n      view: this\n    });\n\n    this._initFocusCycling();\n\n    this._initKeystrokeHandling();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    this._focusTracker.destroy();\n\n    this._keystrokes.destroy();\n  }\n  /**\n   * Focuses the fist {@link #_focusables} in the form.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Resets the form before re-appearing.\n   *\n   * It clears error messages, hides the match counter and disables the replace feature\n   * until the next hit of the \"Find\" button.\n   *\n   * **Note**: It does not reset inputs and options, though. This way the form works better in editors with\n   * disappearing toolbar (e.g. BalloonEditor): hiding the toolbar by accident (together with the find and replace UI)\n   * does not require filling the entire form again.\n   */\n\n\n  reset() {\n    this._findInputView.errorText = null;\n    this.isDirty = true;\n  }\n  /**\n   * Returns the value of the find input.\n   *\n   * @protected\n   * @returns {String}\n   */\n\n\n  get _textToFind() {\n    return this._findInputView.fieldView.element.value;\n  }\n  /**\n   * Returns the value of the replace input.\n   *\n   * @protected\n   * @returns {String}\n   */\n\n\n  get _textToReplace() {\n    return this._replaceInputView.fieldView.element.value;\n  }\n  /**\n   * Configures and returns the `<fieldset>` aggregating all find controls.\n   *\n   * @private\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createFindFieldset() {\n    const locale = this.locale;\n    const fieldsetView = new View(locale); // Typing in the find field invalidates all previous results (the form is \"dirty\").\n\n    this._findInputView.fieldView.on('input', () => {\n      this.isDirty = true;\n    });\n\n    this._findButtonView.on('execute', this._onFindButtonExecute.bind(this)); // Pressing prev/next buttons fires related event on the form.\n\n\n    this._findPrevButtonView.delegate('execute').to(this, 'findPrevious');\n\n    this._findNextButtonView.delegate('execute').to(this, 'findNext'); // Prev/next buttons will be disabled when related editor command gets disabled.\n\n\n    this._findPrevButtonView.bind('isEnabled').to(this, '_areCommandsEnabled', _ref => {\n      let {\n        findPrevious\n      } = _ref;\n      return findPrevious;\n    });\n\n    this._findNextButtonView.bind('isEnabled').to(this, '_areCommandsEnabled', _ref2 => {\n      let {\n        findNext\n      } = _ref2;\n      return findNext;\n    });\n\n    this._injectFindResultsCounter();\n\n    fieldsetView.setTemplate({\n      tag: 'fieldset',\n      attributes: {\n        class: ['ck', 'ck-find-and-replace-form__find']\n      },\n      children: [this._findInputView, this._findButtonView, this._findPrevButtonView, this._findNextButtonView]\n    });\n    return fieldsetView;\n  }\n  /**\n   * The action performed when the {@link #_findButtonView} is pressed.\n   *\n   * @private\n   */\n\n\n  _onFindButtonExecute() {\n    // When hitting \"Find\" in an empty input, an error should be displayed.\n    // Also, if the form was \"dirty\", it should remain so.\n    if (!this._textToFind) {\n      const t = this.t;\n      this._findInputView.errorText = t('Text to find must not be empty.');\n      return;\n    } // Hitting \"Find\" automatically clears the dirty state.\n\n\n    this.isDirty = false;\n    this.fire('findNext', {\n      searchText: this._textToFind,\n      matchCase: this._matchCase,\n      wholeWords: this._wholeWordsOnly\n    });\n  }\n  /**\n   * Configures an injects the find results counter displaying a \"N of M\" label of the {@link #_findInputView}.\n   *\n   * @private\n   */\n\n\n  _injectFindResultsCounter() {\n    const locale = this.locale;\n    const t = locale.t;\n    const bind = this.bindTemplate;\n    const resultsCounterView = new View(locale);\n    this.bind('_resultsCounterText').to(this, 'highlightOffset', this, 'matchCount', (highlightOffset, matchCount) => t('%0 of %1', [highlightOffset, matchCount]));\n    resultsCounterView.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-results-counter', // The counter only makes sense when the field text corresponds to search results in the editing.\n        bind.if('isDirty', 'ck-hidden')]\n      },\n      children: [{\n        text: bind.to('_resultsCounterText')\n      }]\n    }); // The whole idea is that when the text of the counter changes, its width also increases/decreases and\n    // it consumes more or less space over the input. The input, on the other hand, should adjust it's right\n    // padding so its *entire* text always remains visible and available to the user.\n\n    const updateFindInputPadding = () => {\n      const inputElement = this._findInputView.fieldView.element; // Don't adjust the padding if the input (also: counter) were not rendered or not inserted into DOM yet.\n\n      if (!inputElement || !inputElement.offsetParent) {\n        return;\n      }\n\n      const counterWidth = new Rect(resultsCounterView.element).width;\n      const paddingPropertyName = locale.uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n\n      if (!counterWidth) {\n        inputElement.style[paddingPropertyName] = null;\n      } else {\n        inputElement.style[paddingPropertyName] = `calc( 2 * var(--ck-spacing-standard) + ${counterWidth}px )`;\n      }\n    }; // Adjust the input padding when the text of the counter changes, for instance \"1 of 200\" is narrower than \"123 of 200\".\n    // Using \"low\" priority to let the text be set by the template binding first.\n\n\n    this.on('change:_resultsCounterText', updateFindInputPadding, {\n      priority: 'low'\n    }); // Adjust the input padding when the counter shows or hides. When hidden, there should be no padding. When it shows, the\n    // padding should be set according to the text of the counter.\n    // Using \"low\" priority to let the text be set by the template binding first.\n\n    this.on('change:isDirty', updateFindInputPadding, {\n      priority: 'low'\n    }); // Put the counter element next to the <input> in the find field.\n\n    this._findInputView.template.children[0].children.push(resultsCounterView);\n  }\n  /**\n   * Configures and returns the `<fieldset>` aggregating all replace controls.\n   *\n   * @private\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createReplaceFieldset() {\n    const locale = this.locale;\n    const t = locale.t;\n    const fieldsetView = new View(locale);\n\n    this._replaceButtonView.bind('isEnabled').to(this, '_areCommandsEnabled', this, '_searchResultsFound', (_ref3, resultsFound) => {\n      let {\n        replace\n      } = _ref3;\n      return replace && resultsFound;\n    });\n\n    this._replaceAllButtonView.bind('isEnabled').to(this, '_areCommandsEnabled', this, '_searchResultsFound', (_ref4, resultsFound) => {\n      let {\n        replaceAll\n      } = _ref4;\n      return replaceAll && resultsFound;\n    });\n\n    this._replaceInputView.bind('isEnabled').to(this, '_areCommandsEnabled', this, '_searchResultsFound', (_ref5, resultsFound) => {\n      let {\n        replace\n      } = _ref5;\n      return replace && resultsFound;\n    });\n\n    this._replaceInputView.bind('infoText').to(this._replaceInputView, 'isEnabled', this._replaceInputView, 'isFocused', (isEnabled, isFocused) => {\n      if (isEnabled || !isFocused) {\n        return '';\n      }\n\n      return t('Tip: Find some text first in order to replace it.');\n    });\n\n    this._replaceButtonView.on('execute', () => {\n      this.fire('replace', {\n        searchText: this._textToFind,\n        replaceText: this._textToReplace\n      });\n    });\n\n    this._replaceAllButtonView.on('execute', () => {\n      this.fire('replaceAll', {\n        searchText: this._textToFind,\n        replaceText: this._textToReplace\n      });\n      this.focus();\n    });\n\n    fieldsetView.setTemplate({\n      tag: 'fieldset',\n      attributes: {\n        class: ['ck', 'ck-find-and-replace-form__replace']\n      },\n      children: [this._replaceInputView, this._optionsDropdown, this._replaceButtonView, this._replaceAllButtonView]\n    });\n    return fieldsetView;\n  }\n  /**\n   * Creates, configures and returns and instance of a dropdown allowing users to narrow\n   * the search criteria down. The dropdown has a list with switch buttons for each option.\n   *\n   * @private\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n\n\n  _createOptionsDropdown() {\n    const locale = this.locale;\n    const t = locale.t;\n    const dropdownView = createDropdown(locale);\n    dropdownView.class = 'ck-options-dropdown';\n    dropdownView.buttonView.set({\n      withText: false,\n      label: t('Show options'),\n      icon: icons.cog,\n      tooltip: true\n    });\n    const matchCaseModel = new Model({\n      withText: true,\n      label: t('Match case'),\n      // A dummy read-only prop to make it easy to tell which switch was toggled.\n      _isMatchCaseSwitch: true\n    });\n    const wholeWordsOnlyModel = new Model({\n      withText: true,\n      label: t('Whole words only')\n    }); // Let the switches be controlled by form's observable properties.\n\n    matchCaseModel.bind('isOn').to(this, '_matchCase');\n    wholeWordsOnlyModel.bind('isOn').to(this, '_wholeWordsOnly'); // Update the state of the form when a switch is toggled.\n\n    dropdownView.on('execute', evt => {\n      if (evt.source._isMatchCaseSwitch) {\n        this._matchCase = !this._matchCase;\n      } else {\n        this._wholeWordsOnly = !this._wholeWordsOnly;\n      } // Toggling a switch makes the form dirty because this changes search criteria\n      // just like typing text of the find input.\n\n\n      this.isDirty = true;\n    });\n    addListToDropdown(dropdownView, new Collection([{\n      type: 'switchbutton',\n      model: matchCaseModel\n    }, {\n      type: 'switchbutton',\n      model: wholeWordsOnlyModel\n    }]));\n    return dropdownView;\n  }\n  /**\n   * Initializes the {@link #_focusables} and {@link #_focusTracker} to allow navigation\n   * using <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keystrokes in the right order.\n   *\n   * @private\n   */\n\n\n  _initFocusCycling() {\n    const childViews = [this._findInputView, this._findButtonView, this._findPrevButtonView, this._findNextButtonView, this._replaceInputView, this._optionsDropdown, this._replaceButtonView, this._replaceAllButtonView];\n    childViews.forEach(v => {\n      // Register the view as focusable.\n      this._focusables.add(v); // Register the view in the focus tracker.\n\n\n      this._focusTracker.add(v.element);\n    });\n  }\n  /**\n   * Initializes the keystroke handling in the form.\n   *\n   * @private\n   */\n\n\n  _initKeystrokeHandling() {\n    const stopPropagation = data => data.stopPropagation();\n\n    const stopPropagationAndPreventDefault = data => {\n      data.stopPropagation();\n      data.preventDefault();\n    }; // Start listening for the keystrokes coming from #element.\n\n\n    this._keystrokes.listenTo(this.element); // Find the next result upon F3.\n\n\n    this._keystrokes.set('f3', event => {\n      stopPropagationAndPreventDefault(event);\n\n      this._findNextButtonView.fire('execute');\n    }); // Find the previous result upon F3.\n\n\n    this._keystrokes.set('shift+f3', event => {\n      stopPropagationAndPreventDefault(event);\n\n      this._findPrevButtonView.fire('execute');\n    }); // Find or replace upon pressing Enter in the find and replace fields.\n\n\n    this._keystrokes.set('enter', event => {\n      const target = event.target;\n\n      if (target === this._findInputView.fieldView.element) {\n        if (this._areCommandsEnabled.findNext) {\n          this._findNextButtonView.fire('execute');\n        } else {\n          this._findButtonView.fire('execute');\n        }\n\n        stopPropagationAndPreventDefault(event);\n      } else if (target === this._replaceInputView.fieldView.element && !this.isDirty) {\n        this._replaceButtonView.fire('execute');\n\n        stopPropagationAndPreventDefault(event);\n      }\n    }); // Find previous upon pressing Shift+Enter in the find field.\n\n\n    this._keystrokes.set('shift+enter', event => {\n      const target = event.target;\n\n      if (target !== this._findInputView.fieldView.element) {\n        return;\n      }\n\n      if (this._areCommandsEnabled.findPrevious) {\n        this._findPrevButtonView.fire('execute');\n      } else {\n        this._findButtonView.fire('execute');\n      }\n\n      stopPropagationAndPreventDefault(event);\n    }); // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n    // keystroke handler would take over the key management in the URL input.\n    // We need to prevent this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\n\n    this._keystrokes.set('arrowright', stopPropagation);\n\n    this._keystrokes.set('arrowleft', stopPropagation);\n\n    this._keystrokes.set('arrowup', stopPropagation);\n\n    this._keystrokes.set('arrowdown', stopPropagation); // Intercept the `selectstart` event, which is blocked by default because of the default behavior\n    // of the DropdownView#panelView. This blocking prevents the native select all on Ctrl+A.\n\n\n    this.listenTo(this._findInputView.element, 'selectstart', (evt, domEvt) => {\n      domEvt.stopPropagation();\n    }, {\n      priority: 'high'\n    });\n    this.listenTo(this._replaceInputView.element, 'selectstart', (evt, domEvt) => {\n      domEvt.stopPropagation();\n    }, {\n      priority: 'high'\n    });\n  }\n  /**\n   * Creates a button view.\n   *\n   * @private\n   * @param {Object} options The properties of the `ButtonView`.\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n\n\n  _createButton(options) {\n    const button = new ButtonView(this.locale);\n    button.set(options);\n    return button;\n  }\n  /**\n   * Creates a labeled input view.\n   *\n   * @private\n   * @param {String} label The input label.\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} The labeled input view instance.\n   */\n\n\n  _createInputField(label) {\n    const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n    labeledInput.label = label;\n    return labeledInput;\n  }\n\n}\n/**\n * Fired when the find next button is triggered.\n *\n * @event findNext\n * @param {String} searchText Search text.\n */\n\n/**\n * Fired when the find previous button is triggered.\n *\n * @event findPrevious\n * @param {String} searchText Search text.\n */\n\n/**\n * Fired when the replace button is triggered.\n *\n * @event replace\n * @param {String} replaceText Replacement text.\n */\n\n/**\n * Fired when the replaceAll button is triggered.\n *\n * @event replaceAll\n * @param {String} replaceText Replacement text.\n */","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-find-and-replace/src/ui/findandreplaceformview.js"],"names":["View","ButtonView","FormHeaderView","LabeledFieldView","Model","FocusCycler","createLabeledInputText","submitHandler","ViewCollection","injectCssTransitionDisabler","createDropdown","addListToDropdown","FocusTracker","KeystrokeHandler","Collection","Rect","previousArrow","icons","FindAndReplaceFormView","constructor","locale","t","set","bind","to","matchCount","isDirty","_findInputView","_createInputField","_replaceInputView","_findButtonView","_createButton","label","class","withText","_findPrevButtonView","icon","keystroke","tooltip","_findNextButtonView","_optionsDropdown","_createOptionsDropdown","_replaceButtonView","_replaceAllButtonView","_findFieldsetView","_createFindFieldset","_replaceFieldsetView","_createReplaceFieldset","_focusTracker","_keystrokes","_focusables","_focusCycler","focusables","focusTracker","keystrokeHandler","actions","focusPrevious","focusNext","setTemplate","tag","attributes","tabindex","children","render","view","_initFocusCycling","_initKeystrokeHandling","destroy","focus","focusFirst","reset","errorText","_textToFind","fieldView","element","value","_textToReplace","fieldsetView","on","_onFindButtonExecute","delegate","findPrevious","findNext","_injectFindResultsCounter","fire","searchText","matchCase","_matchCase","wholeWords","_wholeWordsOnly","bindTemplate","resultsCounterView","highlightOffset","if","text","updateFindInputPadding","inputElement","offsetParent","counterWidth","width","paddingPropertyName","uiLanguageDirection","style","priority","template","push","resultsFound","replace","replaceAll","isEnabled","isFocused","replaceText","dropdownView","buttonView","cog","matchCaseModel","_isMatchCaseSwitch","wholeWordsOnlyModel","evt","source","type","model","childViews","forEach","v","add","stopPropagation","data","stopPropagationAndPreventDefault","preventDefault","listenTo","event","target","_areCommandsEnabled","domEvt","options","button","labeledInput"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SACCA,IADD,EAECC,UAFD,EAGCC,cAHD,EAICC,gBAJD,EAMCC,KAND,EAOCC,WAPD,EAQCC,sBARD,EASCC,aATD,EAUCC,cAVD,EAWCC,2BAXD,EAaCC,cAbD,EAcCC,iBAdD,QAeO,kBAfP;AAiBA,SACCC,YADD,EAECC,gBAFD,EAGCC,UAHD,EAICC,IAJD,QAKO,qBALP,C,CAOA;AACA;;AACA,OAAO,4EAAP;AACA,OAAO,oCAAP,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,uDAA1B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,sBAAN,SAAqClB,IAArC,CAA0C;AACxD;AACD;AACA;AACA;AACA;AACCmB,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA,UAAMC,CAAC,GAAGD,MAAM,CAACC,CAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,GAAL,CAAU,YAAV,EAAwB,CAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,iBAAV,EAA6B,CAA7B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,SAAV,EAAqB,KAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,qBAAV,EAAiC,EAAjC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,qBAAV,EAAiC,EAAjC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,YAAV,EAAwB,KAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,iBAAV,EAA6B,KAA7B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/ui/findandreplaceformview\n */\n\nimport {\n\tView,\n\tButtonView,\n\tFormHeaderView,\n\tLabeledFieldView,\n\n\tModel,\n\tFocusCycler,\n\tcreateLabeledInputText,\n\tsubmitHandler,\n\tViewCollection,\n\tinjectCssTransitionDisabler,\n\n\tcreateDropdown,\n\taddListToDropdown\n} from 'ckeditor5/src/ui';\n\nimport {\n\tFocusTracker,\n\tKeystrokeHandler,\n\tCollection,\n\tRect\n} from 'ckeditor5/src/utils';\n\n// See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/findandreplaceform.css';\n\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport previousArrow from '@ckeditor/ckeditor5-ui/theme/icons/previous-arrow.svg';\nimport { icons } from 'ckeditor5/src/core';\n\n/**\n * The find and replace form view class.\n *\n * See {@link module:find-and-replace/ui/findandreplaceformview~FindAndReplaceFormView}.\n *\n * @extends module:ui/view~View\n */\nexport default class FindAndReplaceFormView extends View {\n\t/**\n\t * Creates a view of find and replace form.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst t = locale.t;\n\n\t\t/**\n\t\t * Stores the number of matched search results.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #matchCount\n\t\t */\n\t\tthis.set( 'matchCount', 0 );\n\n\t\t/**\n\t\t * The offset of currently highlighted search result in {@link #matchCount matched results}.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #highlightOffset\n\t\t */\n\t\tthis.set( 'highlightOffset', 0 );\n\n\t\t/**\n\t\t * `true` when the search params (find text, options) has been changed by the user since\n\t\t * the last time find was executed. `false` otherwise.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isDirty\n\t\t */\n\t\tthis.set( 'isDirty', false );\n\n\t\t/**\n\t\t * A live object with the aggregated `isEnabled` states of editor commands related to find and\n\t\t * replace. For instance, it may look as follows:\n\t\t *\n\t\t *\t\t{\n\t\t *\t\t\tfindNext: true,\n\t\t *\t\t\tfindPrevious: true,\n\t\t *\t\t\treplace: false,\n\t\t *\t\t\treplaceAll: false\n\t\t *\t\t}\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Object} #_areCommandsEnabled\n\t\t */\n\t\tthis.set( '_areCommandsEnabled', {} );\n\n\t\t/**\n\t\t * The content of the counter label displaying the index of the current highlighted match\n\t\t * on top of the find input, for instance \"3 of 50\".\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #_resultsCounterText\n\t\t */\n\t\tthis.set( '_resultsCounterText', '' );\n\n\t\t/**\n\t\t * The flag reflecting the state of the \"Match case\" switch button in the search options\n\t\t * dropdown.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_matchCase\n\t\t */\n\t\tthis.set( '_matchCase', false );\n\n\t\t/**\n\t\t * The flag reflecting the state of the \"Whole words only\" switch button in the search options\n\t\t * dropdown.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_wholeWordsOnly\n\t\t */\n\t\tthis.set( '_wholeWordsOnly', false );\n\n\t\t/**\n\t\t * This flag is set `true` when some matches were found and the user didn't change the search\n\t\t * params (text to find, options) yet. This is only possible immediately after hitting the \"Find\" button.\n\t\t * `false` when there were no matches (see {@link #matchCount}) or the user changed the params (see {@link #isDirty}).\n\t\t *\n\t\t * It is used to control the enabled state of the replace UI (input and buttons); replacing text is only possible\n\t\t * if this flag is `true`.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_searchResultsFound\n\t\t */\n\t\tthis.bind( '_searchResultsFound' ).to(\n\t\t\tthis, 'matchCount',\n\t\t\tthis, 'isDirty',\n\t\t\t( matchCount, isDirty ) => {\n\t\t\t\treturn matchCount > 0 && !isDirty;\n\t\t\t}\n\t\t);\n\n\t\t/**\n\t\t * The find in text input view that stores the searched string.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n\t\t */\n\t\tthis._findInputView = this._createInputField( t( 'Find in text…' ) );\n\n\t\t/**\n\t\t * The replace input view.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n\t\t */\n\t\tthis._replaceInputView = this._createInputField( t( 'Replace with…' ) );\n\n\t\t/**\n\t\t * The find button view that initializes the search process.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis._findButtonView = this._createButton( {\n\t\t\tlabel: t( 'Find' ),\n\t\t\tclass: 'ck-button-find ck-button-action',\n\t\t\twithText: true\n\t\t} );\n\n\t\t/**\n\t\t * The find previous button view.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis._findPrevButtonView = this._createButton( {\n\t\t\tlabel: t( 'Previous result' ),\n\t\t\tclass: 'ck-button-prev',\n\t\t\ticon: previousArrow,\n\t\t\tkeystroke: 'Shift+F3',\n\t\t\ttooltip: true\n\t\t} );\n\n\t\t/**\n\t\t * The find next button view.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis._findNextButtonView = this._createButton( {\n\t\t\tlabel: t( 'Next result' ),\n\t\t\tclass: 'ck-button-next',\n\t\t\ticon: previousArrow,\n\t\t\tkeystroke: 'F3',\n\t\t\ttooltip: true\n\t\t} );\n\n\t\t/**\n\t\t * The find options dropdown.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis._optionsDropdown = this._createOptionsDropdown();\n\n\t\t/**\n\t\t * The replace button view.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis._replaceButtonView = this._createButton( {\n\t\t\tlabel: t( 'Replace' ),\n\t\t\tclass: 'ck-button-replace',\n\t\t\twithText: true\n\t\t} );\n\n\t\t/**\n\t\t * The replace all button view.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis._replaceAllButtonView = this._createButton( {\n\t\t\tlabel: t( 'Replace all' ),\n\t\t\tclass: 'ck-button-replaceall',\n\t\t\twithText: true\n\t\t} );\n\n\t\t/**\n\t\t * The fieldset aggregating the find UI.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/view/view~View}\n\t\t */\n\t\tthis._findFieldsetView = this._createFindFieldset();\n\n\t\t/**\n\t\t * The fieldset aggregating the replace UI.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/view/view~View}\n\t\t */\n\t\tthis._replaceFieldsetView = this._createReplaceFieldset();\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis._focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis._keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * A collection of views that can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._focusables = new ViewCollection();\n\n\t\t/**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this._focusTracker,\n\t\t\tkeystrokeHandler: this._keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the <kbd>Tab</kbd> key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-find-and-replace-form'\n\t\t\t\t],\n\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tnew FormHeaderView( locale, {\n\t\t\t\t\tlabel: t( 'Find and replace' )\n\t\t\t\t} ),\n\t\t\t\tthis._findFieldsetView,\n\t\t\t\tthis._replaceFieldsetView\n\t\t\t]\n\t\t} );\n\n\t\tinjectCssTransitionDisabler( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tsubmitHandler( { view: this } );\n\n\t\tthis._initFocusCycling();\n\t\tthis._initKeystrokeHandling();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._focusTracker.destroy();\n\t\tthis._keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist {@link #_focusables} in the form.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Resets the form before re-appearing.\n\t *\n\t * It clears error messages, hides the match counter and disables the replace feature\n\t * until the next hit of the \"Find\" button.\n\t *\n\t * **Note**: It does not reset inputs and options, though. This way the form works better in editors with\n\t * disappearing toolbar (e.g. BalloonEditor): hiding the toolbar by accident (together with the find and replace UI)\n\t * does not require filling the entire form again.\n\t */\n\treset() {\n\t\tthis._findInputView.errorText = null;\n\t\tthis.isDirty = true;\n\t}\n\n\t/**\n\t * Returns the value of the find input.\n\t *\n\t * @protected\n\t * @returns {String}\n\t */\n\tget _textToFind() {\n\t\treturn this._findInputView.fieldView.element.value;\n\t}\n\n\t/**\n\t * Returns the value of the replace input.\n\t *\n\t * @protected\n\t * @returns {String}\n\t */\n\tget _textToReplace() {\n\t\treturn this._replaceInputView.fieldView.element.value;\n\t}\n\n\t/**\n\t * Configures and returns the `<fieldset>` aggregating all find controls.\n\t *\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createFindFieldset() {\n\t\tconst locale = this.locale;\n\t\tconst fieldsetView = new View( locale );\n\n\t\t// Typing in the find field invalidates all previous results (the form is \"dirty\").\n\t\tthis._findInputView.fieldView.on( 'input', () => {\n\t\t\tthis.isDirty = true;\n\t\t} );\n\n\t\tthis._findButtonView.on( 'execute', this._onFindButtonExecute.bind( this ) );\n\n\t\t// Pressing prev/next buttons fires related event on the form.\n\t\tthis._findPrevButtonView.delegate( 'execute' ).to( this, 'findPrevious' );\n\t\tthis._findNextButtonView.delegate( 'execute' ).to( this, 'findNext' );\n\n\t\t// Prev/next buttons will be disabled when related editor command gets disabled.\n\t\tthis._findPrevButtonView.bind( 'isEnabled' ).to( this, '_areCommandsEnabled', ( { findPrevious } ) => findPrevious );\n\t\tthis._findNextButtonView.bind( 'isEnabled' ).to( this, '_areCommandsEnabled', ( { findNext } ) => findNext );\n\n\t\tthis._injectFindResultsCounter();\n\n\t\tfieldsetView.setTemplate( {\n\t\t\ttag: 'fieldset',\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck', 'ck-find-and-replace-form__find' ]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis._findInputView,\n\t\t\t\tthis._findButtonView,\n\t\t\t\tthis._findPrevButtonView,\n\t\t\t\tthis._findNextButtonView\n\t\t\t]\n\t\t} );\n\n\t\treturn fieldsetView;\n\t}\n\n\t/**\n\t * The action performed when the {@link #_findButtonView} is pressed.\n\t *\n\t * @private\n\t */\n\t_onFindButtonExecute() {\n\t\t// When hitting \"Find\" in an empty input, an error should be displayed.\n\t\t// Also, if the form was \"dirty\", it should remain so.\n\t\tif ( !this._textToFind ) {\n\t\t\tconst t = this.t;\n\n\t\t\tthis._findInputView.errorText = t( 'Text to find must not be empty.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Hitting \"Find\" automatically clears the dirty state.\n\t\tthis.isDirty = false;\n\n\t\tthis.fire( 'findNext', {\n\t\t\tsearchText: this._textToFind,\n\t\t\tmatchCase: this._matchCase,\n\t\t\twholeWords: this._wholeWordsOnly\n\t\t} );\n\t}\n\n\t/**\n\t * Configures an injects the find results counter displaying a \"N of M\" label of the {@link #_findInputView}.\n\t *\n\t * @private\n\t */\n\t_injectFindResultsCounter() {\n\t\tconst locale = this.locale;\n\t\tconst t = locale.t;\n\t\tconst bind = this.bindTemplate;\n\t\tconst resultsCounterView = new View( locale );\n\n\t\tthis.bind( '_resultsCounterText' ).to( this, 'highlightOffset', this, 'matchCount',\n\t\t\t( highlightOffset, matchCount ) => t( '%0 of %1', [ highlightOffset, matchCount ] )\n\t\t);\n\n\t\tresultsCounterView.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-results-counter',\n\t\t\t\t\t// The counter only makes sense when the field text corresponds to search results in the editing.\n\t\t\t\t\tbind.if( 'isDirty', 'ck-hidden' )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( '_resultsCounterText' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// The whole idea is that when the text of the counter changes, its width also increases/decreases and\n\t\t// it consumes more or less space over the input. The input, on the other hand, should adjust it's right\n\t\t// padding so its *entire* text always remains visible and available to the user.\n\t\tconst updateFindInputPadding = () => {\n\t\t\tconst inputElement = this._findInputView.fieldView.element;\n\n\t\t\t// Don't adjust the padding if the input (also: counter) were not rendered or not inserted into DOM yet.\n\t\t\tif ( !inputElement || !inputElement.offsetParent ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst counterWidth = new Rect( resultsCounterView.element ).width;\n\t\t\tconst paddingPropertyName = locale.uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n\n\t\t\tif ( !counterWidth ) {\n\t\t\t\tinputElement.style[ paddingPropertyName ] = null;\n\t\t\t} else {\n\t\t\t\tinputElement.style[ paddingPropertyName ] = `calc( 2 * var(--ck-spacing-standard) + ${ counterWidth }px )`;\n\t\t\t}\n\t\t};\n\n\t\t// Adjust the input padding when the text of the counter changes, for instance \"1 of 200\" is narrower than \"123 of 200\".\n\t\t// Using \"low\" priority to let the text be set by the template binding first.\n\t\tthis.on( 'change:_resultsCounterText', updateFindInputPadding, { priority: 'low' } );\n\n\t\t// Adjust the input padding when the counter shows or hides. When hidden, there should be no padding. When it shows, the\n\t\t// padding should be set according to the text of the counter.\n\t\t// Using \"low\" priority to let the text be set by the template binding first.\n\t\tthis.on( 'change:isDirty', updateFindInputPadding, { priority: 'low' } );\n\n\t\t// Put the counter element next to the <input> in the find field.\n\t\tthis._findInputView.template.children[ 0 ].children.push( resultsCounterView );\n\t}\n\n\t/**\n\t * Configures and returns the `<fieldset>` aggregating all replace controls.\n\t *\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createReplaceFieldset() {\n\t\tconst locale = this.locale;\n\t\tconst t = locale.t;\n\t\tconst fieldsetView = new View( locale );\n\n\t\tthis._replaceButtonView.bind( 'isEnabled' ).to(\n\t\t\tthis, '_areCommandsEnabled',\n\t\t\tthis, '_searchResultsFound',\n\t\t\t( { replace }, resultsFound ) => replace && resultsFound );\n\n\t\tthis._replaceAllButtonView.bind( 'isEnabled' ).to(\n\t\t\tthis, '_areCommandsEnabled',\n\t\t\tthis, '_searchResultsFound',\n\t\t\t( { replaceAll }, resultsFound ) => replaceAll && resultsFound );\n\n\t\tthis._replaceInputView.bind( 'isEnabled' ).to(\n\t\t\tthis, '_areCommandsEnabled',\n\t\t\tthis, '_searchResultsFound',\n\t\t\t( { replace }, resultsFound ) => replace && resultsFound );\n\n\t\tthis._replaceInputView.bind( 'infoText' ).to(\n\t\t\tthis._replaceInputView, 'isEnabled',\n\t\t\tthis._replaceInputView, 'isFocused',\n\t\t\t( isEnabled, isFocused ) => {\n\t\t\t\tif ( isEnabled || !isFocused ) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\n\t\t\t\treturn t( 'Tip: Find some text first in order to replace it.' );\n\t\t\t} );\n\n\t\tthis._replaceButtonView.on( 'execute', () => {\n\t\t\tthis.fire( 'replace', {\n\t\t\t\tsearchText: this._textToFind,\n\t\t\t\treplaceText: this._textToReplace\n\t\t\t} );\n\t\t} );\n\n\t\tthis._replaceAllButtonView.on( 'execute', () => {\n\t\t\tthis.fire( 'replaceAll', {\n\t\t\t\tsearchText: this._textToFind,\n\t\t\t\treplaceText: this._textToReplace\n\t\t\t} );\n\n\t\t\tthis.focus();\n\t\t} );\n\n\t\tfieldsetView.setTemplate( {\n\t\t\ttag: 'fieldset',\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck', 'ck-find-and-replace-form__replace' ]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis._replaceInputView,\n\t\t\t\tthis._optionsDropdown,\n\t\t\t\tthis._replaceButtonView,\n\t\t\t\tthis._replaceAllButtonView\n\t\t\t]\n\t\t} );\n\n\t\treturn fieldsetView;\n\t}\n\n\t/**\n\t * Creates, configures and returns and instance of a dropdown allowing users to narrow\n\t * the search criteria down. The dropdown has a list with switch buttons for each option.\n\t *\n\t * @private\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createOptionsDropdown() {\n\t\tconst locale = this.locale;\n\t\tconst t = locale.t;\n\t\tconst dropdownView = createDropdown( locale );\n\n\t\tdropdownView.class = 'ck-options-dropdown';\n\n\t\tdropdownView.buttonView.set( {\n\t\t\twithText: false,\n\t\t\tlabel: t( 'Show options' ),\n\t\t\ticon: icons.cog,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\tconst matchCaseModel = new Model( {\n\t\t\twithText: true,\n\t\t\tlabel: t( 'Match case' ),\n\n\t\t\t// A dummy read-only prop to make it easy to tell which switch was toggled.\n\t\t\t_isMatchCaseSwitch: true\n\t\t} );\n\n\t\tconst wholeWordsOnlyModel = new Model( {\n\t\t\twithText: true,\n\t\t\tlabel: t( 'Whole words only' )\n\t\t} );\n\n\t\t// Let the switches be controlled by form's observable properties.\n\t\tmatchCaseModel.bind( 'isOn' ).to( this, '_matchCase' );\n\t\twholeWordsOnlyModel.bind( 'isOn' ).to( this, '_wholeWordsOnly' );\n\n\t\t// Update the state of the form when a switch is toggled.\n\t\tdropdownView.on( 'execute', evt => {\n\t\t\tif ( evt.source._isMatchCaseSwitch ) {\n\t\t\t\tthis._matchCase = !this._matchCase;\n\t\t\t} else {\n\t\t\t\tthis._wholeWordsOnly = !this._wholeWordsOnly;\n\t\t\t}\n\n\t\t\t// Toggling a switch makes the form dirty because this changes search criteria\n\t\t\t// just like typing text of the find input.\n\t\t\tthis.isDirty = true;\n\t\t} );\n\n\t\taddListToDropdown( dropdownView, new Collection( [\n\t\t\t{ type: 'switchbutton', model: matchCaseModel },\n\t\t\t{ type: 'switchbutton', model: wholeWordsOnlyModel }\n\t\t] ) );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Initializes the {@link #_focusables} and {@link #_focusTracker} to allow navigation\n\t * using <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keystrokes in the right order.\n\t *\n\t * @private\n\t */\n\t_initFocusCycling() {\n\t\tconst childViews = [\n\t\t\tthis._findInputView,\n\t\t\tthis._findButtonView,\n\t\t\tthis._findPrevButtonView,\n\t\t\tthis._findNextButtonView,\n\t\t\tthis._replaceInputView,\n\t\t\tthis._optionsDropdown,\n\t\t\tthis._replaceButtonView,\n\t\t\tthis._replaceAllButtonView\n\t\t];\n\n\t\tchildViews.forEach( v => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( v );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis._focusTracker.add( v.element );\n\t\t} );\n\t}\n\n\t/**\n\t * Initializes the keystroke handling in the form.\n\t *\n\t * @private\n\t */\n\t_initKeystrokeHandling() {\n\t\tconst stopPropagation = data => data.stopPropagation();\n\t\tconst stopPropagationAndPreventDefault = data => {\n\t\t\tdata.stopPropagation();\n\t\t\tdata.preventDefault();\n\t\t};\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis._keystrokes.listenTo( this.element );\n\n\t\t// Find the next result upon F3.\n\t\tthis._keystrokes.set( 'f3', event => {\n\t\t\tstopPropagationAndPreventDefault( event );\n\n\t\t\tthis._findNextButtonView.fire( 'execute' );\n\t\t} );\n\n\t\t// Find the previous result upon F3.\n\t\tthis._keystrokes.set( 'shift+f3', event => {\n\t\t\tstopPropagationAndPreventDefault( event );\n\n\t\t\tthis._findPrevButtonView.fire( 'execute' );\n\t\t} );\n\n\t\t// Find or replace upon pressing Enter in the find and replace fields.\n\t\tthis._keystrokes.set( 'enter', event => {\n\t\t\tconst target = event.target;\n\n\t\t\tif ( target === this._findInputView.fieldView.element ) {\n\t\t\t\tif ( this._areCommandsEnabled.findNext ) {\n\t\t\t\t\tthis._findNextButtonView.fire( 'execute' );\n\t\t\t\t} else {\n\t\t\t\t\tthis._findButtonView.fire( 'execute' );\n\t\t\t\t}\n\t\t\t\tstopPropagationAndPreventDefault( event );\n\t\t\t} else if ( target === this._replaceInputView.fieldView.element && !this.isDirty ) {\n\t\t\t\tthis._replaceButtonView.fire( 'execute' );\n\t\t\t\tstopPropagationAndPreventDefault( event );\n\t\t\t}\n\t\t} );\n\n\t\t// Find previous upon pressing Shift+Enter in the find field.\n\t\tthis._keystrokes.set( 'shift+enter', event => {\n\t\t\tconst target = event.target;\n\n\t\t\tif ( target !== this._findInputView.fieldView.element ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this._areCommandsEnabled.findPrevious ) {\n\t\t\t\tthis._findPrevButtonView.fire( 'execute' );\n\t\t\t} else {\n\t\t\t\tthis._findButtonView.fire( 'execute' );\n\t\t\t}\n\n\t\t\tstopPropagationAndPreventDefault( event );\n\t\t} );\n\n\t\t// Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n\t\t// keystroke handler would take over the key management in the URL input.\n\t\t// We need to prevent this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\t\tthis._keystrokes.set( 'arrowright', stopPropagation );\n\t\tthis._keystrokes.set( 'arrowleft', stopPropagation );\n\t\tthis._keystrokes.set( 'arrowup', stopPropagation );\n\t\tthis._keystrokes.set( 'arrowdown', stopPropagation );\n\n\t\t// Intercept the `selectstart` event, which is blocked by default because of the default behavior\n\t\t// of the DropdownView#panelView. This blocking prevents the native select all on Ctrl+A.\n\t\tthis.listenTo( this._findInputView.element, 'selectstart', ( evt, domEvt ) => {\n\t\t\tdomEvt.stopPropagation();\n\t\t}, { priority: 'high' } );\n\n\t\tthis.listenTo( this._replaceInputView.element, 'selectstart', ( evt, domEvt ) => {\n\t\t\tdomEvt.stopPropagation();\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {Object} options The properties of the `ButtonView`.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n\t_createButton( options ) {\n\t\tconst button = new ButtonView( this.locale );\n\n\t\tbutton.set( options );\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * Creates a labeled input view.\n\t *\n\t * @private\n\t * @param {String} label The input label.\n\t * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} The labeled input view instance.\n\t */\n\t_createInputField( label ) {\n\t\tconst labeledInput = new LabeledFieldView( this.locale, createLabeledInputText );\n\n\t\tlabeledInput.label = label;\n\n\t\treturn labeledInput;\n\t}\n}\n\n/**\n * Fired when the find next button is triggered.\n *\n * @event findNext\n * @param {String} searchText Search text.\n */\n\n/**\n * Fired when the find previous button is triggered.\n *\n * @event findPrevious\n * @param {String} searchText Search text.\n */\n\n/**\n * Fired when the replace button is triggered.\n *\n * @event replace\n * @param {String} replaceText Replacement text.\n */\n\n/**\n * Fired when the replaceAll button is triggered.\n *\n * @event replaceAll\n * @param {String} replaceText Replacement text.\n */\n"]},"metadata":{},"sourceType":"module"}