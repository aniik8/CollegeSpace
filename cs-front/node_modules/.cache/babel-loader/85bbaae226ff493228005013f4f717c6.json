{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/selectcolumncommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport TableWalker from '../tablewalker';\nimport { getSelectionAffectedTableCells } from '../utils/selection';\n/**\n * The select column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableColumn'` editor command.\n *\n * To select the columns containing the selected cells, execute the command:\n *\n *\t\teditor.execute( 'selectTableColumn' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class SelectColumnCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor); // It does not affect data so should be enabled in read-only mode.\n\n    this.affectsData = false;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const selectedCells = getSelectionAffectedTableCells(this.editor.model.document.selection);\n    this.isEnabled = selectedCells.length > 0;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const referenceCells = getSelectionAffectedTableCells(model.document.selection);\n    const firstCell = referenceCells[0];\n    const lastCell = referenceCells.pop();\n    const table = firstCell.findAncestor('table');\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const startLocation = tableUtils.getCellLocation(firstCell);\n    const endLocation = tableUtils.getCellLocation(lastCell);\n    const startColumn = Math.min(startLocation.column, endLocation.column);\n    const endColumn = Math.max(startLocation.column, endLocation.column);\n    const rangesToSelect = [];\n\n    for (const cellInfo of new TableWalker(table, {\n      startColumn,\n      endColumn\n    })) {\n      rangesToSelect.push(model.createRangeOn(cellInfo.cell));\n    }\n\n    model.change(writer => {\n      writer.setSelection(rangesToSelect);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/commands/selectcolumncommand.js"],"names":["Command","TableWalker","getSelectionAffectedTableCells","SelectColumnCommand","constructor","editor","affectsData","refresh","selectedCells","model","document","selection","isEnabled","length","execute","referenceCells","firstCell","lastCell","pop","table","findAncestor","tableUtils","plugins","get","startLocation","getCellLocation","endLocation","startColumn","Math","min","column","endColumn","max","rangesToSelect","cellInfo","push","createRangeOn","cell","change","writer","setSelection"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,8BAAT,QAA+C,oBAA/C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCH,OAAlC,CAA0C;AACxD;AACD;AACA;AACCI,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP,EADqB,CAGrB;;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMC,aAAa,GAAGN,8BAA8B,CAAE,KAAKG,MAAL,CAAYI,KAAZ,CAAkBC,QAAlB,CAA2BC,SAA7B,CAApD;AAEA,SAAKC,SAAL,GAAiBJ,aAAa,CAACK,MAAd,GAAuB,CAAxC;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAML,KAAK,GAAG,KAAKJ,MAAL,CAAYI,KAA1B;AACA,UAAMM,cAAc,GAAGb,8BAA8B,CAAEO,KAAK,CAACC,QAAN,CAAeC,SAAjB,CAArD;AACA,UAAMK,SAAS,GAAGD,cAAc,CAAE,CAAF,CAAhC;AACA,UAAME,QAAQ,GAAGF,cAAc,CAACG,GAAf,EAAjB;AACA,UAAMC,KAAK,GAAGH,SAAS,CAACI,YAAV,CAAwB,OAAxB,CAAd;AAEA,UAAMC,UAAU,GAAG,KAAKhB,MAAL,CAAYiB,OAAZ,CAAoBC,GAApB,CAAyB,YAAzB,CAAnB;AACA,UAAMC,aAAa,GAAGH,UAAU,CAACI,eAAX,CAA4BT,SAA5B,CAAtB;AACA,UAAMU,WAAW,GAAGL,UAAU,CAACI,eAAX,CAA4BR,QAA5B,CAApB;AAEA,UAAMU,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAUL,aAAa,CAACM,MAAxB,EAAgCJ,WAAW,CAACI,MAA5C,CAApB;AACA,UAAMC,SAAS,GAAGH,IAAI,CAACI,GAAL,CAAUR,aAAa,CAACM,MAAxB,EAAgCJ,WAAW,CAACI,MAA5C,CAAlB;AAEA,UAAMG,cAAc,GAAG,EAAvB;;AAEA,SAAM,MAAMC,QAAZ,IAAwB,IAAIjC,WAAJ,CAAiBkB,KAAjB,EAAwB;AAAEQ,MAAAA,WAAF;AAAeI,MAAAA;AAAf,KAAxB,CAAxB,EAA+E;AAC9EE,MAAAA,cAAc,CAACE,IAAf,CAAqB1B,KAAK,CAAC2B,aAAN,CAAqBF,QAAQ,CAACG,IAA9B,CAArB;AACA;;AAED5B,IAAAA,KAAK,CAAC6B,MAAN,CAAcC,MAAM,IAAI;AACvBA,MAAAA,MAAM,CAACC,YAAP,CAAqBP,cAArB;AACA,KAFD;AAGA;;AA9CuD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/selectcolumncommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\nimport TableWalker from '../tablewalker';\nimport { getSelectionAffectedTableCells } from '../utils/selection';\n\n/**\n * The select column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableColumn'` editor command.\n *\n * To select the columns containing the selected cells, execute the command:\n *\n *\t\teditor.execute( 'selectTableColumn' );\n *\n * @extends module:core/command~Command\n */\nexport default class SelectColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t// It does not affect data so should be enabled in read-only mode.\n\t\tthis.affectsData = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selectedCells = getSelectionAffectedTableCells( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = selectedCells.length > 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst referenceCells = getSelectionAffectedTableCells( model.document.selection );\n\t\tconst firstCell = referenceCells[ 0 ];\n\t\tconst lastCell = referenceCells.pop();\n\t\tconst table = firstCell.findAncestor( 'table' );\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst startLocation = tableUtils.getCellLocation( firstCell );\n\t\tconst endLocation = tableUtils.getCellLocation( lastCell );\n\n\t\tconst startColumn = Math.min( startLocation.column, endLocation.column );\n\t\tconst endColumn = Math.max( startLocation.column, endLocation.column );\n\n\t\tconst rangesToSelect = [];\n\n\t\tfor ( const cellInfo of new TableWalker( table, { startColumn, endColumn } ) ) {\n\t\t\trangesToSelect.push( model.createRangeOn( cellInfo.cell ) );\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( rangesToSelect );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}