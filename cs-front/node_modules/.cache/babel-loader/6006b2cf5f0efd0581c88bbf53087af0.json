{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/converters\n */\n\n/**\n * Returns a function that converts the model \"url\" attribute to the view representation.\n *\n * Depending on the configuration, the view representation can be \"semantic\" (for the data pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<oembed url=\"foo\"></oembed>\n *\t\t</figure>\n *\n * or \"non-semantic\" (for the editing view pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n *\t\t</figure>\n *\n * **Note:** Changing the model \"url\" attribute replaces the entire content of the\n * `<figure>` in the view.\n *\n * @param {module:media-embed/mediaregistry~MediaRegistry} registry The registry providing\n * the media and their content.\n * @param {Object} options\n * @param {String} [options.elementName] When set, overrides the default element name for semantic media embeds.\n * @param {String} [options.renderMediaPreview] When `true`, the converter will create the view in the non-semantic form.\n * @param {String} [options.renderForEditingView] When `true`, the converter will create a view specific for the\n * editing pipeline (e.g. including CSS classes, content placeholders).\n * @returns {Function}\n */\nexport function modelToViewUrlAttributeConverter(registry, options) {\n  return dispatcher => {\n    dispatcher.on('attribute:url:media', converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const url = data.attributeNewValue;\n    const viewWriter = conversionApi.writer;\n    const figure = conversionApi.mapper.toViewElement(data.item);\n    const mediaContentElement = [...figure.getChildren()].find(child => child.getCustomProperty('media-content')); // TODO: removing the wrapper and creating it from scratch is a hack. We can do better than that.\n\n    viewWriter.remove(mediaContentElement);\n    const mediaViewElement = registry.getMediaViewElement(viewWriter, url, options);\n    viewWriter.insert(viewWriter.createPositionAt(figure, 0), mediaViewElement);\n  }\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-media-embed/src/converters.js"],"names":["modelToViewUrlAttributeConverter","registry","options","dispatcher","on","converter","evt","data","conversionApi","consumable","consume","item","name","url","attributeNewValue","viewWriter","writer","figure","mapper","toViewElement","mediaContentElement","getChildren","find","child","getCustomProperty","remove","mediaViewElement","getMediaViewElement","insert","createPositionAt"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gCAAT,CAA2CC,QAA3C,EAAqDC,OAArD,EAA+D;AACrE,SAAOC,UAAU,IAAI;AACpBA,IAAAA,UAAU,CAACC,EAAX,CAAe,qBAAf,EAAsCC,SAAtC;AACA,GAFD;;AAIA,WAASA,SAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,aAA/B,EAA+C;AAC9C,QAAK,CAACA,aAAa,CAACC,UAAd,CAAyBC,OAAzB,CAAkCH,IAAI,CAACI,IAAvC,EAA6CL,GAAG,CAACM,IAAjD,CAAN,EAAgE;AAC/D;AACA;;AAED,UAAMC,GAAG,GAAGN,IAAI,CAACO,iBAAjB;AACA,UAAMC,UAAU,GAAGP,aAAa,CAACQ,MAAjC;AACA,UAAMC,MAAM,GAAGT,aAAa,CAACU,MAAd,CAAqBC,aAArB,CAAoCZ,IAAI,CAACI,IAAzC,CAAf;AACA,UAAMS,mBAAmB,GAAG,CAAE,GAAGH,MAAM,CAACI,WAAP,EAAL,EAC1BC,IAD0B,CACpBC,KAAK,IAAIA,KAAK,CAACC,iBAAN,CAAyB,eAAzB,CADW,CAA5B,CAR8C,CAW9C;;AACAT,IAAAA,UAAU,CAACU,MAAX,CAAmBL,mBAAnB;AAEA,UAAMM,gBAAgB,GAAGzB,QAAQ,CAAC0B,mBAAT,CAA8BZ,UAA9B,EAA0CF,GAA1C,EAA+CX,OAA/C,CAAzB;AAEAa,IAAAA,UAAU,CAACa,MAAX,CAAmBb,UAAU,CAACc,gBAAX,CAA6BZ,MAA7B,EAAqC,CAArC,CAAnB,EAA6DS,gBAA7D;AACA;AACD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/converters\n */\n\n/**\n * Returns a function that converts the model \"url\" attribute to the view representation.\n *\n * Depending on the configuration, the view representation can be \"semantic\" (for the data pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<oembed url=\"foo\"></oembed>\n *\t\t</figure>\n *\n * or \"non-semantic\" (for the editing view pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n *\t\t</figure>\n *\n * **Note:** Changing the model \"url\" attribute replaces the entire content of the\n * `<figure>` in the view.\n *\n * @param {module:media-embed/mediaregistry~MediaRegistry} registry The registry providing\n * the media and their content.\n * @param {Object} options\n * @param {String} [options.elementName] When set, overrides the default element name for semantic media embeds.\n * @param {String} [options.renderMediaPreview] When `true`, the converter will create the view in the non-semantic form.\n * @param {String} [options.renderForEditingView] When `true`, the converter will create a view specific for the\n * editing pipeline (e.g. including CSS classes, content placeholders).\n * @returns {Function}\n */\nexport function modelToViewUrlAttributeConverter( registry, options ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'attribute:url:media', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst url = data.attributeNewValue;\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst mediaContentElement = [ ...figure.getChildren() ]\n\t\t\t.find( child => child.getCustomProperty( 'media-content' ) );\n\n\t\t// TODO: removing the wrapper and creating it from scratch is a hack. We can do better than that.\n\t\tviewWriter.remove( mediaContentElement );\n\n\t\tconst mediaViewElement = registry.getMediaViewElement( viewWriter, url, options );\n\n\t\tviewWriter.insert( viewWriter.createPositionAt( figure, 0 ), mediaViewElement );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}