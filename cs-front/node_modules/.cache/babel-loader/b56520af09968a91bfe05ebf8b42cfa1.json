{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/converters\n */\nimport { getPropertyAssociation } from './utils';\n/**\n * A model-to-view (both editing and data) converter for the `codeBlock` element.\n *\n * Sample input:\n *\n *\t\t<codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n *\n * Sample output (editing):\n *\n *\t\t<pre data-language=\"JavaScript\"><code class=\"language-javascript\">foo();<br />bar();</code></pre>\n *\n * Sample output (data, see {@link module:code-block/converters~modelToDataViewSoftBreakInsertion}):\n *\n *\t\t<pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n *\n * @param {module:engine/model/model~Model} model\n * @param {Array.<module:code-block/codeblock~CodeBlockLanguageDefinition>} languageDefs The normalized language\n * configuration passed to the feature.\n * @param {Boolean} [useLabels=false] When `true`, the `<pre>` element will get a `data-language` attribute with a\n * humanâ€“readable label of the language. Used only in the editing.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function modelToViewCodeBlockInsertion(model, languageDefs) {\n  let useLabels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // Language CSS classes:\n  //\n  //\t\t{\n  //\t\t\tphp: 'language-php',\n  //\t\t\tpython: 'language-python',\n  //\t\t\tjavascript: 'js',\n  //\t\t\t...\n  //\t\t}\n  const languagesToClasses = getPropertyAssociation(languageDefs, 'language', 'class'); // Language labels:\n  //\n  //\t\t{\n  //\t\t\tphp: 'PHP',\n  //\t\t\tpython: 'Python',\n  //\t\t\tjavascript: 'JavaScript',\n  //\t\t\t...\n  //\t\t}\n\n  const languagesToLabels = getPropertyAssociation(languageDefs, 'language', 'label');\n  return (evt, data, conversionApi) => {\n    const {\n      writer,\n      mapper,\n      consumable\n    } = conversionApi;\n\n    if (!consumable.consume(data.item, 'insert')) {\n      return;\n    }\n\n    const codeBlockLanguage = data.item.getAttribute('language');\n    const targetViewPosition = mapper.toViewPosition(model.createPositionBefore(data.item));\n    const preAttributes = {}; // Attributes added only in the editing view.\n\n    if (useLabels) {\n      preAttributes['data-language'] = languagesToLabels[codeBlockLanguage];\n      preAttributes.spellcheck = 'false';\n    }\n\n    const pre = writer.createContainerElement('pre', preAttributes);\n    const code = writer.createContainerElement('code', {\n      class: languagesToClasses[codeBlockLanguage] || null\n    });\n    writer.insert(writer.createPositionAt(pre, 0), code);\n    writer.insert(targetViewPosition, pre);\n    mapper.bindElements(data.item, code);\n  };\n}\n/**\n * A model-to-data view converter for the new line (`softBreak`) separator.\n *\n * Sample input:\n *\n *\t\t<codeBlock ...>foo();<softBreak></softBreak>bar();</codeBlock>\n *\n * Sample output:\n *\n *\t\t<pre><code ...>foo();\\nbar();</code></pre>\n *\n * @param {module:engine/model/model~Model} model\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function modelToDataViewSoftBreakInsertion(model) {\n  return (evt, data, conversionApi) => {\n    if (data.item.parent.name !== 'codeBlock') {\n      return;\n    }\n\n    const {\n      writer,\n      mapper,\n      consumable\n    } = conversionApi;\n\n    if (!consumable.consume(data.item, 'insert')) {\n      return;\n    }\n\n    const position = mapper.toViewPosition(model.createPositionBefore(data.item));\n    writer.insert(position, writer.createText('\\n'));\n  };\n}\n/**\n * A view-to-model converter for `<pre>` with the `<code>` HTML.\n *\n * Sample input:\n *\n *\t\t<pre><code class=\"language-javascript\">foo();bar();</code></pre>\n *\n * Sample output:\n *\n *\t\t<codeBlock language=\"javascript\">foo();bar();</codeBlock>\n *\n * @param {module:engine/view/view~View} editingView\n * @param {Array.<module:code-block/codeblock~CodeBlockLanguageDefinition>} languageDefs The normalized language\n * configuration passed to the feature.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function dataViewToModelCodeBlockInsertion(editingView, languageDefs) {\n  // Language names associated with CSS classes:\n  //\n  //\t\t{\n  //\t\t\t'language-php': 'php',\n  //\t\t\t'language-python': 'python',\n  //\t\t\tjs: 'javascript',\n  //\t\t\t...\n  //\t\t}\n  const classesToLanguages = getPropertyAssociation(languageDefs, 'class', 'language');\n  const defaultLanguageName = languageDefs[0].language;\n  return (evt, data, conversionApi) => {\n    const viewCodeElement = data.viewItem;\n    const viewPreElement = viewCodeElement.parent;\n\n    if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n      return;\n    } // In case of nested code blocks we don't want to convert to another code block.\n\n\n    if (data.modelCursor.findAncestor('codeBlock')) {\n      return;\n    }\n\n    const {\n      consumable,\n      writer\n    } = conversionApi;\n\n    if (!consumable.test(viewCodeElement, {\n      name: true\n    })) {\n      return;\n    }\n\n    const codeBlock = writer.createElement('codeBlock');\n    const viewChildClasses = [...viewCodeElement.getClassNames()]; // As we're to associate each class with a model language, a lack of class (empty class) can be\n    // also associated with a language if the language definition was configured so. Pushing an empty\n    // string to make sure the association will work.\n\n    if (!viewChildClasses.length) {\n      viewChildClasses.push('');\n    } // Figure out if any of the <code> element's class names is a valid programming\n    // language class. If so, use it on the model element (becomes the language of the entire block).\n\n\n    for (const className of viewChildClasses) {\n      const language = classesToLanguages[className];\n\n      if (language) {\n        writer.setAttribute('language', language, codeBlock);\n        break;\n      }\n    } // If no language value was set, use the default language from the config.\n\n\n    if (!codeBlock.hasAttribute('language')) {\n      writer.setAttribute('language', defaultLanguageName, codeBlock);\n    }\n\n    conversionApi.convertChildren(viewCodeElement, codeBlock); // Let's try to insert code block.\n\n    if (!conversionApi.safeInsert(codeBlock, data.modelCursor)) {\n      return;\n    }\n\n    consumable.consume(viewCodeElement, {\n      name: true\n    });\n    conversionApi.updateConversionResult(codeBlock, data);\n  };\n}\n/**\n * A view-to-model converter for new line characters in `<pre>`.\n *\n * Sample input:\n *\n *\t\t<pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n *\n * Sample output:\n *\n *\t\t<codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n *\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function dataViewToModelTextNewlinesInsertion() {\n  return (evt, data, _ref) => {\n    let {\n      consumable,\n      writer\n    } = _ref;\n    let position = data.modelCursor; // When node is already converted then do nothing.\n\n    if (!consumable.test(data.viewItem)) {\n      return;\n    } // When not inside `codeBlock` then do nothing.\n\n\n    if (!position.findAncestor('codeBlock')) {\n      return;\n    }\n\n    consumable.consume(data.viewItem);\n    const text = data.viewItem.data;\n    const textLines = text.split('\\n').map(data => writer.createText(data));\n    const lastLine = textLines[textLines.length - 1];\n\n    for (const node of textLines) {\n      writer.insert(node, position);\n      position = position.getShiftedBy(node.offsetSize);\n\n      if (node !== lastLine) {\n        const softBreak = writer.createElement('softBreak');\n        writer.insert(softBreak, position);\n        position = writer.createPositionAfter(softBreak);\n      }\n    }\n\n    data.modelRange = writer.createRange(data.modelCursor, position);\n    data.modelCursor = position;\n  };\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-code-block/src/converters.js"],"names":["getPropertyAssociation","modelToViewCodeBlockInsertion","model","languageDefs","useLabels","languagesToClasses","languagesToLabels","evt","data","conversionApi","writer","mapper","consumable","consume","item","codeBlockLanguage","getAttribute","targetViewPosition","toViewPosition","createPositionBefore","preAttributes","spellcheck","pre","createContainerElement","code","class","insert","createPositionAt","bindElements","modelToDataViewSoftBreakInsertion","parent","name","position","createText","dataViewToModelCodeBlockInsertion","editingView","classesToLanguages","defaultLanguageName","language","viewCodeElement","viewItem","viewPreElement","is","modelCursor","findAncestor","test","codeBlock","createElement","viewChildClasses","getClassNames","length","push","className","setAttribute","hasAttribute","convertChildren","safeInsert","updateConversionResult","dataViewToModelTextNewlinesInsertion","text","textLines","split","map","lastLine","node","getShiftedBy","offsetSize","softBreak","createPositionAfter","modelRange","createRange"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/converters\n */\n\nimport { getPropertyAssociation } from './utils';\n\n/**\n * A model-to-view (both editing and data) converter for the `codeBlock` element.\n *\n * Sample input:\n *\n *\t\t<codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n *\n * Sample output (editing):\n *\n *\t\t<pre data-language=\"JavaScript\"><code class=\"language-javascript\">foo();<br />bar();</code></pre>\n *\n * Sample output (data, see {@link module:code-block/converters~modelToDataViewSoftBreakInsertion}):\n *\n *\t\t<pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n *\n * @param {module:engine/model/model~Model} model\n * @param {Array.<module:code-block/codeblock~CodeBlockLanguageDefinition>} languageDefs The normalized language\n * configuration passed to the feature.\n * @param {Boolean} [useLabels=false] When `true`, the `<pre>` element will get a `data-language` attribute with a\n * humanâ€“readable label of the language. Used only in the editing.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelToViewCodeBlockInsertion( model, languageDefs, useLabels = false ) {\n\t// Language CSS classes:\n\t//\n\t//\t\t{\n\t//\t\t\tphp: 'language-php',\n\t//\t\t\tpython: 'language-python',\n\t//\t\t\tjavascript: 'js',\n\t//\t\t\t...\n\t//\t\t}\n\tconst languagesToClasses = getPropertyAssociation( languageDefs, 'language', 'class' );\n\n\t// Language labels:\n\t//\n\t//\t\t{\n\t//\t\t\tphp: 'PHP',\n\t//\t\t\tpython: 'Python',\n\t//\t\t\tjavascript: 'JavaScript',\n\t//\t\t\t...\n\t//\t\t}\n\tconst languagesToLabels = getPropertyAssociation( languageDefs, 'language', 'label' );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, mapper, consumable } = conversionApi;\n\n\t\tif ( !consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeBlockLanguage = data.item.getAttribute( 'language' );\n\t\tconst targetViewPosition = mapper.toViewPosition( model.createPositionBefore( data.item ) );\n\t\tconst preAttributes = {};\n\n\t\t// Attributes added only in the editing view.\n\t\tif ( useLabels ) {\n\t\t\tpreAttributes[ 'data-language' ] = languagesToLabels[ codeBlockLanguage ];\n\t\t\tpreAttributes.spellcheck = 'false';\n\t\t}\n\n\t\tconst pre = writer.createContainerElement( 'pre', preAttributes );\n\t\tconst code = writer.createContainerElement( 'code', {\n\t\t\tclass: languagesToClasses[ codeBlockLanguage ] || null\n\t\t} );\n\n\t\twriter.insert( writer.createPositionAt( pre, 0 ), code );\n\t\twriter.insert( targetViewPosition, pre );\n\t\tmapper.bindElements( data.item, code );\n\t};\n}\n\n/**\n * A model-to-data view converter for the new line (`softBreak`) separator.\n *\n * Sample input:\n *\n *\t\t<codeBlock ...>foo();<softBreak></softBreak>bar();</codeBlock>\n *\n * Sample output:\n *\n *\t\t<pre><code ...>foo();\\nbar();</code></pre>\n *\n * @param {module:engine/model/model~Model} model\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelToDataViewSoftBreakInsertion( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( data.item.parent.name !== 'codeBlock' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { writer, mapper, consumable } = conversionApi;\n\n\t\tif ( !consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = mapper.toViewPosition( model.createPositionBefore( data.item ) );\n\n\t\twriter.insert( position, writer.createText( '\\n' ) );\n\t};\n}\n\n/**\n * A view-to-model converter for `<pre>` with the `<code>` HTML.\n *\n * Sample input:\n *\n *\t\t<pre><code class=\"language-javascript\">foo();bar();</code></pre>\n *\n * Sample output:\n *\n *\t\t<codeBlock language=\"javascript\">foo();bar();</codeBlock>\n *\n * @param {module:engine/view/view~View} editingView\n * @param {Array.<module:code-block/codeblock~CodeBlockLanguageDefinition>} languageDefs The normalized language\n * configuration passed to the feature.\n * @returns {Function} Returns a conversion callback.\n */\nexport function dataViewToModelCodeBlockInsertion( editingView, languageDefs ) {\n\t// Language names associated with CSS classes:\n\t//\n\t//\t\t{\n\t//\t\t\t'language-php': 'php',\n\t//\t\t\t'language-python': 'python',\n\t//\t\t\tjs: 'javascript',\n\t//\t\t\t...\n\t//\t\t}\n\tconst classesToLanguages = getPropertyAssociation( languageDefs, 'class', 'language' );\n\tconst defaultLanguageName = languageDefs[ 0 ].language;\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewCodeElement = data.viewItem;\n\t\tconst viewPreElement = viewCodeElement.parent;\n\n\t\tif ( !viewPreElement || !viewPreElement.is( 'element', 'pre' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In case of nested code blocks we don't want to convert to another code block.\n\t\tif ( data.modelCursor.findAncestor( 'codeBlock' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { consumable, writer } = conversionApi;\n\n\t\tif ( !consumable.test( viewCodeElement, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeBlock = writer.createElement( 'codeBlock' );\n\t\tconst viewChildClasses = [ ...viewCodeElement.getClassNames() ];\n\n\t\t// As we're to associate each class with a model language, a lack of class (empty class) can be\n\t\t// also associated with a language if the language definition was configured so. Pushing an empty\n\t\t// string to make sure the association will work.\n\t\tif ( !viewChildClasses.length ) {\n\t\t\tviewChildClasses.push( '' );\n\t\t}\n\n\t\t// Figure out if any of the <code> element's class names is a valid programming\n\t\t// language class. If so, use it on the model element (becomes the language of the entire block).\n\t\tfor ( const className of viewChildClasses ) {\n\t\t\tconst language = classesToLanguages[ className ];\n\n\t\t\tif ( language ) {\n\t\t\t\twriter.setAttribute( 'language', language, codeBlock );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If no language value was set, use the default language from the config.\n\t\tif ( !codeBlock.hasAttribute( 'language' ) ) {\n\t\t\twriter.setAttribute( 'language', defaultLanguageName, codeBlock );\n\t\t}\n\n\t\tconversionApi.convertChildren( viewCodeElement, codeBlock );\n\n\t\t// Let's try to insert code block.\n\t\tif ( !conversionApi.safeInsert( codeBlock, data.modelCursor ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( viewCodeElement, { name: true } );\n\n\t\tconversionApi.updateConversionResult( codeBlock, data );\n\t};\n}\n\n/**\n * A view-to-model converter for new line characters in `<pre>`.\n *\n * Sample input:\n *\n *\t\t<pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n *\n * Sample output:\n *\n *\t\t<codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n *\n * @returns {Function} Returns a conversion callback.\n */\nexport function dataViewToModelTextNewlinesInsertion() {\n\treturn ( evt, data, { consumable, writer } ) => {\n\t\tlet position = data.modelCursor;\n\n\t\t// When node is already converted then do nothing.\n\t\tif ( !consumable.test( data.viewItem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When not inside `codeBlock` then do nothing.\n\t\tif ( !position.findAncestor( 'codeBlock' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( data.viewItem );\n\n\t\tconst text = data.viewItem.data;\n\t\tconst textLines = text.split( '\\n' ).map( data => writer.createText( data ) );\n\t\tconst lastLine = textLines[ textLines.length - 1 ];\n\n\t\tfor ( const node of textLines ) {\n\t\t\twriter.insert( node, position );\n\t\t\tposition = position.getShiftedBy( node.offsetSize );\n\n\t\t\tif ( node !== lastLine ) {\n\t\t\t\tconst softBreak = writer.createElement( 'softBreak' );\n\n\t\t\t\twriter.insert( softBreak, position );\n\t\t\t\tposition = writer.createPositionAfter( softBreak );\n\t\t\t}\n\t\t}\n\n\t\tdata.modelRange = writer.createRange(\n\t\t\tdata.modelCursor,\n\t\t\tposition\n\t\t);\n\t\tdata.modelCursor = position;\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}