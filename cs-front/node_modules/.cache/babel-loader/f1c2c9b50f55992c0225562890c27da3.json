{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaembedui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { createDropdown } from 'ckeditor5/src/ui';\nimport MediaFormView from './ui/mediaformview';\nimport MediaEmbedEditing from './mediaembedediting';\nimport mediaIcon from '../theme/icons/media.svg';\n/**\n * The media embed UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class MediaEmbedUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [MediaEmbedEditing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'MediaEmbedUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const command = editor.commands.get('mediaEmbed');\n    const registry = editor.plugins.get(MediaEmbedEditing).registry;\n    editor.ui.componentFactory.add('mediaEmbed', locale => {\n      const dropdown = createDropdown(locale);\n      const mediaForm = new MediaFormView(getFormValidators(editor.t, registry), editor.locale);\n\n      this._setUpDropdown(dropdown, mediaForm, command, editor);\n\n      this._setUpForm(dropdown, mediaForm, command);\n\n      return dropdown;\n    });\n  }\n  /**\n   * @private\n   * @param {module:ui/dropdown/dropdownview~DropdownView} dropdown\n   * @param {module:ui/view~View} form\n   * @param {module:media-embed/mediaembedcommand~MediaEmbedCommand} command\n   */\n\n\n  _setUpDropdown(dropdown, form, command) {\n    const editor = this.editor;\n    const t = editor.t;\n    const button = dropdown.buttonView;\n    dropdown.bind('isEnabled').to(command);\n    dropdown.panelView.children.add(form);\n    button.set({\n      label: t('Insert media'),\n      icon: mediaIcon,\n      tooltip: true\n    }); // Note: Use the low priority to make sure the following listener starts working after the\n    // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n    // invisible form/input cannot be focused/selected.\n\n    button.on('open', () => {\n      form.disableCssTransitions(); // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n      // the command. If the user typed in the input, then canceled (`urlInputView#fieldView#value` stays\n      // unaltered) and re-opened it without changing the value of the media command (e.g. because they\n      // didn't change the selection), they would see the old value instead of the actual value of the\n      // command.\n\n      form.url = command.value || '';\n      form.urlInputView.fieldView.select();\n      form.focus();\n      form.enableCssTransitions();\n    }, {\n      priority: 'low'\n    });\n    dropdown.on('submit', () => {\n      if (form.isValid()) {\n        editor.execute('mediaEmbed', form.url);\n        closeUI();\n      }\n    });\n    dropdown.on('change:isOpen', () => form.resetFormStatus());\n    dropdown.on('cancel', () => closeUI());\n\n    function closeUI() {\n      editor.editing.view.focus();\n      dropdown.isOpen = false;\n    }\n  }\n  /**\n   * @private\n   * @param {module:ui/dropdown/dropdownview~DropdownView} dropdown\n   * @param {module:ui/view~View} form\n   * @param {module:media-embed/mediaembedcommand~MediaEmbedCommand} command\n   */\n\n\n  _setUpForm(dropdown, form, command) {\n    form.delegate('submit', 'cancel').to(dropdown);\n    form.urlInputView.bind('value').to(command, 'value'); // Form elements should be read-only when corresponding commands are disabled.\n\n    form.urlInputView.bind('isReadOnly').to(command, 'isEnabled', value => !value);\n  }\n\n}\n\nfunction getFormValidators(t, registry) {\n  return [form => {\n    if (!form.url.length) {\n      return t('The URL must not be empty.');\n    }\n  }, form => {\n    if (!registry.hasMedia(form.url)) {\n      return t('This media URL is not supported.');\n    }\n  }];\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-media-embed/src/mediaembedui.js"],"names":["Plugin","createDropdown","MediaFormView","MediaEmbedEditing","mediaIcon","MediaEmbedUI","requires","pluginName","init","editor","command","commands","get","registry","plugins","ui","componentFactory","add","locale","dropdown","mediaForm","getFormValidators","t","_setUpDropdown","_setUpForm","form","button","buttonView","bind","to","panelView","children","set","label","icon","tooltip","on","disableCssTransitions","url","value","urlInputView","fieldView","select","focus","enableCssTransitions","priority","isValid","execute","closeUI","resetFormStatus","editing","view","isOpen","delegate","length","hasMedia"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaembedui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { createDropdown } from 'ckeditor5/src/ui';\n\nimport MediaFormView from './ui/mediaformview';\nimport MediaEmbedEditing from './mediaembedediting';\nimport mediaIcon from '../theme/icons/media.svg';\n\n/**\n * The media embed UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class MediaEmbedUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ MediaEmbedEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'MediaEmbedUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst command = editor.commands.get( 'mediaEmbed' );\n\t\tconst registry = editor.plugins.get( MediaEmbedEditing ).registry;\n\n\t\teditor.ui.componentFactory.add( 'mediaEmbed', locale => {\n\t\t\tconst dropdown = createDropdown( locale );\n\n\t\t\tconst mediaForm = new MediaFormView( getFormValidators( editor.t, registry ), editor.locale );\n\n\t\t\tthis._setUpDropdown( dropdown, mediaForm, command, editor );\n\t\t\tthis._setUpForm( dropdown, mediaForm, command );\n\n\t\t\treturn dropdown;\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:ui/dropdown/dropdownview~DropdownView} dropdown\n\t * @param {module:ui/view~View} form\n\t * @param {module:media-embed/mediaembedcommand~MediaEmbedCommand} command\n\t */\n\t_setUpDropdown( dropdown, form, command ) {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst button = dropdown.buttonView;\n\n\t\tdropdown.bind( 'isEnabled' ).to( command );\n\t\tdropdown.panelView.children.add( form );\n\n\t\tbutton.set( {\n\t\t\tlabel: t( 'Insert media' ),\n\t\t\ticon: mediaIcon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\t// Note: Use the low priority to make sure the following listener starts working after the\n\t\t// default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n\t\t// invisible form/input cannot be focused/selected.\n\t\tbutton.on( 'open', () => {\n\t\t\tform.disableCssTransitions();\n\n\t\t\t// Make sure that each time the panel shows up, the URL field remains in sync with the value of\n\t\t\t// the command. If the user typed in the input, then canceled (`urlInputView#fieldView#value` stays\n\t\t\t// unaltered) and re-opened it without changing the value of the media command (e.g. because they\n\t\t\t// didn't change the selection), they would see the old value instead of the actual value of the\n\t\t\t// command.\n\t\t\tform.url = command.value || '';\n\t\t\tform.urlInputView.fieldView.select();\n\t\t\tform.focus();\n\t\t\tform.enableCssTransitions();\n\t\t}, { priority: 'low' } );\n\n\t\tdropdown.on( 'submit', () => {\n\t\t\tif ( form.isValid() ) {\n\t\t\t\teditor.execute( 'mediaEmbed', form.url );\n\t\t\t\tcloseUI();\n\t\t\t}\n\t\t} );\n\n\t\tdropdown.on( 'change:isOpen', () => form.resetFormStatus() );\n\t\tdropdown.on( 'cancel', () => closeUI() );\n\n\t\tfunction closeUI() {\n\t\t\teditor.editing.view.focus();\n\t\t\tdropdown.isOpen = false;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:ui/dropdown/dropdownview~DropdownView} dropdown\n\t * @param {module:ui/view~View} form\n\t * @param {module:media-embed/mediaembedcommand~MediaEmbedCommand} command\n\t */\n\t_setUpForm( dropdown, form, command ) {\n\t\tform.delegate( 'submit', 'cancel' ).to( dropdown );\n\t\tform.urlInputView.bind( 'value' ).to( command, 'value' );\n\n\t\t// Form elements should be read-only when corresponding commands are disabled.\n\t\tform.urlInputView.bind( 'isReadOnly' ).to( command, 'isEnabled', value => !value );\n\t}\n}\n\nfunction getFormValidators( t, registry ) {\n\treturn [\n\t\tform => {\n\t\t\tif ( !form.url.length ) {\n\t\t\t\treturn t( 'The URL must not be empty.' );\n\t\t\t}\n\t\t},\n\t\tform => {\n\t\t\tif ( !registry.hasMedia( form.url ) ) {\n\t\t\t\treturn t( 'This media URL is not supported.' );\n\t\t\t}\n\t\t}\n\t];\n}\n"]},"metadata":{},"sourceType":"module"}