{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquoteui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport '../theme/blockquote.css';\n/**\n * The block quote UI plugin.\n *\n * It introduces the `'blockQuote'` button.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class BlockQuoteUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'BlockQuoteUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    editor.ui.componentFactory.add('blockQuote', locale => {\n      const command = editor.commands.get('blockQuote');\n      const buttonView = new ButtonView(locale);\n      buttonView.set({\n        label: t('Block quote'),\n        icon: icons.quote,\n        tooltip: true,\n        isToggleable: true\n      }); // Bind button model to command.\n\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled'); // Execute command.\n\n      this.listenTo(buttonView, 'execute', () => {\n        editor.execute('blockQuote');\n        editor.editing.view.focus();\n      });\n      return buttonView;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-block-quote/src/blockquoteui.js"],"names":["Plugin","icons","ButtonView","BlockQuoteUI","pluginName","init","editor","t","ui","componentFactory","add","locale","command","commands","get","buttonView","set","label","icon","quote","tooltip","isToggleable","bind","to","listenTo","execute","editing","view","focus"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,oBAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,yBAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BH,MAA3B,CAAkC;AAChD;AACD;AACA;AACsB,aAAVI,UAAU,GAAG;AACvB,WAAO,cAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,CAAC,GAAGD,MAAM,CAACC,CAAjB;AAEAD,IAAAA,MAAM,CAACE,EAAP,CAAUC,gBAAV,CAA2BC,GAA3B,CAAgC,YAAhC,EAA8CC,MAAM,IAAI;AACvD,YAAMC,OAAO,GAAGN,MAAM,CAACO,QAAP,CAAgBC,GAAhB,CAAqB,YAArB,CAAhB;AACA,YAAMC,UAAU,GAAG,IAAIb,UAAJ,CAAgBS,MAAhB,CAAnB;AAEAI,MAAAA,UAAU,CAACC,GAAX,CAAgB;AACfC,QAAAA,KAAK,EAAEV,CAAC,CAAE,aAAF,CADO;AAEfW,QAAAA,IAAI,EAAEjB,KAAK,CAACkB,KAFG;AAGfC,QAAAA,OAAO,EAAE,IAHM;AAIfC,QAAAA,YAAY,EAAE;AAJC,OAAhB,EAJuD,CAWvD;;AACAN,MAAAA,UAAU,CAACO,IAAX,CAAiB,MAAjB,EAAyB,WAAzB,EAAuCC,EAAvC,CAA2CX,OAA3C,EAAoD,OAApD,EAA6D,WAA7D,EAZuD,CAcvD;;AACA,WAAKY,QAAL,CAAeT,UAAf,EAA2B,SAA3B,EAAsC,MAAM;AAC3CT,QAAAA,MAAM,CAACmB,OAAP,CAAgB,YAAhB;AACAnB,QAAAA,MAAM,CAACoB,OAAP,CAAeC,IAAf,CAAoBC,KAApB;AACA,OAHD;AAKA,aAAOb,UAAP;AACA,KArBD;AAsBA;;AArC+C","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquoteui\n */\n\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\n\nimport '../theme/blockquote.css';\n\n/**\n * The block quote UI plugin.\n *\n * It introduces the `'blockQuote'` button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockQuoteUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\teditor.ui.componentFactory.add( 'blockQuote', locale => {\n\t\t\tconst command = editor.commands.get( 'blockQuote' );\n\t\t\tconst buttonView = new ButtonView( locale );\n\n\t\t\tbuttonView.set( {\n\t\t\t\tlabel: t( 'Block quote' ),\n\t\t\t\ticon: icons.quote,\n\t\t\t\ttooltip: true,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\t// Bind button model to command.\n\t\t\tbuttonView.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\n\t\t\t// Execute command.\n\t\t\tthis.listenTo( buttonView, 'execute', () => {\n\t\t\t\teditor.execute( 'blockQuote' );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn buttonView;\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}