{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/ui/mediaformview\n */\nimport { ButtonView, FocusCycler, LabeledFieldView, View, ViewCollection, createLabeledInputText, injectCssTransitionDisabler, submitHandler } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core'; // See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\n\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/mediaform.css';\n/**\n * The media form view controller class.\n *\n * See {@link module:media-embed/ui/mediaformview~MediaFormView}.\n *\n * @extends module:ui/view~View\n */\n\nexport default class MediaFormView extends View {\n  /**\n   * @param {Array.<Function>} validators Form validators used by {@link #isValid}.\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   */\n  constructor(validators, locale) {\n    super(locale);\n    const t = locale.t;\n    /**\n     * Tracks information about the DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * The value of the URL input.\n     *\n     * @member {String} #mediaURLInputValue\n     * @observable\n     */\n\n    this.set('mediaURLInputValue', '');\n    /**\n     * The URL input view.\n     *\n     * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n     */\n\n    this.urlInputView = this._createUrlInput();\n    /**\n     * The Save button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.saveButtonView = this._createButton(t('Save'), icons.check, 'ck-button-save');\n    this.saveButtonView.type = 'submit';\n    this.saveButtonView.bind('isEnabled').to(this, 'mediaURLInputValue', value => !!value);\n    /**\n     * The Cancel button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.cancelButtonView = this._createButton(t('Cancel'), icons.cancel, 'ck-button-cancel', 'cancel');\n    /**\n     * A collection of views that can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the <kbd>Tab</kbd> key.\n        focusNext: 'tab'\n      }\n    });\n    /**\n     * An array of form validators used by {@link #isValid}.\n     *\n     * @readonly\n     * @protected\n     * @member {Array.<Function>}\n     */\n\n    this._validators = validators;\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-media-form', 'ck-responsive-form'],\n        tabindex: '-1'\n      },\n      children: [this.urlInputView, this.saveButtonView, this.cancelButtonView]\n    });\n    injectCssTransitionDisabler(this);\n    /**\n     * The default info text for the {@link #urlInputView}.\n     *\n     * @private\n     * @member {String} #_urlInputViewInfoDefault\n     */\n\n    /**\n     * The info text with an additional tip for the {@link #urlInputView},\n     * displayed when the input has some value.\n     *\n     * @private\n     * @member {String} #_urlInputViewInfoTip\n     */\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    submitHandler({\n      view: this\n    });\n    const childViews = [this.urlInputView, this.saveButtonView, this.cancelButtonView];\n    childViews.forEach(v => {\n      // Register the view as focusable.\n      this._focusables.add(v); // Register the view in the focus tracker.\n\n\n      this.focusTracker.add(v.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = data => data.stopPropagation(); // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\n\n    this.keystrokes.set('arrowright', stopPropagation);\n    this.keystrokes.set('arrowleft', stopPropagation);\n    this.keystrokes.set('arrowup', stopPropagation);\n    this.keystrokes.set('arrowdown', stopPropagation); // Intercept the `selectstart` event, which is blocked by default because of the default behavior\n    // of the DropdownView#panelView.\n    // TODO: blocking `selectstart` in the #panelView should be configurable per–drop–down instance.\n\n    this.listenTo(this.urlInputView.element, 'selectstart', (evt, domEvt) => {\n      domEvt.stopPropagation();\n    }, {\n      priority: 'high'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n  /**\n   * Focuses the fist {@link #_focusables} in the form.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * The native DOM `value` of the {@link #urlInputView} element.\n   *\n   * **Note**: Do not confuse it with the {@link module:ui/inputtext/inputtextview~InputTextView#value}\n   * which works one way only and may not represent the actual state of the component in the DOM.\n   *\n   * @type {String}\n   */\n\n\n  get url() {\n    return this.urlInputView.fieldView.element.value.trim();\n  }\n\n  set url(url) {\n    this.urlInputView.fieldView.element.value = url.trim();\n  }\n  /**\n   * Validates the form and returns `false` when some fields are invalid.\n   *\n   * @returns {Boolean}\n   */\n\n\n  isValid() {\n    this.resetFormStatus();\n\n    for (const validator of this._validators) {\n      const errorText = validator(this); // One error per field is enough.\n\n      if (errorText) {\n        // Apply updated error.\n        this.urlInputView.errorText = errorText;\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Cleans up the supplementary error and information text of the {@link #urlInputView}\n   * bringing them back to the state when the form has been displayed for the first time.\n   *\n   * See {@link #isValid}.\n   */\n\n\n  resetFormStatus() {\n    this.urlInputView.errorText = null;\n    this.urlInputView.infoText = this._urlInputViewInfoDefault;\n  }\n  /**\n   * Creates a labeled input view.\n   *\n   * @private\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled input view instance.\n   */\n\n\n  _createUrlInput() {\n    const t = this.locale.t;\n    const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n    const inputField = labeledInput.fieldView;\n    this._urlInputViewInfoDefault = t('Paste the media URL in the input.');\n    this._urlInputViewInfoTip = t('Tip: Paste the URL into the content to embed faster.');\n    labeledInput.label = t('Media URL');\n    labeledInput.infoText = this._urlInputViewInfoDefault;\n    inputField.on('input', () => {\n      // Display the tip text only when there is some value. Otherwise fall back to the default info text.\n      labeledInput.infoText = inputField.element.value ? this._urlInputViewInfoTip : this._urlInputViewInfoDefault;\n      this.mediaURLInputValue = inputField.element.value.trim();\n    });\n    return labeledInput;\n  }\n  /**\n   * Creates a button view.\n   *\n   * @private\n   * @param {String} label The button label.\n   * @param {String} icon The button icon.\n   * @param {String} className The additional button CSS class name.\n   * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n\n\n  _createButton(label, icon, className, eventName) {\n    const button = new ButtonView(this.locale);\n    button.set({\n      label,\n      icon,\n      tooltip: true\n    });\n    button.extendTemplate({\n      attributes: {\n        class: className\n      }\n    });\n\n    if (eventName) {\n      button.delegate('execute').to(this, eventName);\n    }\n\n    return button;\n  }\n\n}\n/**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * e.g. click on {@link #saveButtonView}.\n *\n * @event submit\n */\n\n/**\n * Fired when the form view is canceled, e.g. by a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-media-embed/src/ui/mediaformview.js"],"names":["ButtonView","FocusCycler","LabeledFieldView","View","ViewCollection","createLabeledInputText","injectCssTransitionDisabler","submitHandler","FocusTracker","KeystrokeHandler","icons","MediaFormView","constructor","validators","locale","t","focusTracker","keystrokes","set","urlInputView","_createUrlInput","saveButtonView","_createButton","check","type","bind","to","value","cancelButtonView","cancel","_focusables","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","_validators","setTemplate","tag","attributes","class","tabindex","children","render","view","childViews","forEach","v","add","element","listenTo","stopPropagation","data","evt","domEvt","priority","destroy","focus","focusFirst","url","fieldView","trim","isValid","resetFormStatus","validator","errorText","infoText","_urlInputViewInfoDefault","labeledInput","inputField","_urlInputViewInfoTip","label","on","mediaURLInputValue","icon","className","eventName","button","tooltip","extendTemplate","delegate"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/ui/mediaformview\n */\n\nimport {\n\tButtonView,\n\tFocusCycler,\n\tLabeledFieldView,\n\tView,\n\tViewCollection,\n\tcreateLabeledInputText,\n\tinjectCssTransitionDisabler,\n\tsubmitHandler\n} from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\n\n// See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/mediaform.css';\n\n/**\n * The media form view controller class.\n *\n * See {@link module:media-embed/ui/mediaformview~MediaFormView}.\n *\n * @extends module:ui/view~View\n */\nexport default class MediaFormView extends View {\n\t/**\n\t * @param {Array.<Function>} validators Form validators used by {@link #isValid}.\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t */\n\tconstructor( validators, locale ) {\n\t\tsuper( locale );\n\n\t\tconst t = locale.t;\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * The value of the URL input.\n\t\t *\n\t\t * @member {String} #mediaURLInputValue\n\t\t * @observable\n\t\t */\n\t\tthis.set( 'mediaURLInputValue', '' );\n\n\t\t/**\n\t\t * The URL input view.\n\t\t *\n\t\t * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n\t\t */\n\t\tthis.urlInputView = this._createUrlInput();\n\n\t\t/**\n\t\t * The Save button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.saveButtonView = this._createButton( t( 'Save' ), icons.check, 'ck-button-save' );\n\t\tthis.saveButtonView.type = 'submit';\n\t\tthis.saveButtonView.bind( 'isEnabled' ).to( this, 'mediaURLInputValue', value => !!value );\n\n\t\t/**\n\t\t * The Cancel button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.cancelButtonView = this._createButton( t( 'Cancel' ), icons.cancel, 'ck-button-cancel', 'cancel' );\n\n\t\t/**\n\t\t * A collection of views that can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._focusables = new ViewCollection();\n\n\t\t/**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the <kbd>Tab</kbd> key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * An array of form validators used by {@link #isValid}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Array.<Function>}\n\t\t */\n\t\tthis._validators = validators;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-media-form',\n\t\t\t\t\t'ck-responsive-form'\n\t\t\t\t],\n\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\tthis.urlInputView,\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t]\n\t\t} );\n\n\t\tinjectCssTransitionDisabler( this );\n\n\t\t/**\n\t\t * The default info text for the {@link #urlInputView}.\n\t\t *\n\t\t * @private\n\t\t * @member {String} #_urlInputViewInfoDefault\n\t\t */\n\n\t\t/**\n\t\t * The info text with an additional tip for the {@link #urlInputView},\n\t\t * displayed when the input has some value.\n\t\t *\n\t\t * @private\n\t\t * @member {String} #_urlInputViewInfoTip\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\tconst childViews = [\n\t\t\tthis.urlInputView,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t];\n\n\t\tchildViews.forEach( v => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( v );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( v.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tconst stopPropagation = data => data.stopPropagation();\n\n\t\t// Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n\t\t// keystroke handler would take over the key management in the URL input. We need to prevent\n\t\t// this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\t\tthis.keystrokes.set( 'arrowright', stopPropagation );\n\t\tthis.keystrokes.set( 'arrowleft', stopPropagation );\n\t\tthis.keystrokes.set( 'arrowup', stopPropagation );\n\t\tthis.keystrokes.set( 'arrowdown', stopPropagation );\n\n\t\t// Intercept the `selectstart` event, which is blocked by default because of the default behavior\n\t\t// of the DropdownView#panelView.\n\t\t// TODO: blocking `selectstart` in the #panelView should be configurable per–drop–down instance.\n\t\tthis.listenTo( this.urlInputView.element, 'selectstart', ( evt, domEvt ) => {\n\t\t\tdomEvt.stopPropagation();\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist {@link #_focusables} in the form.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * The native DOM `value` of the {@link #urlInputView} element.\n\t *\n\t * **Note**: Do not confuse it with the {@link module:ui/inputtext/inputtextview~InputTextView#value}\n\t * which works one way only and may not represent the actual state of the component in the DOM.\n\t *\n\t * @type {String}\n\t */\n\tget url() {\n\t\treturn this.urlInputView.fieldView.element.value.trim();\n\t}\n\n\tset url( url ) {\n\t\tthis.urlInputView.fieldView.element.value = url.trim();\n\t}\n\n\t/**\n\t * Validates the form and returns `false` when some fields are invalid.\n\t *\n\t * @returns {Boolean}\n\t */\n\tisValid() {\n\t\tthis.resetFormStatus();\n\n\t\tfor ( const validator of this._validators ) {\n\t\t\tconst errorText = validator( this );\n\n\t\t\t// One error per field is enough.\n\t\t\tif ( errorText ) {\n\t\t\t\t// Apply updated error.\n\t\t\t\tthis.urlInputView.errorText = errorText;\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Cleans up the supplementary error and information text of the {@link #urlInputView}\n\t * bringing them back to the state when the form has been displayed for the first time.\n\t *\n\t * See {@link #isValid}.\n\t */\n\tresetFormStatus() {\n\t\tthis.urlInputView.errorText = null;\n\t\tthis.urlInputView.infoText = this._urlInputViewInfoDefault;\n\t}\n\n\t/**\n\t * Creates a labeled input view.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled input view instance.\n\t */\n\t_createUrlInput() {\n\t\tconst t = this.locale.t;\n\n\t\tconst labeledInput = new LabeledFieldView( this.locale, createLabeledInputText );\n\t\tconst inputField = labeledInput.fieldView;\n\n\t\tthis._urlInputViewInfoDefault = t( 'Paste the media URL in the input.' );\n\t\tthis._urlInputViewInfoTip = t( 'Tip: Paste the URL into the content to embed faster.' );\n\n\t\tlabeledInput.label = t( 'Media URL' );\n\t\tlabeledInput.infoText = this._urlInputViewInfoDefault;\n\n\t\tinputField.on( 'input', () => {\n\t\t\t// Display the tip text only when there is some value. Otherwise fall back to the default info text.\n\t\t\tlabeledInput.infoText = inputField.element.value ? this._urlInputViewInfoTip : this._urlInputViewInfoDefault;\n\t\t\tthis.mediaURLInputValue = inputField.element.value.trim();\n\t\t} );\n\n\t\treturn labeledInput;\n\t}\n\n\t/**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n\t_createButton( label, icon, className, eventName ) {\n\t\tconst button = new ButtonView( this.locale );\n\n\t\tbutton.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\tbutton.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: className\n\t\t\t}\n\t\t} );\n\n\t\tif ( eventName ) {\n\t\t\tbutton.delegate( 'execute' ).to( this, eventName );\n\t\t}\n\n\t\treturn button;\n\t}\n}\n\n/**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * e.g. click on {@link #saveButtonView}.\n *\n * @event submit\n */\n\n/**\n * Fired when the form view is canceled, e.g. by a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */\n"]},"metadata":{},"sourceType":"module"}