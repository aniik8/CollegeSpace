{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/todolistconverters\n */\n\n/* global document */\nimport { createElement } from 'ckeditor5/src/utils';\nimport { generateLiInUl, injectViewList, positionAfterUiElements, findNestedList } from './utils';\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It converts the `listItem` model element to an unordered list with a {@link module:engine/view/uielement~UIElement checkbox element}\n * at the beginning of each list item. It also merges the list with surrounding lists (if available).\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:engine/model/model~Model} model Model instance.\n * @param {Function} onCheckboxChecked Callback function.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function modelViewInsertion(model, onCheckboxChecked) {\n  return (evt, data, conversionApi) => {\n    const consumable = conversionApi.consumable;\n\n    if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n      return;\n    }\n\n    if (data.item.getAttribute('listType') != 'todo') {\n      return;\n    }\n\n    const modelItem = data.item;\n    consumable.consume(modelItem, 'insert');\n    consumable.consume(modelItem, 'attribute:listType');\n    consumable.consume(modelItem, 'attribute:listIndent');\n    consumable.consume(modelItem, 'attribute:todoListChecked');\n    const viewWriter = conversionApi.writer;\n    const viewItem = generateLiInUl(modelItem, conversionApi);\n    const isChecked = !!modelItem.getAttribute('todoListChecked');\n    const checkmarkElement = createCheckmarkElement(modelItem, viewWriter, isChecked, onCheckboxChecked);\n    const span = viewWriter.createContainerElement('span', {\n      class: 'todo-list__label__description'\n    });\n    viewWriter.addClass('todo-list', viewItem.parent);\n    viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), checkmarkElement);\n    viewWriter.insert(viewWriter.createPositionAfter(checkmarkElement), span);\n    injectViewList(modelItem, viewItem, conversionApi, model);\n  };\n}\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function dataModelViewInsertion(model) {\n  return (evt, data, conversionApi) => {\n    const consumable = conversionApi.consumable;\n\n    if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n      return;\n    }\n\n    if (data.item.getAttribute('listType') != 'todo') {\n      return;\n    }\n\n    const modelItem = data.item;\n    consumable.consume(modelItem, 'insert');\n    consumable.consume(modelItem, 'attribute:listType');\n    consumable.consume(modelItem, 'attribute:listIndent');\n    consumable.consume(modelItem, 'attribute:todoListChecked');\n    const viewWriter = conversionApi.writer;\n    const viewItem = generateLiInUl(modelItem, conversionApi);\n    viewWriter.addClass('todo-list', viewItem.parent);\n    const label = viewWriter.createContainerElement('label', {\n      class: 'todo-list__label'\n    });\n    const checkbox = viewWriter.createEmptyElement('input', {\n      type: 'checkbox',\n      disabled: 'disabled'\n    });\n    const span = viewWriter.createContainerElement('span', {\n      class: 'todo-list__label__description'\n    });\n\n    if (modelItem.getAttribute('todoListChecked')) {\n      viewWriter.setAttribute('checked', 'checked', checkbox);\n    }\n\n    viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), label);\n    viewWriter.insert(viewWriter.createPositionAt(label, 0), checkbox);\n    viewWriter.insert(viewWriter.createPositionAfter(checkbox), span);\n    injectViewList(modelItem, viewItem, conversionApi, model);\n  };\n}\n/**\n * A view-to-model converter for the checkbox element inside a view list item.\n *\n * It changes the `listType` of the model `listItem` to a `todo` value.\n * When a view checkbox element is marked as checked, an additional `todoListChecked=\"true\"` attribute is added to the model item.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input, a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\n\nexport function dataViewModelCheckmarkInsertion(evt, data, conversionApi) {\n  const modelCursor = data.modelCursor;\n  const modelItem = modelCursor.parent;\n  const viewItem = data.viewItem;\n\n  if (viewItem.getAttribute('type') != 'checkbox' || modelItem.name != 'listItem' || !modelCursor.isAtStart) {\n    return;\n  }\n\n  if (!conversionApi.consumable.consume(viewItem, {\n    name: true\n  })) {\n    return;\n  }\n\n  const writer = conversionApi.writer;\n  writer.setAttribute('listType', 'todo', modelItem);\n\n  if (data.viewItem.hasAttribute('checked')) {\n    writer.setAttribute('todoListChecked', true, modelItem);\n  }\n\n  data.modelRange = writer.createRange(modelCursor);\n}\n/**\n * A model-to-view converter for the `listType` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes to `<ul class=\"todo-list\">` and a\n * {@link module:engine/view/uielement~UIElement checkbox UI element} is added at the beginning\n * of the list item element (or vice versa).\n *\n * This converter is preceded by {@link module:list/converters~modelViewChangeType} and followed by\n * {@link module:list/converters~modelViewMergeAfterChangeType} to handle splitting and merging surrounding lists of the same type.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {Function} onCheckedChange Callback fired after clicking the checkbox UI element.\n * @param {module:engine/view/view~View} view Editing view controller.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function modelViewChangeType(onCheckedChange, view) {\n  return (evt, data, conversionApi) => {\n    const viewItem = conversionApi.mapper.toViewElement(data.item);\n    const viewWriter = conversionApi.writer;\n    const labelElement = findLabel(viewItem, view);\n\n    if (data.attributeNewValue == 'todo') {\n      const isChecked = !!data.item.getAttribute('todoListChecked');\n      const checkmarkElement = createCheckmarkElement(data.item, viewWriter, isChecked, onCheckedChange);\n      const span = viewWriter.createContainerElement('span', {\n        class: 'todo-list__label__description'\n      });\n      const itemRange = viewWriter.createRangeIn(viewItem);\n      const nestedList = findNestedList(viewItem);\n      const descriptionStart = positionAfterUiElements(itemRange.start);\n      const descriptionEnd = nestedList ? viewWriter.createPositionBefore(nestedList) : itemRange.end;\n      const descriptionRange = viewWriter.createRange(descriptionStart, descriptionEnd);\n      viewWriter.addClass('todo-list', viewItem.parent);\n      viewWriter.move(descriptionRange, viewWriter.createPositionAt(span, 0));\n      viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), checkmarkElement);\n      viewWriter.insert(viewWriter.createPositionAfter(checkmarkElement), span);\n    } else if (data.attributeOldValue == 'todo') {\n      const descriptionSpan = findDescription(viewItem, view);\n      viewWriter.removeClass('todo-list', viewItem.parent);\n      viewWriter.remove(labelElement);\n      viewWriter.move(viewWriter.createRangeIn(descriptionSpan), viewWriter.createPositionBefore(descriptionSpan));\n      viewWriter.remove(descriptionSpan);\n    }\n  };\n}\n/**\n * A model-to-view converter for the `todoListChecked` attribute change on the `listItem` model element.\n *\n * It marks the {@link module:engine/view/uielement~UIElement checkbox UI element} as checked.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {Function} onCheckedChange Callback fired after clicking the checkbox UI element.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function modelViewChangeChecked(onCheckedChange) {\n  return (evt, data, conversionApi) => {\n    // Do not convert `todoListChecked` attribute when to-do list item has changed to other list item.\n    // This attribute will be removed by the model post fixer.\n    if (data.item.getAttribute('listType') != 'todo') {\n      return;\n    }\n\n    if (!conversionApi.consumable.consume(data.item, 'attribute:todoListChecked')) {\n      return;\n    }\n\n    const {\n      mapper,\n      writer: viewWriter\n    } = conversionApi;\n    const isChecked = !!data.item.getAttribute('todoListChecked');\n    const viewItem = mapper.toViewElement(data.item); // Because of m -> v position mapper we can be sure checkbox is always at the beginning.\n\n    const oldCheckmarkElement = viewItem.getChild(0);\n    const newCheckmarkElement = createCheckmarkElement(data.item, viewWriter, isChecked, onCheckedChange);\n    viewWriter.insert(viewWriter.createPositionAfter(oldCheckmarkElement), newCheckmarkElement);\n    viewWriter.remove(oldCheckmarkElement);\n  };\n}\n/**\n * A model-to-view position at zero offset mapper.\n *\n * This helper ensures that position inside todo-list in the view is mapped after the checkbox.\n *\n * It only handles the position at the beginning of a list item as other positions are properly mapped be the default mapper.\n *\n * @param {module:engine/view/view~View} view\n * @return {Function}\n */\n\nexport function mapModelToViewPosition(view) {\n  return (evt, data) => {\n    const modelPosition = data.modelPosition;\n    const parent = modelPosition.parent;\n\n    if (!parent.is('element', 'listItem') || parent.getAttribute('listType') != 'todo') {\n      return;\n    }\n\n    const viewLi = data.mapper.toViewElement(parent);\n    const descSpan = findDescription(viewLi, view);\n\n    if (descSpan) {\n      data.viewPosition = data.mapper.findPositionIn(descSpan, modelPosition.offset);\n    }\n  };\n} // Creates a checkbox UI element.\n//\n// @private\n// @param {module:engine/model/item~Item} modelItem\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {Boolean} isChecked\n// @param {Function} onChange\n// @returns {module:view/uielement~UIElement}\n\nfunction createCheckmarkElement(modelItem, viewWriter, isChecked, onChange) {\n  const uiElement = viewWriter.createUIElement('label', {\n    class: 'todo-list__label',\n    contenteditable: false\n  }, function (domDocument) {\n    const checkbox = createElement(document, 'input', {\n      type: 'checkbox'\n    });\n\n    if (isChecked) {\n      checkbox.setAttribute('checked', 'checked');\n    }\n\n    checkbox.addEventListener('change', () => onChange(modelItem));\n    const domElement = this.toDomElement(domDocument);\n    domElement.appendChild(checkbox);\n    return domElement;\n  });\n  return uiElement;\n} // Helper method to find label element inside li.\n\n\nfunction findLabel(viewItem, view) {\n  const range = view.createRangeIn(viewItem);\n\n  for (const value of range) {\n    if (value.item.is('uiElement', 'label')) {\n      return value.item;\n    }\n  }\n}\n\nfunction findDescription(viewItem, view) {\n  const range = view.createRangeIn(viewItem);\n\n  for (const value of range) {\n    if (value.item.is('containerElement', 'span') && value.item.hasClass('todo-list__label__description')) {\n      return value.item;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-list/src/todolistconverters.js"],"names":["createElement","generateLiInUl","injectViewList","positionAfterUiElements","findNestedList","modelViewInsertion","model","onCheckboxChecked","evt","data","conversionApi","consumable","test","item","getAttribute","modelItem","consume","viewWriter","writer","viewItem","isChecked","checkmarkElement","createCheckmarkElement","span","createContainerElement","class","addClass","parent","insert","createPositionAt","createPositionAfter","dataModelViewInsertion","label","checkbox","createEmptyElement","type","disabled","setAttribute","dataViewModelCheckmarkInsertion","modelCursor","name","isAtStart","hasAttribute","modelRange","createRange","modelViewChangeType","onCheckedChange","view","mapper","toViewElement","labelElement","findLabel","attributeNewValue","itemRange","createRangeIn","nestedList","descriptionStart","start","descriptionEnd","createPositionBefore","end","descriptionRange","move","attributeOldValue","descriptionSpan","findDescription","removeClass","remove","modelViewChangeChecked","oldCheckmarkElement","getChild","newCheckmarkElement","mapModelToViewPosition","modelPosition","is","viewLi","descSpan","viewPosition","findPositionIn","offset","onChange","uiElement","createUIElement","contenteditable","domDocument","document","addEventListener","domElement","toDomElement","appendChild","range","value","hasClass"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/todolistconverters\n */\n\n/* global document */\n\nimport { createElement } from 'ckeditor5/src/utils';\n\nimport { generateLiInUl, injectViewList, positionAfterUiElements, findNestedList } from './utils';\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It converts the `listItem` model element to an unordered list with a {@link module:engine/view/uielement~UIElement checkbox element}\n * at the beginning of each list item. It also merges the list with surrounding lists (if available).\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:engine/model/model~Model} model Model instance.\n * @param {Function} onCheckboxChecked Callback function.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewInsertion( model, onCheckboxChecked ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.item;\n\n\t\tconsumable.consume( modelItem, 'insert' );\n\t\tconsumable.consume( modelItem, 'attribute:listType' );\n\t\tconsumable.consume( modelItem, 'attribute:listIndent' );\n\t\tconsumable.consume( modelItem, 'attribute:todoListChecked' );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tconst isChecked = !!modelItem.getAttribute( 'todoListChecked' );\n\t\tconst checkmarkElement = createCheckmarkElement( modelItem, viewWriter, isChecked, onCheckboxChecked );\n\n\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\tclass: 'todo-list__label__description'\n\t\t} );\n\n\t\tviewWriter.addClass( 'todo-list', viewItem.parent );\n\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), checkmarkElement );\n\t\tviewWriter.insert( viewWriter.createPositionAfter( checkmarkElement ), span );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function dataModelViewInsertion( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.item;\n\n\t\tconsumable.consume( modelItem, 'insert' );\n\t\tconsumable.consume( modelItem, 'attribute:listType' );\n\t\tconsumable.consume( modelItem, 'attribute:listIndent' );\n\t\tconsumable.consume( modelItem, 'attribute:todoListChecked' );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tviewWriter.addClass( 'todo-list', viewItem.parent );\n\n\t\tconst label = viewWriter.createContainerElement( 'label', {\n\t\t\tclass: 'todo-list__label'\n\t\t} );\n\n\t\tconst checkbox = viewWriter.createEmptyElement( 'input', {\n\t\t\ttype: 'checkbox',\n\t\t\tdisabled: 'disabled'\n\t\t} );\n\n\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\tclass: 'todo-list__label__description'\n\t\t} );\n\n\t\tif ( modelItem.getAttribute( 'todoListChecked' ) ) {\n\t\t\tviewWriter.setAttribute( 'checked', 'checked', checkbox );\n\t\t}\n\n\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), label );\n\t\tviewWriter.insert( viewWriter.createPositionAt( label, 0 ), checkbox );\n\t\tviewWriter.insert( viewWriter.createPositionAfter( checkbox ), span );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A view-to-model converter for the checkbox element inside a view list item.\n *\n * It changes the `listType` of the model `listItem` to a `todo` value.\n * When a view checkbox element is marked as checked, an additional `todoListChecked=\"true\"` attribute is added to the model item.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input, a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\nexport function dataViewModelCheckmarkInsertion( evt, data, conversionApi ) {\n\tconst modelCursor = data.modelCursor;\n\tconst modelItem = modelCursor.parent;\n\tconst viewItem = data.viewItem;\n\n\tif ( viewItem.getAttribute( 'type' ) != 'checkbox' || modelItem.name != 'listItem' || !modelCursor.isAtStart ) {\n\t\treturn;\n\t}\n\n\tif ( !conversionApi.consumable.consume( viewItem, { name: true } ) ) {\n\t\treturn;\n\t}\n\n\tconst writer = conversionApi.writer;\n\n\twriter.setAttribute( 'listType', 'todo', modelItem );\n\n\tif ( data.viewItem.hasAttribute( 'checked' ) ) {\n\t\twriter.setAttribute( 'todoListChecked', true, modelItem );\n\t}\n\n\tdata.modelRange = writer.createRange( modelCursor );\n}\n\n/**\n * A model-to-view converter for the `listType` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes to `<ul class=\"todo-list\">` and a\n * {@link module:engine/view/uielement~UIElement checkbox UI element} is added at the beginning\n * of the list item element (or vice versa).\n *\n * This converter is preceded by {@link module:list/converters~modelViewChangeType} and followed by\n * {@link module:list/converters~modelViewMergeAfterChangeType} to handle splitting and merging surrounding lists of the same type.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {Function} onCheckedChange Callback fired after clicking the checkbox UI element.\n * @param {module:engine/view/view~View} view Editing view controller.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewChangeType( onCheckedChange, view ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tconst labelElement = findLabel( viewItem, view );\n\n\t\tif ( data.attributeNewValue == 'todo' ) {\n\t\t\tconst isChecked = !!data.item.getAttribute( 'todoListChecked' );\n\t\t\tconst checkmarkElement = createCheckmarkElement( data.item, viewWriter, isChecked, onCheckedChange );\n\n\t\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\t\tclass: 'todo-list__label__description'\n\t\t\t} );\n\n\t\t\tconst itemRange = viewWriter.createRangeIn( viewItem );\n\t\t\tconst nestedList = findNestedList( viewItem );\n\n\t\t\tconst descriptionStart = positionAfterUiElements( itemRange.start );\n\t\t\tconst descriptionEnd = nestedList ? viewWriter.createPositionBefore( nestedList ) : itemRange.end;\n\t\t\tconst descriptionRange = viewWriter.createRange( descriptionStart, descriptionEnd );\n\n\t\t\tviewWriter.addClass( 'todo-list', viewItem.parent );\n\t\t\tviewWriter.move( descriptionRange, viewWriter.createPositionAt( span, 0 ) );\n\t\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), checkmarkElement );\n\t\t\tviewWriter.insert( viewWriter.createPositionAfter( checkmarkElement ), span );\n\t\t} else if ( data.attributeOldValue == 'todo' ) {\n\t\t\tconst descriptionSpan = findDescription( viewItem, view );\n\n\t\t\tviewWriter.removeClass( 'todo-list', viewItem.parent );\n\t\t\tviewWriter.remove( labelElement );\n\t\t\tviewWriter.move( viewWriter.createRangeIn( descriptionSpan ), viewWriter.createPositionBefore( descriptionSpan ) );\n\t\t\tviewWriter.remove( descriptionSpan );\n\t\t}\n\t};\n}\n\n/**\n * A model-to-view converter for the `todoListChecked` attribute change on the `listItem` model element.\n *\n * It marks the {@link module:engine/view/uielement~UIElement checkbox UI element} as checked.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {Function} onCheckedChange Callback fired after clicking the checkbox UI element.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewChangeChecked( onCheckedChange ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Do not convert `todoListChecked` attribute when to-do list item has changed to other list item.\n\t\t// This attribute will be removed by the model post fixer.\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:todoListChecked' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { mapper, writer: viewWriter } = conversionApi;\n\t\tconst isChecked = !!data.item.getAttribute( 'todoListChecked' );\n\t\tconst viewItem = mapper.toViewElement( data.item );\n\t\t// Because of m -> v position mapper we can be sure checkbox is always at the beginning.\n\t\tconst oldCheckmarkElement = viewItem.getChild( 0 );\n\t\tconst newCheckmarkElement = createCheckmarkElement( data.item, viewWriter, isChecked, onCheckedChange );\n\n\t\tviewWriter.insert( viewWriter.createPositionAfter( oldCheckmarkElement ), newCheckmarkElement );\n\t\tviewWriter.remove( oldCheckmarkElement );\n\t};\n}\n\n/**\n * A model-to-view position at zero offset mapper.\n *\n * This helper ensures that position inside todo-list in the view is mapped after the checkbox.\n *\n * It only handles the position at the beginning of a list item as other positions are properly mapped be the default mapper.\n *\n * @param {module:engine/view/view~View} view\n * @return {Function}\n */\nexport function mapModelToViewPosition( view ) {\n\treturn ( evt, data ) => {\n\t\tconst modelPosition = data.modelPosition;\n\t\tconst parent = modelPosition.parent;\n\n\t\tif ( !parent.is( 'element', 'listItem' ) || parent.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewLi = data.mapper.toViewElement( parent );\n\t\tconst descSpan = findDescription( viewLi, view );\n\n\t\tif ( descSpan ) {\n\t\t\tdata.viewPosition = data.mapper.findPositionIn( descSpan, modelPosition.offset );\n\t\t}\n\t};\n}\n\n// Creates a checkbox UI element.\n//\n// @private\n// @param {module:engine/model/item~Item} modelItem\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {Boolean} isChecked\n// @param {Function} onChange\n// @returns {module:view/uielement~UIElement}\nfunction createCheckmarkElement( modelItem, viewWriter, isChecked, onChange ) {\n\tconst uiElement = viewWriter.createUIElement(\n\t\t'label',\n\t\t{\n\t\t\tclass: 'todo-list__label',\n\t\t\tcontenteditable: false\n\t\t},\n\t\tfunction( domDocument ) {\n\t\t\tconst checkbox = createElement( document, 'input', { type: 'checkbox' } );\n\n\t\t\tif ( isChecked ) {\n\t\t\t\tcheckbox.setAttribute( 'checked', 'checked' );\n\t\t\t}\n\n\t\t\tcheckbox.addEventListener( 'change', () => onChange( modelItem ) );\n\n\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\tdomElement.appendChild( checkbox );\n\n\t\t\treturn domElement;\n\t\t}\n\t);\n\n\treturn uiElement;\n}\n\n// Helper method to find label element inside li.\nfunction findLabel( viewItem, view ) {\n\tconst range = view.createRangeIn( viewItem );\n\n\tfor ( const value of range ) {\n\t\tif ( value.item.is( 'uiElement', 'label' ) ) {\n\t\t\treturn value.item;\n\t\t}\n\t}\n}\n\nfunction findDescription( viewItem, view ) {\n\tconst range = view.createRangeIn( viewItem );\n\n\tfor ( const value of range ) {\n\t\tif ( value.item.is( 'containerElement', 'span' ) && value.item.hasClass( 'todo-list__label__description' ) ) {\n\t\t\treturn value.item;\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}