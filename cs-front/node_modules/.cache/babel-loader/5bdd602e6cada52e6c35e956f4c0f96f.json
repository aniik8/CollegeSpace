{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaregistry\n */\nimport { TooltipView, IconView, Template } from 'ckeditor5/src/ui';\nimport { logWarning, toArray } from 'ckeditor5/src/utils';\nimport mediaPlaceholderIcon from '../theme/icons/media-placeholder.svg';\nconst mediaPlaceholderIconViewBox = '0 0 64 42';\n/**\n * A bridge between the raw media content provider definitions and the editor view content.\n *\n * It helps translating media URLs to corresponding {@link module:engine/view/element~Element view elements}.\n *\n * Mostly used by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} plugin.\n */\n\nexport default class MediaRegistry {\n  /**\n   * Creates an instance of the {@link module:media-embed/mediaregistry~MediaRegistry} class.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   * @param {module:media-embed/mediaembed~MediaEmbedConfig} config The configuration of the media embed feature.\n   */\n  constructor(locale, config) {\n    const providers = config.providers;\n    const extraProviders = config.extraProviders || [];\n    const removedProviders = new Set(config.removeProviders);\n    const providerDefinitions = providers.concat(extraProviders).filter(provider => {\n      const name = provider.name;\n\n      if (!name) {\n        /**\n         * One of the providers (or extra providers) specified in the media embed configuration\n         * has no name and will not be used by the editor. In order to get this media\n         * provider working, double check your editor configuration.\n         *\n         * @error media-embed-no-provider-name\n         */\n        logWarning('media-embed-no-provider-name', {\n          provider\n        });\n        return false;\n      }\n\n      return !removedProviders.has(name);\n    });\n    /**\n     * The {@link module:utils/locale~Locale} instance.\n     *\n     * @member {module:utils/locale~Locale}\n     */\n\n    this.locale = locale;\n    /**\n     * The media provider definitions available for the registry. Usually corresponding with the\n     * {@link module:media-embed/mediaembed~MediaEmbedConfig media configuration}.\n     *\n     * @member {Array}\n     */\n\n    this.providerDefinitions = providerDefinitions;\n  }\n  /**\n   * Checks whether the passed URL is representing a certain media type allowed in the editor.\n   *\n   * @param {String} url The URL to be checked\n   * @returns {Boolean}\n   */\n\n\n  hasMedia(url) {\n    return !!this._getMedia(url);\n  }\n  /**\n   * For the given media URL string and options, it returns the {@link module:engine/view/element~Element view element}\n   * representing that media.\n   *\n   * **Note:** If no URL is specified, an empty view element is returned.\n   *\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n   * @param {String} url The URL to be translated into a view element.\n   * @param {Object} options\n   * @param {String} [options.elementName]\n   * @param {Boolean} [options.renderMediaPreview]\n   * @param {Boolean} [options.renderForEditingView]\n   * @returns {module:engine/view/element~Element}\n   */\n\n\n  getMediaViewElement(writer, url, options) {\n    return this._getMedia(url).getViewElement(writer, options);\n  }\n  /**\n   * Returns a `Media` instance for the given URL.\n   *\n   * @protected\n   * @param {String} url The URL of the media.\n   * @returns {module:media-embed/mediaregistry~Media|null} The `Media` instance or `null` when there is none.\n   */\n\n\n  _getMedia(url) {\n    if (!url) {\n      return new Media(this.locale);\n    }\n\n    url = url.trim();\n\n    for (const definition of this.providerDefinitions) {\n      const previewRenderer = definition.html;\n      const pattern = toArray(definition.url);\n\n      for (const subPattern of pattern) {\n        const match = this._getUrlMatches(url, subPattern);\n\n        if (match) {\n          return new Media(this.locale, url, match, previewRenderer);\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Tries to match `url` to `pattern`.\n   *\n   * @private\n   * @param {String} url The URL of the media.\n   * @param {RegExp} pattern The pattern that should accept the media URL.\n   * @returns {Array|null}\n   */\n\n\n  _getUrlMatches(url, pattern) {\n    // 1. Try to match without stripping the protocol and \"www\" subdomain.\n    let match = url.match(pattern);\n\n    if (match) {\n      return match;\n    } // 2. Try to match after stripping the protocol.\n\n\n    let rawUrl = url.replace(/^https?:\\/\\//, '');\n    match = rawUrl.match(pattern);\n\n    if (match) {\n      return match;\n    } // 3. Try to match after stripping the \"www\" subdomain.\n\n\n    rawUrl = rawUrl.replace(/^www\\./, '');\n    match = rawUrl.match(pattern);\n\n    if (match) {\n      return match;\n    }\n\n    return null;\n  }\n\n}\n/**\n * Represents media defined by the provider configuration.\n *\n * It can be rendered to the {@link module:engine/view/element~Element view element} and used in the editing or data pipeline.\n *\n * @private\n */\n\nclass Media {\n  constructor(locale, url, match, previewRenderer) {\n    /**\n     * The URL this Media instance represents.\n     *\n     * @member {String}\n     */\n    this.url = this._getValidUrl(url);\n    /**\n     * Shorthand for {@link module:utils/locale~Locale#t}.\n     *\n     * @see module:utils/locale~Locale#t\n     * @method\n     */\n\n    this._t = locale.t;\n    /**\n     * The output of the `RegExp.match` which validated the {@link #url} of this media.\n     *\n     * @member {Object}\n     */\n\n    this._match = match;\n    /**\n     * The function returning the HTML string preview of this media.\n     *\n     * @member {Function}\n     */\n\n    this._previewRenderer = previewRenderer;\n  }\n  /**\n   * Returns the view element representation of the media.\n   *\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n   * @param {Object} options\n   * @param {String} [options.elementName]\n   * @param {Boolean} [options.renderMediaPreview]\n   * @param {Boolean} [options.renderForEditingView]\n   * @returns {module:engine/view/element~Element}\n   */\n\n\n  getViewElement(writer, options) {\n    const attributes = {};\n    let viewElement;\n\n    if (options.renderForEditingView || options.renderMediaPreview && this.url && this._previewRenderer) {\n      if (this.url) {\n        attributes['data-oembed-url'] = this.url;\n      }\n\n      if (options.renderForEditingView) {\n        attributes.class = 'ck-media__wrapper';\n      }\n\n      const mediaHtml = this._getPreviewHtml(options);\n\n      viewElement = writer.createRawElement('div', attributes, (domElement, domConverter) => {\n        domConverter.setContentOf(domElement, mediaHtml);\n      });\n    } else {\n      if (this.url) {\n        attributes.url = this.url;\n      }\n\n      viewElement = writer.createEmptyElement(options.elementName, attributes);\n    }\n\n    writer.setCustomProperty('media-content', true, viewElement);\n    return viewElement;\n  }\n  /**\n   * Returns the HTML string of the media content preview.\n   *\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n   * @param {Object} options\n   * @param {Boolean} [options.renderForEditingView]\n   * @returns {String}\n   */\n\n\n  _getPreviewHtml(options) {\n    if (this._previewRenderer) {\n      return this._previewRenderer(this._match);\n    } else {\n      // The placeholder only makes sense for editing view and media which have URLs.\n      // Placeholder is never displayed in data and URL-less media have no content.\n      if (this.url && options.renderForEditingView) {\n        return this._getPlaceholderHtml();\n      }\n\n      return '';\n    }\n  }\n  /**\n   * Returns the placeholder HTML when the media has no content preview.\n   *\n   * @returns {String}\n   */\n\n\n  _getPlaceholderHtml() {\n    const tooltip = new TooltipView();\n    const icon = new IconView();\n    tooltip.text = this._t('Open media in new tab');\n    icon.content = mediaPlaceholderIcon;\n    icon.viewBox = mediaPlaceholderIconViewBox;\n    const placeholder = new Template({\n      tag: 'div',\n      attributes: {\n        class: 'ck ck-reset_all ck-media__placeholder'\n      },\n      children: [{\n        tag: 'div',\n        attributes: {\n          class: 'ck-media__placeholder__icon'\n        },\n        children: [icon]\n      }, {\n        tag: 'a',\n        attributes: {\n          class: 'ck-media__placeholder__url',\n          target: '_blank',\n          rel: 'noopener noreferrer',\n          href: this.url\n        },\n        children: [{\n          tag: 'span',\n          attributes: {\n            class: 'ck-media__placeholder__url__text'\n          },\n          children: [this.url]\n        }, tooltip]\n      }]\n    }).render();\n    return placeholder.outerHTML;\n  }\n  /**\n   * Returns the full URL to the specified media.\n   *\n   * @param {String} url The URL of the media.\n   * @returns {String|null}\n   */\n\n\n  _getValidUrl(url) {\n    if (!url) {\n      return null;\n    }\n\n    if (url.match(/^https?/)) {\n      return url;\n    }\n\n    return 'https://' + url;\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-media-embed/src/mediaregistry.js"],"names":["TooltipView","IconView","Template","logWarning","toArray","mediaPlaceholderIcon","mediaPlaceholderIconViewBox","MediaRegistry","constructor","locale","config","providers","extraProviders","removedProviders","Set","removeProviders","providerDefinitions","concat","filter","provider","name","has","hasMedia","url","_getMedia","getMediaViewElement","writer","options","getViewElement","Media","trim","definition","previewRenderer","html","pattern","subPattern","match","_getUrlMatches","rawUrl","replace","_getValidUrl","_t","t","_match","_previewRenderer","attributes","viewElement","renderForEditingView","renderMediaPreview","class","mediaHtml","_getPreviewHtml","createRawElement","domElement","domConverter","setContentOf","createEmptyElement","elementName","setCustomProperty","_getPlaceholderHtml","tooltip","icon","text","content","viewBox","placeholder","tag","children","target","rel","href","render","outerHTML"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaregistry\n */\n\nimport { TooltipView, IconView, Template } from 'ckeditor5/src/ui';\nimport { logWarning, toArray } from 'ckeditor5/src/utils';\n\nimport mediaPlaceholderIcon from '../theme/icons/media-placeholder.svg';\n\nconst mediaPlaceholderIconViewBox = '0 0 64 42';\n\n/**\n * A bridge between the raw media content provider definitions and the editor view content.\n *\n * It helps translating media URLs to corresponding {@link module:engine/view/element~Element view elements}.\n *\n * Mostly used by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} plugin.\n */\nexport default class MediaRegistry {\n\t/**\n\t * Creates an instance of the {@link module:media-embed/mediaregistry~MediaRegistry} class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {module:media-embed/mediaembed~MediaEmbedConfig} config The configuration of the media embed feature.\n\t */\n\tconstructor( locale, config ) {\n\t\tconst providers = config.providers;\n\t\tconst extraProviders = config.extraProviders || [];\n\t\tconst removedProviders = new Set( config.removeProviders );\n\t\tconst providerDefinitions = providers\n\t\t\t.concat( extraProviders )\n\t\t\t.filter( provider => {\n\t\t\t\tconst name = provider.name;\n\n\t\t\t\tif ( !name ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * One of the providers (or extra providers) specified in the media embed configuration\n\t\t\t\t\t * has no name and will not be used by the editor. In order to get this media\n\t\t\t\t\t * provider working, double check your editor configuration.\n\t\t\t\t\t *\n\t\t\t\t\t * @error media-embed-no-provider-name\n\t\t\t\t\t */\n\t\t\t\t\tlogWarning( 'media-embed-no-provider-name', { provider } );\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn !removedProviders.has( name );\n\t\t\t} );\n\n\t\t/**\n\t\t * The {@link module:utils/locale~Locale} instance.\n\t\t *\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * The media provider definitions available for the registry. Usually corresponding with the\n\t\t * {@link module:media-embed/mediaembed~MediaEmbedConfig media configuration}.\n\t\t *\n\t\t * @member {Array}\n\t\t */\n\t\tthis.providerDefinitions = providerDefinitions;\n\t}\n\n\t/**\n\t * Checks whether the passed URL is representing a certain media type allowed in the editor.\n\t *\n\t * @param {String} url The URL to be checked\n\t * @returns {Boolean}\n\t */\n\thasMedia( url ) {\n\t\treturn !!this._getMedia( url );\n\t}\n\n\t/**\n\t * For the given media URL string and options, it returns the {@link module:engine/view/element~Element view element}\n\t * representing that media.\n\t *\n\t * **Note:** If no URL is specified, an empty view element is returned.\n\t *\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n\t * @param {String} url The URL to be translated into a view element.\n\t * @param {Object} options\n\t * @param {String} [options.elementName]\n\t * @param {Boolean} [options.renderMediaPreview]\n\t * @param {Boolean} [options.renderForEditingView]\n\t * @returns {module:engine/view/element~Element}\n\t */\n\tgetMediaViewElement( writer, url, options ) {\n\t\treturn this._getMedia( url ).getViewElement( writer, options );\n\t}\n\n\t/**\n\t * Returns a `Media` instance for the given URL.\n\t *\n\t * @protected\n\t * @param {String} url The URL of the media.\n\t * @returns {module:media-embed/mediaregistry~Media|null} The `Media` instance or `null` when there is none.\n\t */\n\t_getMedia( url ) {\n\t\tif ( !url ) {\n\t\t\treturn new Media( this.locale );\n\t\t}\n\n\t\turl = url.trim();\n\n\t\tfor ( const definition of this.providerDefinitions ) {\n\t\t\tconst previewRenderer = definition.html;\n\t\t\tconst pattern = toArray( definition.url );\n\n\t\t\tfor ( const subPattern of pattern ) {\n\t\t\t\tconst match = this._getUrlMatches( url, subPattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn new Media( this.locale, url, match, previewRenderer );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to match `url` to `pattern`.\n\t *\n\t * @private\n\t * @param {String} url The URL of the media.\n\t * @param {RegExp} pattern The pattern that should accept the media URL.\n\t * @returns {Array|null}\n\t */\n\t_getUrlMatches( url, pattern ) {\n\t\t// 1. Try to match without stripping the protocol and \"www\" subdomain.\n\t\tlet match = url.match( pattern );\n\n\t\tif ( match ) {\n\t\t\treturn match;\n\t\t}\n\n\t\t// 2. Try to match after stripping the protocol.\n\t\tlet rawUrl = url.replace( /^https?:\\/\\//, '' );\n\t\tmatch = rawUrl.match( pattern );\n\n\t\tif ( match ) {\n\t\t\treturn match;\n\t\t}\n\n\t\t// 3. Try to match after stripping the \"www\" subdomain.\n\t\trawUrl = rawUrl.replace( /^www\\./, '' );\n\t\tmatch = rawUrl.match( pattern );\n\n\t\tif ( match ) {\n\t\t\treturn match;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n/**\n * Represents media defined by the provider configuration.\n *\n * It can be rendered to the {@link module:engine/view/element~Element view element} and used in the editing or data pipeline.\n *\n * @private\n */\nclass Media {\n\tconstructor( locale, url, match, previewRenderer ) {\n\t\t/**\n\t\t * The URL this Media instance represents.\n\t\t *\n\t\t * @member {String}\n\t\t */\n\t\tthis.url = this._getValidUrl( url );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method\n\t\t */\n\t\tthis._t = locale.t;\n\n\t\t/**\n\t\t * The output of the `RegExp.match` which validated the {@link #url} of this media.\n\t\t *\n\t\t * @member {Object}\n\t\t */\n\t\tthis._match = match;\n\n\t\t/**\n\t\t * The function returning the HTML string preview of this media.\n\t\t *\n\t\t * @member {Function}\n\t\t */\n\t\tthis._previewRenderer = previewRenderer;\n\t}\n\n\t/**\n\t * Returns the view element representation of the media.\n\t *\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n\t * @param {Object} options\n\t * @param {String} [options.elementName]\n\t * @param {Boolean} [options.renderMediaPreview]\n\t * @param {Boolean} [options.renderForEditingView]\n\t * @returns {module:engine/view/element~Element}\n\t */\n\tgetViewElement( writer, options ) {\n\t\tconst attributes = {};\n\t\tlet viewElement;\n\n\t\tif ( options.renderForEditingView || ( options.renderMediaPreview && this.url && this._previewRenderer ) ) {\n\t\t\tif ( this.url ) {\n\t\t\t\tattributes[ 'data-oembed-url' ] = this.url;\n\t\t\t}\n\n\t\t\tif ( options.renderForEditingView ) {\n\t\t\t\tattributes.class = 'ck-media__wrapper';\n\t\t\t}\n\n\t\t\tconst mediaHtml = this._getPreviewHtml( options );\n\n\t\t\tviewElement = writer.createRawElement( 'div', attributes, ( domElement, domConverter ) => {\n\t\t\t\tdomConverter.setContentOf( domElement, mediaHtml );\n\t\t\t} );\n\t\t} else {\n\t\t\tif ( this.url ) {\n\t\t\t\tattributes.url = this.url;\n\t\t\t}\n\n\t\t\tviewElement = writer.createEmptyElement( options.elementName, attributes );\n\t\t}\n\n\t\twriter.setCustomProperty( 'media-content', true, viewElement );\n\n\t\treturn viewElement;\n\t}\n\n\t/**\n\t * Returns the HTML string of the media content preview.\n\t *\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n\t * @param {Object} options\n\t * @param {Boolean} [options.renderForEditingView]\n\t * @returns {String}\n\t */\n\t_getPreviewHtml( options ) {\n\t\tif ( this._previewRenderer ) {\n\t\t\treturn this._previewRenderer( this._match );\n\t\t} else {\n\t\t\t// The placeholder only makes sense for editing view and media which have URLs.\n\t\t\t// Placeholder is never displayed in data and URL-less media have no content.\n\t\t\tif ( this.url && options.renderForEditingView ) {\n\t\t\t\treturn this._getPlaceholderHtml();\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Returns the placeholder HTML when the media has no content preview.\n\t *\n\t * @returns {String}\n\t */\n\t_getPlaceholderHtml() {\n\t\tconst tooltip = new TooltipView();\n\t\tconst icon = new IconView();\n\n\t\ttooltip.text = this._t( 'Open media in new tab' );\n\t\ticon.content = mediaPlaceholderIcon;\n\t\ticon.viewBox = mediaPlaceholderIconViewBox;\n\n\t\tconst placeholder = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck ck-reset_all ck-media__placeholder'\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: 'ck-media__placeholder__icon'\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [ icon ]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: 'ck-media__placeholder__url',\n\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\trel: 'noopener noreferrer',\n\t\t\t\t\t\thref: this.url\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'span',\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\tclass: 'ck-media__placeholder__url__text'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tchildren: [ this.url ]\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttooltip\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t} ).render();\n\n\t\treturn placeholder.outerHTML;\n\t}\n\n\t/**\n\t * Returns the full URL to the specified media.\n\t *\n\t * @param {String} url The URL of the media.\n\t * @returns {String|null}\n\t */\n\t_getValidUrl( url ) {\n\t\tif ( !url ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( url.match( /^https?/ ) ) {\n\t\t\treturn url;\n\t\t}\n\n\t\treturn 'https://' + url;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}