{"ast":null,"code":"var _jsxFileName = \"/Users/jaibhole/Documents/CS/cs-front/src/Component/QnA.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport Error from './Error'; // import ReactQuill from 'react-quill';\n// import 'react-quill/dist/quill.snow.css';\n// import EditorToolbar, { modules, formats } from \"../EditorToolbar\";\n// import UpdateQ from './UpdateQ';\n\nimport CreateAns from './CreateAns';\nimport UpdateQ from './UpdateQ';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  \"width\": \"50%\",\n  \"height\": \"50%\",\n  \"margin\": \"auto\",\n  \"position\": \"absolute\",\n  \"top\": '0',\n  \"left\": '0',\n  \"bottom\": '0',\n  \"right\": '0'\n};\n\nconst QnA = () => {\n  _s();\n\n  const BaseUrl = `http://127.0.0.1:8000`;\n  const history = useHistory();\n  const [question, setQuestion] = useState([]);\n  const [ans, setans] = useState([]);\n  const [clicked, setclicked] = useState({\n    clicked4ans: false,\n    clicked4update: false,\n    answered: false,\n    isNull: true\n  });\n\n  const getData = async () => {\n    const data = await fetch(`${BaseUrl}${history.location.pathname}`);\n    const resdata = await data.json();\n    setQuestion(resdata);\n    setans(resdata);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: typeof question[0] === \"undefined\" ? /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 47\n      }, this) : question.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            style: containerStyle,\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: item.user === JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: item.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  color: \"#808080\"\n                },\n                children: item.question_date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 25\n              }, this), item.question !== undefined && item.user === JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn btn-success\",\n                onClick: () => setclicked({\n                  clicked4update: true\n                }),\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 29\n              }, this) : \"\"]\n            }, void 0, true)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: typeof ans[1] === \"undefined\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"No answer Yet. Please Create it here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 48\n        }, this), \" \", /*#__PURE__*/_jsxDEV(CreateAns, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 94\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        style: {\n          \"width\": \"50%\",\n          \"height\": \"50%\",\n          marginTop: \"15rem\"\n        },\n        children: ans[1].map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.answer\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Answered on : \", item.answered_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), item.status === true ? /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary\",\n              onClick: () => /*#__PURE__*/_jsxDEV(UpdateQ, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 108\n              }, this),\n              children: \"Update Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 43\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n          }, void 0, true);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QnA, \"UU69pnGXtto9ys8OmeM5TK48xhU=\", false, function () {\n  return [useHistory];\n});\n\n_c = QnA;\nexport default QnA;\n{\n  /* {question[1].map((item, index) => {\n                 return(<>\n                 {item.status === true ? setclicked({answered : true}) : <></>}\n                 <div className='container'>\n                     <p key={index}>{item.answer}</p>\n                     <p>Answered on : {item.answered_date}</p>\n                 </div>\n                 </>\n                 )\n             })}\n  \n  \n  <>\n         <div className='container' style={{width : \"75%\", marginTop:'5%'}}>\n         <h4>\n                 {question.map((item, index)=> {\n                     return(<>\n                    \n                         \n                         {clicked.clicked4update === true ?\n                         <UpdateQ q={item.question} qd={item.question_data} qid={item.id} qslug={item.slug}/> : \n                         <>\n                         <div key={index} style={{textAlign:\"center\"}}>\n                         <h2>{item.question}</h2>\n                         {item.question !== undefined ? <>\n                             <EditorToolbar toolbarId={'t1'}/>\n                             <ReactQuill\n                             theme=\"bubble\"\n                             readOnly={true}\n                             value={item.question_data}\n                             modules={modules('t1')}\n                             formats={formats}/> </>\n                         \n                         :<></>\n                          } </div>\n                         </>\n                         }\n                         {item.question !== undefined && item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id)\n                           ? \n                             <button type='button' className='btn btn-success' onClick={()=> setclicked({clicked4update:true})}>Update</button> : \"\" }\n                         \n                         \n                          <p>{item.user}</p>\n                         \n                     </>)\n                 })}\n             </h4>\n             \n             <hr/>\n             </div> */\n}\n{\n  /* https://medium.com/always-be-coding/four-steps-to-google-without-a-degree-8f381aa6bd5e */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"QnA\");","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/src/Component/QnA.js"],"names":["React","useEffect","useState","useHistory","Navbar","Error","CreateAns","UpdateQ","containerStyle","QnA","BaseUrl","history","question","setQuestion","ans","setans","clicked","setclicked","clicked4ans","clicked4update","answered","isNull","getData","data","fetch","location","pathname","resdata","json","map","item","index","user","JSON","parse","atob","localStorage","getItem","split","user_id","color","question_date","undefined","textAlign","marginTop","answer","id","answered_date","status"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport Navbar from './Navbar';\nimport Error from './Error';\n\n// import ReactQuill from 'react-quill';\n// import 'react-quill/dist/quill.snow.css';\n// import EditorToolbar, { modules, formats } from \"../EditorToolbar\";\n// import UpdateQ from './UpdateQ';\nimport CreateAns from './CreateAns';\nimport UpdateQ from './UpdateQ';\nconst containerStyle = {\"width\": \"50%\", \"height\": \"50%\", \"margin\": \"auto\", \"position\": \"absolute\",\n                        \"top\": '0',\"left\": '0', \"bottom\": '0', \"right\": '0'}\nconst QnA = () => {\n    const BaseUrl = `http://127.0.0.1:8000`\n    const history = useHistory();\n    const [question, setQuestion] = useState([])\n    const [ans, setans] = useState([])\n    const [clicked, setclicked] = useState({clicked4ans : false, clicked4update : false, answered : false, isNull : true});\n    const getData = async () => {\n        const data = await fetch(`${BaseUrl}${history.location.pathname}`)\n        const resdata = await data.json()\n        setQuestion(resdata)\n        setans(resdata)\n    }\n    \n    useEffect(() => {\n        getData(); \n    }, [])\n    \n    \n    return (\n        <>\n        <Navbar/>\n        \n        <div>\n        {typeof question[0] === \"undefined\" ? <Error/> : \n            question.map((item, index)=> {\n                    return(<>\n                        <div className='container' style={containerStyle} key={index}>\n                        <>\n                        <h2>{(item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id))}</h2>\n                        <h4>{item.question}</h4>\n                        <p style={{color : \"#808080\"}}>{item.question_date}</p>\n                        {item.question !== undefined && item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id)\n                          ? \n                            <button type='button' className='btn btn-success' onClick={()=> setclicked({clicked4update:true})}>Update</button> : \"\" }\n                        </> \n                            \n                        </div>\n                        \n                        </>\n                    \n                    )\n                })}\n           \n        </div> \n        <hr/>\n        <h2 style={{textAlign : 'center'}}>Answers</h2>\n        <div>\n            {typeof ans[1] === \"undefined\" ? <><h1>No answer Yet. Please Create it here</h1> <CreateAns/></> :\n            <div className='container' style={{\"width\": \"50%\", \"height\": \"50%\", marginTop : \"15rem\"}}>\n            {ans[1].map((item, index) => {\n               return( <>\n                <p key={item.id}>{item.answer}</p>\n                <p>Answered on : {item.answered_date}</p>\n                {(item.status) === true ? <button type='button' className='btn btn-primary' onClick={() => <UpdateQ/>} >\n                    Update Answer\n                </button>: <></> }\n                </>\n                )\n            })}\n        </div>}\n        </div>\n\n        {/* typeof question.questions === \"undefined\" ? <Error/> : */}\n        {/* {clicked.isNull === false ? \n            question[1].map((item, index) => {\n                return(<>\n                {item.status === true ? setclicked({answered : true}) : <></>}\n                <div className='container'>\n                    <p key={index}>{item.answer}</p>\n                    <p>Answered on : {item.answered_date}</p>\n                </div>\n                </>\n                )\n            }):<>\n            <h5>No answer .You haven't answered it yet</h5>\n            <p>Can you answer it?</p>\n            <button className='btn btn-success' onClick={() => setclicked({clicked4ans : true})}>Answer it here</button>\n            {clicked.clicked4ans === true ? \n            <>\n            <CreateAns/>\n            <button type='submit' className='btn btn-outline-danger' onClick={() => setclicked({clicked4ans : false})}>Cancel</button>\n           </>: <></>\n           }\n        </>\n         }  */}\n         </>    \n    )\n}\n\nexport default QnA\n\n{/* {question[1].map((item, index) => {\n                return(<>\n                {item.status === true ? setclicked({answered : true}) : <></>}\n                <div className='container'>\n                    <p key={index}>{item.answer}</p>\n                    <p>Answered on : {item.answered_date}</p>\n                </div>\n                </>\n                )\n            })}\n \n\n\n<>\n        <div className='container' style={{width : \"75%\", marginTop:'5%'}}>\n        <h4>\n                {question.map((item, index)=> {\n                    return(<>\n                   \n                        \n                        {clicked.clicked4update === true ?\n                        <UpdateQ q={item.question} qd={item.question_data} qid={item.id} qslug={item.slug}/> : \n                        <>\n                        <div key={index} style={{textAlign:\"center\"}}>\n                        <h2>{item.question}</h2>\n                        {item.question !== undefined ? <>\n                            <EditorToolbar toolbarId={'t1'}/>\n                            <ReactQuill\n                            theme=\"bubble\"\n                            readOnly={true}\n                            value={item.question_data}\n                            modules={modules('t1')}\n                            formats={formats}/> </>\n                        \n                        :<></>\n                         } </div>\n                        </>\n                        }\n                        {item.question !== undefined && item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id)\n                          ? \n                            <button type='button' className='btn btn-success' onClick={()=> setclicked({clicked4update:true})}>Update</button> : \"\" }\n                        \n                        \n                         <p>{item.user}</p>\n                        \n                    </>)\n                })}\n            </h4>\n            \n            <hr/>\n            </div> */}\n\n\n\n{/* https://medium.com/always-be-coding/four-steps-to-google-without-a-degree-8f381aa6bd5e */}"]},"metadata":{},"sourceType":"module"}