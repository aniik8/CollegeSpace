{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-decoupled/decouplededitor\n */\nimport { Editor, DataApiMixin, secureSourceElement } from 'ckeditor5/src/core';\nimport { CKEditorError, getDataFromElement, setDataInElement, mix } from 'ckeditor5/src/utils';\nimport { isElement } from 'lodash-es';\nimport DecoupledEditorUI from './decouplededitorui';\nimport DecoupledEditorUIView from './decouplededitoruiview';\n/**\n * The {@glink builds/guides/predefined-builds/overview#document-editor decoupled editor} implementation.\n * It provides an inline editable and a toolbar. However, unlike other editors,\n * it does not render these components anywhere in the DOM unless configured.\n *\n * This type of an editor is dedicated to integrations which require a customized UI with an open\n * structure, allowing developers to specify the exact location of the interface.\n *\n * See the document editor {@glink examples/builds/document-editor demo} to learn about possible use cases\n * for the decoupled editor.\n *\n * In order to create a decoupled editor instance, use the static\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method.\n *\n * # Decoupled editor and document editor build\n *\n * The decoupled editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-decoupled`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-decoupled) package)\n * but it is also available in the {@glink builds/guides/predefined-builds/overview#document-editor document editor build}.\n *\n * {@glink builds/guides/predefined-builds/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows for easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\n\nexport default class DecoupledEditor extends Editor {\n  /**\n   * Creates an instance of the decoupled editor.\n   *\n   * **Note:** Do not use the constructor to create editor instances. Use the static\n   * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method instead.\n   *\n   * @protected\n   * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n   * (on which the editor will be initialized) or initial data for the editor. For more information see\n   * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}.\n   * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n   */\n  constructor(sourceElementOrData, config) {\n    super(config);\n\n    if (isElement(sourceElementOrData)) {\n      this.sourceElement = sourceElementOrData;\n      secureSourceElement(this);\n    }\n\n    this.model.document.createRoot();\n    const shouldToolbarGroupWhenFull = !this.config.get('toolbar.shouldNotGroupWhenFull');\n    const view = new DecoupledEditorUIView(this.locale, this.editing.view, {\n      editableElement: this.sourceElement,\n      shouldToolbarGroupWhenFull\n    });\n    this.ui = new DecoupledEditorUI(this, view);\n  }\n  /**\n   * Destroys the editor instance, releasing all resources used by it.\n   *\n   * **Note**: The decoupled editor does not remove the toolbar and editable when destroyed. You can\n   * do that yourself in the destruction chain:\n   *\n   *\t\teditor.destroy()\n   *\t\t\t.then( () => {\n   *\t\t\t\t// Remove the toolbar from DOM.\n   *\t\t\t\teditor.ui.view.toolbar.element.remove();\n   *\n   *\t\t\t\t// Remove the editable from DOM.\n   *\t\t\t\teditor.ui.view.editable.element.remove();\n   *\n   *\t\t\t\tconsole.log( 'Editor was destroyed' );\n   *\t\t\t} );\n   *\n   * @returns {Promise}\n   */\n\n\n  destroy() {\n    // Cache the data, then destroy.\n    // It's safe to assume that the model->view conversion will not work after super.destroy().\n    const data = this.getData();\n    this.ui.destroy();\n    return super.destroy().then(() => {\n      if (this.sourceElement) {\n        setDataInElement(this.sourceElement, data);\n      }\n    });\n  }\n  /**\n   * Creates a new decoupled editor instance.\n   *\n   * Remember that `DecoupledEditor` does not append the toolbar element to your web page so you have to do it manually after the editor\n   * has been initialized.\n   *\n   * There are two ways how the editor can be initialized.\n   *\n   * # Using an existing DOM element (and loading data from it)\n   *\n   * You can initialize the editor using an existing DOM element:\n   *\n   *\t\tDecoupledEditor\n   *\t\t\t.create( document.querySelector( '#editor' ) )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\n   *\t\t\t\t// Append the toolbar to the <body> element.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * The element's content will be used as the editor data and the element will become the editable element.\n   *\n   * # Creating a detached editor\n   *\n   * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n   * In this case, you will have to manually append both the toolbar element and the editable element to your web page.\n   *\n   *\t\tDecoupledEditor\n   *\t\t\t.create( '<p>Hello world!</p>' )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\n   *\t\t\t\t// Append the toolbar to the <body> element.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n   *\n   *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.getEditableElement() );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n   * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n   *\n   * # Using an existing DOM element (and data provided in `config.initialData`)\n   *\n   * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n   *\n   *\t\tDecoupledEditor\n   *\t\t\t.create( document.querySelector( '#editor' ), {\n   *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n   *\t\t\t} )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\n   *\t\t\t\t// Append the toolbar to the <body> element.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n   * makes it difficult to set the content of the source element.\n   *\n   * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n   *\n   * # Configuring the editor\n   *\n   * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n   * customizing plugins, toolbar and more.\n   *\n   * # Using the editor from source\n   *\n   * The code samples listed in the previous sections of this documentation assume that you are using an\n   * {@glink builds/guides/predefined-builds/overview editor build} (for example â€“ `@ckeditor/ckeditor5-build-decoupled`).\n   *\n   * If you want to use the decoupled editor from source (`@ckeditor/ckeditor5-editor-decoupled/src/decouplededitor`),\n   * you need to define the list of\n   * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n   * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n   * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n   *\n   * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n   * or the editor's initial data.\n   *\n   * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization.\n   * Moreover, the editor data will be set back to the original element once the editor is destroyed.\n   *\n   * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n   * It is available via\n   * {@link module:editor-decoupled/decouplededitorui~DecoupledEditorUI#getEditableElement `editor.ui.getEditableElement()`}.\n   *\n   * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n   * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n   */\n\n\n  static create(sourceElementOrData) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise(resolve => {\n      const isHTMLElement = isElement(sourceElementOrData);\n\n      if (isHTMLElement && sourceElementOrData.tagName === 'TEXTAREA') {\n        // Documented in core/editor/editor.js\n        // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n        throw new CKEditorError('editor-wrong-element', null);\n      }\n\n      const editor = new this(sourceElementOrData, config);\n      resolve(editor.initPlugins().then(() => {\n        editor.ui.init();\n      }).then(() => {\n        if (!isHTMLElement && config.initialData) {\n          // Documented in core/editor/editorconfig.jdoc.\n          // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n          throw new CKEditorError('editor-create-initial-data', null);\n        }\n\n        const initialData = config.initialData !== undefined ? config.initialData : getInitialData(sourceElementOrData);\n        return editor.data.init(initialData);\n      }).then(() => editor.fire('ready')).then(() => editor));\n    });\n  }\n\n}\nmix(DecoupledEditor, DataApiMixin);\n\nfunction getInitialData(sourceElementOrData) {\n  return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-editor-decoupled/src/decouplededitor.js"],"names":["Editor","DataApiMixin","secureSourceElement","CKEditorError","getDataFromElement","setDataInElement","mix","isElement","DecoupledEditorUI","DecoupledEditorUIView","DecoupledEditor","constructor","sourceElementOrData","config","sourceElement","model","document","createRoot","shouldToolbarGroupWhenFull","get","view","locale","editing","editableElement","ui","destroy","data","getData","then","create","Promise","resolve","isHTMLElement","tagName","editor","initPlugins","init","initialData","undefined","getInitialData","fire"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-decoupled/decouplededitor\n */\n\nimport { Editor, DataApiMixin, secureSourceElement } from 'ckeditor5/src/core';\nimport { CKEditorError, getDataFromElement, setDataInElement, mix } from 'ckeditor5/src/utils';\n\nimport { isElement } from 'lodash-es';\n\nimport DecoupledEditorUI from './decouplededitorui';\nimport DecoupledEditorUIView from './decouplededitoruiview';\n\n/**\n * The {@glink builds/guides/predefined-builds/overview#document-editor decoupled editor} implementation.\n * It provides an inline editable and a toolbar. However, unlike other editors,\n * it does not render these components anywhere in the DOM unless configured.\n *\n * This type of an editor is dedicated to integrations which require a customized UI with an open\n * structure, allowing developers to specify the exact location of the interface.\n *\n * See the document editor {@glink examples/builds/document-editor demo} to learn about possible use cases\n * for the decoupled editor.\n *\n * In order to create a decoupled editor instance, use the static\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method.\n *\n * # Decoupled editor and document editor build\n *\n * The decoupled editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-decoupled`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-decoupled) package)\n * but it is also available in the {@glink builds/guides/predefined-builds/overview#document-editor document editor build}.\n *\n * {@glink builds/guides/predefined-builds/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows for easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nexport default class DecoupledEditor extends Editor {\n\t/**\n\t * Creates an instance of the decoupled editor.\n\t *\n\t * **Note:** Do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method instead.\n\t *\n\t * @protected\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * (on which the editor will be initialized) or initial data for the editor. For more information see\n\t * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t */\n\tconstructor( sourceElementOrData, config ) {\n\t\tsuper( config );\n\n\t\tif ( isElement( sourceElementOrData ) ) {\n\t\t\tthis.sourceElement = sourceElementOrData;\n\t\t\tsecureSourceElement( this );\n\t\t}\n\n\t\tthis.model.document.createRoot();\n\n\t\tconst shouldToolbarGroupWhenFull = !this.config.get( 'toolbar.shouldNotGroupWhenFull' );\n\t\tconst view = new DecoupledEditorUIView( this.locale, this.editing.view, {\n\t\t\teditableElement: this.sourceElement,\n\t\t\tshouldToolbarGroupWhenFull\n\t\t} );\n\n\t\tthis.ui = new DecoupledEditorUI( this, view );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * **Note**: The decoupled editor does not remove the toolbar and editable when destroyed. You can\n\t * do that yourself in the destruction chain:\n\t *\n\t *\t\teditor.destroy()\n\t *\t\t\t.then( () => {\n\t *\t\t\t\t// Remove the toolbar from DOM.\n\t *\t\t\t\teditor.ui.view.toolbar.element.remove();\n\t *\n\t *\t\t\t\t// Remove the editable from DOM.\n\t *\t\t\t\teditor.ui.view.editable.element.remove();\n\t *\n\t *\t\t\t\tconsole.log( 'Editor was destroyed' );\n\t *\t\t\t} );\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\t// Cache the data, then destroy.\n\t\t// It's safe to assume that the model->view conversion will not work after super.destroy().\n\t\tconst data = this.getData();\n\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy()\n\t\t\t.then( () => {\n\t\t\t\tif ( this.sourceElement ) {\n\t\t\t\t\tsetDataInElement( this.sourceElement, data );\n\t\t\t\t}\n\t\t\t} );\n\t}\n\n\t/**\n\t * Creates a new decoupled editor instance.\n\t *\n\t * Remember that `DecoupledEditor` does not append the toolbar element to your web page so you have to do it manually after the editor\n\t * has been initialized.\n\t *\n\t * There are two ways how the editor can be initialized.\n\t *\n\t * # Using an existing DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t *\t\tDecoupledEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ) )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Append the toolbar to the <body> element.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * The element's content will be used as the editor data and the element will become the editable element.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, you will have to manually append both the toolbar element and the editable element to your web page.\n\t *\n\t *\t\tDecoupledEditor\n\t *\t\t\t.create( '<p>Hello world!</p>' )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Append the toolbar to the <body> element.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t *\n\t *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.getEditableElement() );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Using an existing DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t *\t\tDecoupledEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Append the toolbar to the <body> element.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * # Using the editor from source\n\t *\n\t * The code samples listed in the previous sections of this documentation assume that you are using an\n\t * {@glink builds/guides/predefined-builds/overview editor build} (for example â€“ `@ckeditor/ckeditor5-build-decoupled`).\n\t *\n\t * If you want to use the decoupled editor from source (`@ckeditor/ckeditor5-editor-decoupled/src/decouplededitor`),\n\t * you need to define the list of\n\t * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n\t * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n\t *\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization.\n\t * Moreover, the editor data will be set back to the original element once the editor is destroyed.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available via\n\t * {@link module:editor-decoupled/decouplededitorui~DecoupledEditorUI#getEditableElement `editor.ui.getEditableElement()`}.\n\t *\n\t * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n\t * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */\n\tstatic create( sourceElementOrData, config = {} ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst isHTMLElement = isElement( sourceElementOrData );\n\n\t\t\tif ( isHTMLElement && sourceElementOrData.tagName === 'TEXTAREA' ) {\n\t\t\t\t// Documented in core/editor/editor.js\n\t\t\t\t// eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n\t\t\t\tthrow new CKEditorError( 'editor-wrong-element', null );\n\t\t\t}\n\n\t\t\tconst editor = new this( sourceElementOrData, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\teditor.ui.init();\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\tif ( !isHTMLElement && config.initialData ) {\n\t\t\t\t\t\t\t// Documented in core/editor/editorconfig.jdoc.\n\t\t\t\t\t\t\t// eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n\t\t\t\t\t\t\tthrow new CKEditorError( 'editor-create-initial-data', null );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst initialData = config.initialData !== undefined ? config.initialData : getInitialData( sourceElementOrData );\n\n\t\t\t\t\t\treturn editor.data.init( initialData );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor.fire( 'ready' ) )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( DecoupledEditor, DataApiMixin );\n\nfunction getInitialData( sourceElementOrData ) {\n\treturn isElement( sourceElementOrData ) ? getDataFromElement( sourceElementOrData ) : sourceElementOrData;\n}\n"]},"metadata":{},"sourceType":"module"}