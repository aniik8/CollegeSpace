{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals XMLHttpRequest, FormData */\n\n/**\n * @module adapter-ckfinder/uploadadapter\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { FileRepository } from 'ckeditor5/src/upload';\nimport { getCsrfToken } from './utils';\n/**\n * A plugin that enables file uploads in CKEditor 5 using the CKFinder server–side connector.\n *\n * See the {@glink features/images/image-upload/ckfinder \"CKFinder file manager integration\" guide} to learn how to configure\n * and use this feature as well as find out more about the full integration with the file manager\n * provided by the {@link module:ckfinder/ckfinder~CKFinder} plugin.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class CKFinderUploadAdapter extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FileRepository];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'CKFinderUploadAdapter';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const url = this.editor.config.get('ckfinder.uploadUrl');\n\n    if (!url) {\n      return;\n    } // Register CKFinderAdapter\n\n\n    this.editor.plugins.get(FileRepository).createUploadAdapter = loader => new UploadAdapter(loader, url, this.editor.t);\n  }\n\n}\n/**\n * Upload adapter for CKFinder.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\n\nclass UploadAdapter {\n  /**\n   * Creates a new adapter instance.\n   *\n   * @param {module:upload/filerepository~FileLoader} loader\n   * @param {String} url\n   * @param {module:utils/locale~Locale#t} t\n   */\n  constructor(loader, url, t) {\n    /**\n     * FileLoader instance to use during the upload.\n     *\n     * @member {module:upload/filerepository~FileLoader} #loader\n     */\n    this.loader = loader;\n    /**\n     * Upload URL.\n     *\n     * @member {String} #url\n     */\n\n    this.url = url;\n    /**\n     * Locale translation method.\n     *\n     * @member {module:utils/locale~Locale#t} #t\n     */\n\n    this.t = t;\n  }\n  /**\n   * Starts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#upload\n   * @returns {Promise.<Object>}\n   */\n\n\n  upload() {\n    return this.loader.file.then(file => {\n      return new Promise((resolve, reject) => {\n        this._initRequest();\n\n        this._initListeners(resolve, reject, file);\n\n        this._sendRequest(file);\n      });\n    });\n  }\n  /**\n   * Aborts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#abort\n   */\n\n\n  abort() {\n    if (this.xhr) {\n      this.xhr.abort();\n    }\n  }\n  /**\n   * Initializes the XMLHttpRequest object.\n   *\n   * @private\n   */\n\n\n  _initRequest() {\n    const xhr = this.xhr = new XMLHttpRequest();\n    xhr.open('POST', this.url, true);\n    xhr.responseType = 'json';\n  }\n  /**\n   * Initializes XMLHttpRequest listeners.\n   *\n   * @private\n   * @param {Function} resolve Callback function to be called when the request is successful.\n   * @param {Function} reject Callback function to be called when the request cannot be completed.\n   * @param {File} file File instance to be uploaded.\n   */\n\n\n  _initListeners(resolve, reject, file) {\n    const xhr = this.xhr;\n    const loader = this.loader;\n    const t = this.t;\n    const genericError = t('Cannot upload file:') + ` ${file.name}.`;\n    xhr.addEventListener('error', () => reject(genericError));\n    xhr.addEventListener('abort', () => reject());\n    xhr.addEventListener('load', () => {\n      const response = xhr.response;\n\n      if (!response || !response.uploaded) {\n        return reject(response && response.error && response.error.message ? response.error.message : genericError);\n      }\n\n      resolve({\n        default: response.url\n      });\n    }); // Upload progress when it's supported.\n\n    /* istanbul ignore else */\n\n    if (xhr.upload) {\n      xhr.upload.addEventListener('progress', evt => {\n        if (evt.lengthComputable) {\n          loader.uploadTotal = evt.total;\n          loader.uploaded = evt.loaded;\n        }\n      });\n    }\n  }\n  /**\n   * Prepares the data and sends the request.\n   *\n   * @private\n   * @param {File} file File instance to be uploaded.\n   */\n\n\n  _sendRequest(file) {\n    // Prepare form data.\n    const data = new FormData();\n    data.append('upload', file);\n    data.append('ckCsrfToken', getCsrfToken()); // Send request.\n\n    this.xhr.send(data);\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter.js"],"names":["Plugin","FileRepository","getCsrfToken","CKFinderUploadAdapter","requires","pluginName","init","url","editor","config","get","plugins","createUploadAdapter","loader","UploadAdapter","t","constructor","upload","file","then","Promise","resolve","reject","_initRequest","_initListeners","_sendRequest","abort","xhr","XMLHttpRequest","open","responseType","genericError","name","addEventListener","response","uploaded","error","message","default","evt","lengthComputable","uploadTotal","total","loaded","data","FormData","append","send"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals XMLHttpRequest, FormData */\n\n/**\n * @module adapter-ckfinder/uploadadapter\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { FileRepository } from 'ckeditor5/src/upload';\n\nimport { getCsrfToken } from './utils';\n\n/**\n * A plugin that enables file uploads in CKEditor 5 using the CKFinder server–side connector.\n *\n * See the {@glink features/images/image-upload/ckfinder \"CKFinder file manager integration\" guide} to learn how to configure\n * and use this feature as well as find out more about the full integration with the file manager\n * provided by the {@link module:ckfinder/ckfinder~CKFinder} plugin.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderUploadAdapter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ FileRepository ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'CKFinderUploadAdapter';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst url = this.editor.config.get( 'ckfinder.uploadUrl' );\n\n\t\tif ( !url ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Register CKFinderAdapter\n\t\tthis.editor.plugins.get( FileRepository ).createUploadAdapter = loader => new UploadAdapter( loader, url, this.editor.t );\n\t}\n}\n\n/**\n * Upload adapter for CKFinder.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\nclass UploadAdapter {\n\t/**\n\t * Creates a new adapter instance.\n\t *\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t * @param {String} url\n\t * @param {module:utils/locale~Locale#t} t\n\t */\n\tconstructor( loader, url, t ) {\n\t\t/**\n\t\t * FileLoader instance to use during the upload.\n\t\t *\n\t\t * @member {module:upload/filerepository~FileLoader} #loader\n\t\t */\n\t\tthis.loader = loader;\n\n\t\t/**\n\t\t * Upload URL.\n\t\t *\n\t\t * @member {String} #url\n\t\t */\n\t\tthis.url = url;\n\n\t\t/**\n\t\t * Locale translation method.\n\t\t *\n\t\t * @member {module:utils/locale~Locale#t} #t\n\t\t */\n\t\tthis.t = t;\n\t}\n\n\t/**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t * @returns {Promise.<Object>}\n\t */\n\tupload() {\n\t\treturn this.loader.file.then( file => {\n\t\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\t\tthis._initRequest();\n\t\t\t\tthis._initListeners( resolve, reject, file );\n\t\t\t\tthis._sendRequest( file );\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t */\n\tabort() {\n\t\tif ( this.xhr ) {\n\t\t\tthis.xhr.abort();\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the XMLHttpRequest object.\n\t *\n\t * @private\n\t */\n\t_initRequest() {\n\t\tconst xhr = this.xhr = new XMLHttpRequest();\n\n\t\txhr.open( 'POST', this.url, true );\n\t\txhr.responseType = 'json';\n\t}\n\n\t/**\n\t * Initializes XMLHttpRequest listeners.\n\t *\n\t * @private\n\t * @param {Function} resolve Callback function to be called when the request is successful.\n\t * @param {Function} reject Callback function to be called when the request cannot be completed.\n\t * @param {File} file File instance to be uploaded.\n\t */\n\t_initListeners( resolve, reject, file ) {\n\t\tconst xhr = this.xhr;\n\t\tconst loader = this.loader;\n\t\tconst t = this.t;\n\t\tconst genericError = t( 'Cannot upload file:' ) + ` ${ file.name }.`;\n\n\t\txhr.addEventListener( 'error', () => reject( genericError ) );\n\t\txhr.addEventListener( 'abort', () => reject() );\n\t\txhr.addEventListener( 'load', () => {\n\t\t\tconst response = xhr.response;\n\n\t\t\tif ( !response || !response.uploaded ) {\n\t\t\t\treturn reject( response && response.error && response.error.message ? response.error.message : genericError );\n\t\t\t}\n\n\t\t\tresolve( {\n\t\t\t\tdefault: response.url\n\t\t\t} );\n\t\t} );\n\n\t\t// Upload progress when it's supported.\n\t\t/* istanbul ignore else */\n\t\tif ( xhr.upload ) {\n\t\t\txhr.upload.addEventListener( 'progress', evt => {\n\t\t\t\tif ( evt.lengthComputable ) {\n\t\t\t\t\tloader.uploadTotal = evt.total;\n\t\t\t\t\tloader.uploaded = evt.loaded;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Prepares the data and sends the request.\n\t *\n\t * @private\n\t * @param {File} file File instance to be uploaded.\n\t */\n\t_sendRequest( file ) {\n\t\t// Prepare form data.\n\t\tconst data = new FormData();\n\t\tdata.append( 'upload', file );\n\t\tdata.append( 'ckCsrfToken', getCsrfToken() );\n\n\t\t// Send request.\n\t\tthis.xhr.send( data );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}