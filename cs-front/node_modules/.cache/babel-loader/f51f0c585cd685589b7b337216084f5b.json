{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/codeblockcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\nimport { getNormalizedAndLocalizedLanguageDefinitions } from './utils';\n/**\n * The code block command plugin.\n *\n * @extends module:core/command~Command\n */\n\nexport default class CodeBlockCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    /**\n     * Contains the last used language.\n    \t * @protected\n     * @type {String|null}\n     */\n\n    this._lastLanguage = null;\n  }\n  /**\n   * Whether the selection starts in a code block.\n   *\n   * @observable\n   * @readonly\n   * @member {Boolean} #value\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    this.value = this._getValue();\n    this.isEnabled = this._checkEnabled();\n  }\n  /**\n   * Executes the command. When the command {@link #value is on}, all topmost code blocks within\n   * the selection will be removed. If it is off, all selected blocks will be flattened and\n   * wrapped by a code block.\n   *\n   * @fires execute\n   * @param {Object} [options] Command options.\n   * @param {String} [options.language] The code block language.\n   * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply a code block,\n   * otherwise the command will remove the code block. If not set, the command will act basing on its current value.\n   * @param {Boolean} [options.usePreviousLanguageChoice] If set on `true` and the `options.language` is not specified, the command\n   * will apply the previous language (if the command was already executed) when inserting the `codeBlock` element.\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const editor = this.editor;\n    const model = editor.model;\n    const selection = model.document.selection;\n    const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n    const firstLanguageInConfig = normalizedLanguagesDefs[0];\n    const blocks = Array.from(selection.getSelectedBlocks());\n    const value = options.forceValue === undefined ? !this.value : options.forceValue;\n    const language = getLanguage(options, this._lastLanguage, firstLanguageInConfig.language);\n    model.change(writer => {\n      if (value) {\n        this._applyCodeBlock(writer, blocks, language);\n      } else {\n        this._removeCodeBlock(writer, blocks);\n      }\n    });\n  }\n  /**\n   * Checks the command's {@link #value}.\n   *\n   * @private\n   * @returns {Boolean} The current value.\n   */\n\n\n  _getValue() {\n    const selection = this.editor.model.document.selection;\n    const firstBlock = first(selection.getSelectedBlocks());\n    const isCodeBlock = !!(firstBlock && firstBlock.is('element', 'codeBlock'));\n    return isCodeBlock ? firstBlock.getAttribute('language') : false;\n  }\n  /**\n   * Checks whether the command can be enabled in the current context.\n   *\n   * @private\n   * @returns {Boolean} Whether the command should be enabled.\n   */\n\n\n  _checkEnabled() {\n    if (this.value) {\n      return true;\n    }\n\n    const selection = this.editor.model.document.selection;\n    const schema = this.editor.model.schema;\n    const firstBlock = first(selection.getSelectedBlocks());\n\n    if (!firstBlock) {\n      return false;\n    }\n\n    return canBeCodeBlock(schema, firstBlock);\n  }\n  /**\n   * @private\n   * @param {module:engine/model/writer~Writer} writer\n   * @param {Array.<module:engine/model/element~Element>} blocks\n   * @param {String} [language]\n   */\n\n\n  _applyCodeBlock(writer, blocks, language) {\n    this._lastLanguage = language;\n    const schema = this.editor.model.schema;\n    const allowedBlocks = blocks.filter(block => canBeCodeBlock(schema, block));\n\n    for (const block of allowedBlocks) {\n      writer.rename(block, 'codeBlock');\n      writer.setAttribute('language', language, block);\n      schema.removeDisallowedAttributes([block], writer); // Remove children of the  `codeBlock` element that are not allowed. See #9567.\n\n      Array.from(block.getChildren()).filter(child => !schema.checkChild(block, child)).forEach(child => writer.remove(child));\n    }\n\n    allowedBlocks.reverse().forEach((currentBlock, i) => {\n      const nextBlock = allowedBlocks[i + 1];\n\n      if (currentBlock.previousSibling === nextBlock) {\n        writer.appendElement('softBreak', nextBlock);\n        writer.merge(writer.createPositionBefore(currentBlock));\n      }\n    });\n  }\n  /**\n   * @private\n   * @param {module:engine/model/writer~Writer} writer\n   * @param {Array.<module:engine/model/element~Element>} blocks\n   */\n\n\n  _removeCodeBlock(writer, blocks) {\n    const codeBlocks = blocks.filter(block => block.is('element', 'codeBlock'));\n\n    for (const block of codeBlocks) {\n      const range = writer.createRangeOn(block);\n\n      for (const item of Array.from(range.getItems()).reverse()) {\n        if (item.is('element', 'softBreak') && item.parent.is('element', 'codeBlock')) {\n          const {\n            position\n          } = writer.split(writer.createPositionBefore(item));\n          writer.rename(position.nodeAfter, 'paragraph');\n          writer.removeAttribute('language', position.nodeAfter);\n          writer.remove(item);\n        }\n      }\n\n      writer.rename(block, 'paragraph');\n      writer.removeAttribute('language', block);\n    }\n  }\n\n}\n\nfunction canBeCodeBlock(schema, element) {\n  if (element.is('rootElement') || schema.isLimit(element)) {\n    return false;\n  }\n\n  return schema.checkChild(element.parent, 'codeBlock');\n} // Picks the language for the new code block. If any language is passed as an option,\n// it will be returned. Else, if option usePreviousLanguageChoice is true and some\n// code block was already created (lastLanguage is not null) then previously used\n// language will be returned. If not, it will return default language.\n//\n// @param {Object} options\n// @param {Boolean} [options.usePreviousLanguageChoice]\n// @param {String} [options.language]\n// @param {String|null} lastLanguage\n// @param {String} defaultLanguage\n// @return {String}\n\n\nfunction getLanguage(options, lastLanguage, defaultLanguage) {\n  if (options.language) {\n    return options.language;\n  }\n\n  if (options.usePreviousLanguageChoice && lastLanguage) {\n    return lastLanguage;\n  }\n\n  return defaultLanguage;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-code-block/src/codeblockcommand.js"],"names":["Command","first","getNormalizedAndLocalizedLanguageDefinitions","CodeBlockCommand","constructor","editor","_lastLanguage","refresh","value","_getValue","isEnabled","_checkEnabled","execute","options","model","selection","document","normalizedLanguagesDefs","firstLanguageInConfig","blocks","Array","from","getSelectedBlocks","forceValue","undefined","language","getLanguage","change","writer","_applyCodeBlock","_removeCodeBlock","firstBlock","isCodeBlock","is","getAttribute","schema","canBeCodeBlock","allowedBlocks","filter","block","rename","setAttribute","removeDisallowedAttributes","getChildren","child","checkChild","forEach","remove","reverse","currentBlock","i","nextBlock","previousSibling","appendElement","merge","createPositionBefore","codeBlocks","range","createRangeOn","item","getItems","parent","position","split","nodeAfter","removeAttribute","element","isLimit","lastLanguage","defaultLanguage","usePreviousLanguageChoice"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/codeblockcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n\nimport { getNormalizedAndLocalizedLanguageDefinitions } from './utils';\n\n/**\n * The code block command plugin.\n *\n * @extends module:core/command~Command\n */\nexport default class CodeBlockCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Contains the last used language.\n\n\t\t * @protected\n\t\t * @type {String|null}\n\t\t */\n\t\tthis._lastLanguage = null;\n\t}\n\n\t/**\n\t * Whether the selection starts in a code block.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #value is on}, all topmost code blocks within\n\t * the selection will be removed. If it is off, all selected blocks will be flattened and\n\t * wrapped by a code block.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {String} [options.language] The code block language.\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply a code block,\n\t * otherwise the command will remove the code block. If not set, the command will act basing on its current value.\n\t * @param {Boolean} [options.usePreviousLanguageChoice] If set on `true` and the `options.language` is not specified, the command\n\t * will apply the previous language (if the command was already executed) when inserting the `codeBlock` element.\n\t */\n\texecute( options = {} ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions( editor );\n\t\tconst firstLanguageInConfig = normalizedLanguagesDefs[ 0 ];\n\n\t\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\t\tconst language = getLanguage( options, this._lastLanguage, firstLanguageInConfig.language );\n\n\t\tmodel.change( writer => {\n\t\t\tif ( value ) {\n\t\t\t\tthis._applyCodeBlock( writer, blocks, language );\n\t\t\t} else {\n\t\t\t\tthis._removeCodeBlock( writer, blocks );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {Boolean} The current value.\n\t */\n\t_getValue() {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\t\tconst isCodeBlock = !!( firstBlock && firstBlock.is( 'element', 'codeBlock' ) );\n\n\t\treturn isCodeBlock ? firstBlock.getAttribute( 'language' ) : false;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn canBeCodeBlock( schema, firstBlock );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t * @param {Array.<module:engine/model/element~Element>} blocks\n\t * @param {String} [language]\n\t */\n\t_applyCodeBlock( writer, blocks, language ) {\n\t\tthis._lastLanguage = language;\n\n\t\tconst schema = this.editor.model.schema;\n\t\tconst allowedBlocks = blocks.filter( block => canBeCodeBlock( schema, block ) );\n\n\t\tfor ( const block of allowedBlocks ) {\n\t\t\twriter.rename( block, 'codeBlock' );\n\t\t\twriter.setAttribute( 'language', language, block );\n\t\t\tschema.removeDisallowedAttributes( [ block ], writer );\n\n\t\t\t// Remove children of the  `codeBlock` element that are not allowed. See #9567.\n\t\t\tArray.from( block.getChildren() )\n\t\t\t\t.filter( child => !schema.checkChild( block, child ) )\n\t\t\t\t.forEach( child => writer.remove( child ) );\n\t\t}\n\n\t\tallowedBlocks.reverse().forEach( ( currentBlock, i ) => {\n\t\t\tconst nextBlock = allowedBlocks[ i + 1 ];\n\n\t\t\tif ( currentBlock.previousSibling === nextBlock ) {\n\t\t\t\twriter.appendElement( 'softBreak', nextBlock );\n\t\t\t\twriter.merge( writer.createPositionBefore( currentBlock ) );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t * @param {Array.<module:engine/model/element~Element>} blocks\n\t */\n\t_removeCodeBlock( writer, blocks ) {\n\t\tconst codeBlocks = blocks.filter( block => block.is( 'element', 'codeBlock' ) );\n\n\t\tfor ( const block of codeBlocks ) {\n\t\t\tconst range = writer.createRangeOn( block );\n\n\t\t\tfor ( const item of Array.from( range.getItems() ).reverse() ) {\n\t\t\t\tif ( item.is( 'element', 'softBreak' ) && item.parent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\t\tconst { position } = writer.split( writer.createPositionBefore( item ) );\n\n\t\t\t\t\twriter.rename( position.nodeAfter, 'paragraph' );\n\t\t\t\t\twriter.removeAttribute( 'language', position.nodeAfter );\n\t\t\t\t\twriter.remove( item );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.rename( block, 'paragraph' );\n\t\t\twriter.removeAttribute( 'language', block );\n\t\t}\n\t}\n}\n\nfunction canBeCodeBlock( schema, element ) {\n\tif ( element.is( 'rootElement' ) || schema.isLimit( element ) ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( element.parent, 'codeBlock' );\n}\n\n// Picks the language for the new code block. If any language is passed as an option,\n// it will be returned. Else, if option usePreviousLanguageChoice is true and some\n// code block was already created (lastLanguage is not null) then previously used\n// language will be returned. If not, it will return default language.\n//\n// @param {Object} options\n// @param {Boolean} [options.usePreviousLanguageChoice]\n// @param {String} [options.language]\n// @param {String|null} lastLanguage\n// @param {String} defaultLanguage\n// @return {String}\nfunction getLanguage( options, lastLanguage, defaultLanguage ) {\n\tif ( options.language ) {\n\t\treturn options.language;\n\t}\n\n\tif ( options.usePreviousLanguageChoice && lastLanguage ) {\n\t\treturn lastLanguage;\n\t}\n\n\treturn defaultLanguage;\n}\n"]},"metadata":{},"sourceType":"module"}