{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/replacecommand\n*/\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The replace command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ReplaceCommand extends Command {\n  /**\n   * Creates a new `ReplaceCommand` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n   * @param {module:find-and-replace/findandreplacestate~FindAndReplaceState} state An object to hold plugin state.\n   */\n  constructor(editor, state) {\n    super(editor); // The replace command is always enabled.\n\n    this.isEnabled = true;\n    /**\n     * The find and replace state object used for command operations.\n     *\n     * @protected\n     * @member {module:find-and-replace/findandreplacestate~FindAndReplaceState} #_state\n     */\n\n    this._state = state;\n  }\n  /**\n   * Replace a given find result by a string or a callback.\n   *\n   * @param {String} replacementText\n   * @param {Object} result A single result from the find command.\n   *\n   * @fires module:core/command~Command#event:execute\n   */\n\n\n  execute(replacementText, result) {\n    const {\n      model\n    } = this.editor;\n    model.change(writer => {\n      const range = result.marker.getRange(); // Don't replace a result (marker) that found its way into the $graveyard (e.g. removed by collaborators).\n\n      if (range.root.rootName === '$graveyard') {\n        this._state.results.remove(result);\n\n        return;\n      }\n\n      let textAttributes = {};\n\n      for (const item of range.getItems()) {\n        if (item.is('$text') || item.is('$textProxy')) {\n          textAttributes = item.getAttributes();\n          break;\n        }\n      }\n\n      model.insertContent(writer.createText(replacementText, textAttributes), range);\n\n      if (this._state.results.has(result)) {\n        this._state.results.remove(result);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-find-and-replace/src/replacecommand.js"],"names":["Command","ReplaceCommand","constructor","editor","state","isEnabled","_state","execute","replacementText","result","model","change","writer","range","marker","getRange","root","rootName","results","remove","textAttributes","item","getItems","is","getAttributes","insertContent","createText","has"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,cAAN,SAA6BD,OAA7B,CAAqC;AACnD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,MAAF,EAAUC,KAAV,EAAkB;AAC5B,UAAOD,MAAP,EAD4B,CAG5B;;AACA,SAAKE,SAAL,GAAiB,IAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,MAAL,GAAcF,KAAd;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,OAAO,CAAEC,eAAF,EAAmBC,MAAnB,EAA4B;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKP,MAAvB;AAEAO,IAAAA,KAAK,CAACC,MAAN,CAAcC,MAAM,IAAI;AACvB,YAAMC,KAAK,GAAGJ,MAAM,CAACK,MAAP,CAAcC,QAAd,EAAd,CADuB,CAGvB;;AACA,UAAKF,KAAK,CAACG,IAAN,CAAWC,QAAX,KAAwB,YAA7B,EAA4C;AAC3C,aAAKX,MAAL,CAAYY,OAAZ,CAAoBC,MAApB,CAA4BV,MAA5B;;AAEA;AACA;;AAED,UAAIW,cAAc,GAAG,EAArB;;AAEA,WAAM,MAAMC,IAAZ,IAAoBR,KAAK,CAACS,QAAN,EAApB,EAAuC;AACtC,YAAKD,IAAI,CAACE,EAAL,CAAS,OAAT,KAAsBF,IAAI,CAACE,EAAL,CAAS,YAAT,CAA3B,EAAqD;AACpDH,UAAAA,cAAc,GAAGC,IAAI,CAACG,aAAL,EAAjB;AACA;AACA;AACD;;AAEDd,MAAAA,KAAK,CAACe,aAAN,CAAqBb,MAAM,CAACc,UAAP,CAAmBlB,eAAnB,EAAoCY,cAApC,CAArB,EAA2EP,KAA3E;;AAEA,UAAK,KAAKP,MAAL,CAAYY,OAAZ,CAAoBS,GAApB,CAAyBlB,MAAzB,CAAL,EAAyC;AACxC,aAAKH,MAAL,CAAYY,OAAZ,CAAoBC,MAApB,CAA4BV,MAA5B;AACA;AACD,KAxBD;AAyBA;;AA1DkD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/replacecommand\n*/\n\nimport { Command } from 'ckeditor5/src/core';\n\n/**\n * The replace command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class ReplaceCommand extends Command {\n\t/**\n\t * Creates a new `ReplaceCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n\t * @param {module:find-and-replace/findandreplacestate~FindAndReplaceState} state An object to hold plugin state.\n\t */\n\tconstructor( editor, state ) {\n\t\tsuper( editor );\n\n\t\t// The replace command is always enabled.\n\t\tthis.isEnabled = true;\n\n\t\t/**\n\t\t * The find and replace state object used for command operations.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:find-and-replace/findandreplacestate~FindAndReplaceState} #_state\n\t\t */\n\t\tthis._state = state;\n\t}\n\n\t/**\n\t * Replace a given find result by a string or a callback.\n\t *\n\t * @param {String} replacementText\n\t * @param {Object} result A single result from the find command.\n\t *\n\t * @fires module:core/command~Command#event:execute\n\t */\n\texecute( replacementText, result ) {\n\t\tconst { model } = this.editor;\n\n\t\tmodel.change( writer => {\n\t\t\tconst range = result.marker.getRange();\n\n\t\t\t// Don't replace a result (marker) that found its way into the $graveyard (e.g. removed by collaborators).\n\t\t\tif ( range.root.rootName === '$graveyard' ) {\n\t\t\t\tthis._state.results.remove( result );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet textAttributes = {};\n\n\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\tif ( item.is( '$text' ) || item.is( '$textProxy' ) ) {\n\t\t\t\t\ttextAttributes = item.getAttributes();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmodel.insertContent( writer.createText( replacementText, textAttributes ), range );\n\n\t\t\tif ( this._state.results.has( result ) ) {\n\t\t\t\tthis._state.results.remove( result );\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}