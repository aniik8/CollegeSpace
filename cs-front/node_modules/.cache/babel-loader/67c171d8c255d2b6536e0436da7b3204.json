{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils/common\n */\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param {String} key An attribute key.\n * @param {*} value The new attribute value.\n * @param {module:engine/model/item~Item} item A model item on which the attribute will be set.\n * @param {module:engine/model/writer~Writer} writer\n * @param {*} defaultValue The default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute(key, value, item, writer) {\n  let defaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  if (value > defaultValue) {\n    writer.setAttribute(key, value, item);\n  } else {\n    writer.removeAttribute(key, item);\n  }\n}\n/**\n * A common method to create an empty table cell. It creates a proper model structure as a table cell must have at least one block inside.\n *\n * @param {module:engine/model/writer~Writer} writer The model writer.\n * @param {module:engine/model/position~Position} insertPosition The position at which the table cell should be inserted.\n * @param {Object} attributes The element attributes.\n * @returns {module:engine/model/element~Element} Created table cell.\n */\n\nexport function createEmptyTableCell(writer, insertPosition) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const tableCell = writer.createElement('tableCell', attributes);\n  writer.insertElement('paragraph', tableCell);\n  writer.insert(tableCell, insertPosition);\n  return tableCell;\n}\n/**\n * Checks if a table cell belongs to the heading column section.\n *\n * @param {module:table/tableutils~TableUtils} tableUtils\n * @param {module:engine/model/element~Element} tableCell\n * @returns {Boolean}\n */\n\nexport function isHeadingColumnCell(tableUtils, tableCell) {\n  const table = tableCell.parent.parent;\n  const headingColumns = parseInt(table.getAttribute('headingColumns') || 0);\n  const {\n    column\n  } = tableUtils.getCellLocation(tableCell);\n  return !!headingColumns && column < headingColumns;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/utils/common.js"],"names":["updateNumericAttribute","key","value","item","writer","defaultValue","setAttribute","removeAttribute","createEmptyTableCell","insertPosition","attributes","tableCell","createElement","insertElement","insert","isHeadingColumnCell","tableUtils","table","parent","headingColumns","parseInt","getAttribute","column","getCellLocation"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAT,CAAiCC,GAAjC,EAAsCC,KAAtC,EAA6CC,IAA7C,EAAmDC,MAAnD,EAA8E;AAAA,MAAnBC,YAAmB,uEAAJ,CAAI;;AACpF,MAAKH,KAAK,GAAGG,YAAb,EAA4B;AAC3BD,IAAAA,MAAM,CAACE,YAAP,CAAqBL,GAArB,EAA0BC,KAA1B,EAAiCC,IAAjC;AACA,GAFD,MAEO;AACNC,IAAAA,MAAM,CAACG,eAAP,CAAwBN,GAAxB,EAA6BE,IAA7B;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,oBAAT,CAA+BJ,MAA/B,EAAuCK,cAAvC,EAAyE;AAAA,MAAlBC,UAAkB,uEAAL,EAAK;AAC/E,QAAMC,SAAS,GAAGP,MAAM,CAACQ,aAAP,CAAsB,WAAtB,EAAmCF,UAAnC,CAAlB;AAEAN,EAAAA,MAAM,CAACS,aAAP,CAAsB,WAAtB,EAAmCF,SAAnC;AACAP,EAAAA,MAAM,CAACU,MAAP,CAAeH,SAAf,EAA0BF,cAA1B;AAEA,SAAOE,SAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,mBAAT,CAA8BC,UAA9B,EAA0CL,SAA1C,EAAsD;AAC5D,QAAMM,KAAK,GAAGN,SAAS,CAACO,MAAV,CAAiBA,MAA/B;AACA,QAAMC,cAAc,GAAGC,QAAQ,CAAEH,KAAK,CAACI,YAAN,CAAoB,gBAApB,KAA0C,CAA5C,CAA/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaN,UAAU,CAACO,eAAX,CAA4BZ,SAA5B,CAAnB;AAEA,SAAO,CAAC,CAACQ,cAAF,IAAoBG,MAAM,GAAGH,cAApC;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils/common\n */\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param {String} key An attribute key.\n * @param {*} value The new attribute value.\n * @param {module:engine/model/item~Item} item A model item on which the attribute will be set.\n * @param {module:engine/model/writer~Writer} writer\n * @param {*} defaultValue The default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute( key, value, item, writer, defaultValue = 1 ) {\n\tif ( value > defaultValue ) {\n\t\twriter.setAttribute( key, value, item );\n\t} else {\n\t\twriter.removeAttribute( key, item );\n\t}\n}\n\n/**\n * A common method to create an empty table cell. It creates a proper model structure as a table cell must have at least one block inside.\n *\n * @param {module:engine/model/writer~Writer} writer The model writer.\n * @param {module:engine/model/position~Position} insertPosition The position at which the table cell should be inserted.\n * @param {Object} attributes The element attributes.\n * @returns {module:engine/model/element~Element} Created table cell.\n */\nexport function createEmptyTableCell( writer, insertPosition, attributes = {} ) {\n\tconst tableCell = writer.createElement( 'tableCell', attributes );\n\n\twriter.insertElement( 'paragraph', tableCell );\n\twriter.insert( tableCell, insertPosition );\n\n\treturn tableCell;\n}\n\n/**\n * Checks if a table cell belongs to the heading column section.\n *\n * @param {module:table/tableutils~TableUtils} tableUtils\n * @param {module:engine/model/element~Element} tableCell\n * @returns {Boolean}\n */\nexport function isHeadingColumnCell( tableUtils, tableCell ) {\n\tconst table = tableCell.parent.parent;\n\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) || 0 );\n\tconst { column } = tableUtils.getCellLocation( tableCell );\n\n\treturn !!headingColumns && column < headingColumns;\n}\n"]},"metadata":{},"sourceType":"module"}