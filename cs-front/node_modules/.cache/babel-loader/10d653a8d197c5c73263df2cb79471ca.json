{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module adapter-ckfinder/utils\n */\nconst TOKEN_COOKIE_NAME = 'ckCsrfToken';\nconst TOKEN_LENGTH = 40;\nconst tokenCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';\n/**\n * Returns the CSRF token value. The value is a hash stored in `document.cookie`\n * under the `ckCsrfToken` key. The CSRF token can be used to secure the communication\n * between the web browser and the CKFinder server.\n *\n * @returns {String}\n */\n\nexport function getCsrfToken() {\n  let token = getCookie(TOKEN_COOKIE_NAME);\n\n  if (!token || token.length != TOKEN_LENGTH) {\n    token = generateToken(TOKEN_LENGTH);\n    setCookie(TOKEN_COOKIE_NAME, token);\n  }\n\n  return token;\n}\n/**\n * Returns the value of the cookie with a given name or `null` if the cookie is not found.\n *\n * @param {String} name\n * @returns {String|null}\n */\n\nexport function getCookie(name) {\n  name = name.toLowerCase();\n  const parts = document.cookie.split(';');\n\n  for (const part of parts) {\n    const pair = part.split('=');\n    const key = decodeURIComponent(pair[0].trim().toLowerCase());\n\n    if (key === name) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n\n  return null;\n}\n/**\n * Sets the value of the cookie with a given name.\n *\n * @param {String} name\n * @param {String} value\n */\n\nexport function setCookie(name, value) {\n  document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';path=/';\n} // Generates the CSRF token with the given length.\n//\n// @private\n// @param {Number} length\n// @returns {string}\n\nfunction generateToken(length) {\n  let result = '';\n  const randValues = new Uint8Array(length);\n  window.crypto.getRandomValues(randValues);\n\n  for (let j = 0; j < randValues.length; j++) {\n    const character = tokenCharset.charAt(randValues[j] % tokenCharset.length);\n    result += Math.random() > 0.5 ? character.toUpperCase() : character;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-adapter-ckfinder/src/utils.js"],"names":["TOKEN_COOKIE_NAME","TOKEN_LENGTH","tokenCharset","getCsrfToken","token","getCookie","length","generateToken","setCookie","name","toLowerCase","parts","document","cookie","split","part","pair","key","decodeURIComponent","trim","value","encodeURIComponent","result","randValues","Uint8Array","window","crypto","getRandomValues","j","character","charAt","Math","random","toUpperCase"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AAEA,MAAMA,iBAAiB,GAAG,aAA1B;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,YAAY,GAAG,sCAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,GAAwB;AAC9B,MAAIC,KAAK,GAAGC,SAAS,CAAEL,iBAAF,CAArB;;AAEA,MAAK,CAACI,KAAD,IAAUA,KAAK,CAACE,MAAN,IAAgBL,YAA/B,EAA8C;AAC7CG,IAAAA,KAAK,GAAGG,aAAa,CAAEN,YAAF,CAArB;AACAO,IAAAA,SAAS,CAAER,iBAAF,EAAqBI,KAArB,CAAT;AACA;;AAED,SAAOA,KAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAoBI,IAApB,EAA2B;AACjCA,EAAAA,IAAI,GAAGA,IAAI,CAACC,WAAL,EAAP;AACA,QAAMC,KAAK,GAAGC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAuB,GAAvB,CAAd;;AAEA,OAAM,MAAMC,IAAZ,IAAoBJ,KAApB,EAA4B;AAC3B,UAAMK,IAAI,GAAGD,IAAI,CAACD,KAAL,CAAY,GAAZ,CAAb;AACA,UAAMG,GAAG,GAAGC,kBAAkB,CAAEF,IAAI,CAAE,CAAF,CAAJ,CAAUG,IAAV,GAAiBT,WAAjB,EAAF,CAA9B;;AAEA,QAAKO,GAAG,KAAKR,IAAb,EAAoB;AACnB,aAAOS,kBAAkB,CAAEF,IAAI,CAAE,CAAF,CAAN,CAAzB;AACA;AACD;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASR,SAAT,CAAoBC,IAApB,EAA0BW,KAA1B,EAAkC;AACxCR,EAAAA,QAAQ,CAACC,MAAT,GAAkBQ,kBAAkB,CAAEZ,IAAF,CAAlB,GAA6B,GAA7B,GAAmCY,kBAAkB,CAAED,KAAF,CAArD,GAAiE,SAAnF;AACA,C,CAED;AACA;AACA;AACA;AACA;;AACA,SAASb,aAAT,CAAwBD,MAAxB,EAAiC;AAChC,MAAIgB,MAAM,GAAG,EAAb;AACA,QAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAgBlB,MAAhB,CAAnB;AAEAmB,EAAAA,MAAM,CAACC,MAAP,CAAcC,eAAd,CAA+BJ,UAA/B;;AAEA,OAAM,IAAIK,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGL,UAAU,CAACjB,MAAhC,EAAwCsB,CAAC,EAAzC,EAA8C;AAC7C,UAAMC,SAAS,GAAG3B,YAAY,CAAC4B,MAAb,CAAqBP,UAAU,CAAEK,CAAF,CAAV,GAAkB1B,YAAY,CAACI,MAApD,CAAlB;AACAgB,IAAAA,MAAM,IAAIS,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsBH,SAAS,CAACI,WAAV,EAAtB,GAAgDJ,SAA1D;AACA;;AAED,SAAOP,MAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module adapter-ckfinder/utils\n */\n\nconst TOKEN_COOKIE_NAME = 'ckCsrfToken';\nconst TOKEN_LENGTH = 40;\nconst tokenCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';\n\n/**\n * Returns the CSRF token value. The value is a hash stored in `document.cookie`\n * under the `ckCsrfToken` key. The CSRF token can be used to secure the communication\n * between the web browser and the CKFinder server.\n *\n * @returns {String}\n */\nexport function getCsrfToken() {\n\tlet token = getCookie( TOKEN_COOKIE_NAME );\n\n\tif ( !token || token.length != TOKEN_LENGTH ) {\n\t\ttoken = generateToken( TOKEN_LENGTH );\n\t\tsetCookie( TOKEN_COOKIE_NAME, token );\n\t}\n\n\treturn token;\n}\n\n/**\n * Returns the value of the cookie with a given name or `null` if the cookie is not found.\n *\n * @param {String} name\n * @returns {String|null}\n */\nexport function getCookie( name ) {\n\tname = name.toLowerCase();\n\tconst parts = document.cookie.split( ';' );\n\n\tfor ( const part of parts ) {\n\t\tconst pair = part.split( '=' );\n\t\tconst key = decodeURIComponent( pair[ 0 ].trim().toLowerCase() );\n\n\t\tif ( key === name ) {\n\t\t\treturn decodeURIComponent( pair[ 1 ] );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets the value of the cookie with a given name.\n *\n * @param {String} name\n * @param {String} value\n */\nexport function setCookie( name, value ) {\n\tdocument.cookie = encodeURIComponent( name ) + '=' + encodeURIComponent( value ) + ';path=/';\n}\n\n// Generates the CSRF token with the given length.\n//\n// @private\n// @param {Number} length\n// @returns {string}\nfunction generateToken( length ) {\n\tlet result = '';\n\tconst randValues = new Uint8Array( length );\n\n\twindow.crypto.getRandomValues( randValues );\n\n\tfor ( let j = 0; j < randValues.length; j++ ) {\n\t\tconst character = tokenCharset.charAt( randValues[ j ] % tokenCharset.length );\n\t\tresult += Math.random() > 0.5 ? character.toUpperCase() : character;\n\t}\n\n\treturn result;\n}\n"]},"metadata":{},"sourceType":"module"}