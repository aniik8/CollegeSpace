{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/replaceallcommand\n */\nimport { updateFindResultFromRange, findByTextCallback } from './utils';\nimport { Collection } from 'ckeditor5/src/utils';\nimport ReplaceCommand from './replacecommand';\n/**\n * The replace all command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n *\n * @extends module:find-and-replace/replacecommand~ReplaceCommand\n */\n\nexport default class ReplaceAllCommand extends ReplaceCommand {\n  /**\n   * Replaces all the occurrences of `textToReplace` with a given `newText` string.\n   *\n   * ```js\n   *\treplaceAllCommand.execute( 'replaceAll', 'new text replacement', 'text to replace' );\n   * ```\n   *\n   * Alternatively you can call it from editor instance:\n   *\n   * ```js\n   *\teditor.execute( 'replaceAll', 'new text', 'old text' );\n   * ```\n   *\n   * @param {String} newText Text that will be inserted to the editor for each match.\n   * @param {String|module:utils/collection~Collection} textToReplace Text to be replaced or a collection of matches\n   * as returned by the find command.\n   *\n   * @fires module:core/command~Command#event:execute\n   */\n  execute(newText, textToReplace) {\n    const {\n      editor\n    } = this;\n    const {\n      model\n    } = editor;\n    const results = textToReplace instanceof Collection ? textToReplace : model.document.getRootNames().reduce((currentResults, rootName) => updateFindResultFromRange(model.createRangeIn(model.document.getRoot(rootName)), model, findByTextCallback(textToReplace, this._state), currentResults), null);\n\n    if (results.length) {\n      model.change(() => {\n        [...results].forEach(searchResult => {\n          // Just reuse logic from the replace command to replace a single match.\n          super.execute(newText, searchResult);\n        });\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-find-and-replace/src/replaceallcommand.js"],"names":["updateFindResultFromRange","findByTextCallback","Collection","ReplaceCommand","ReplaceAllCommand","execute","newText","textToReplace","editor","model","results","document","getRootNames","reduce","currentResults","rootName","createRangeIn","getRoot","_state","length","change","forEach","searchResult"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,yBAAT,EAAoCC,kBAApC,QAA8D,SAA9D;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,SAAgCD,cAAhC,CAA+C;AAC7D;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,OAAO,CAAEC,OAAF,EAAWC,aAAX,EAA2B;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAa,IAAnB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AAEA,UAAME,OAAO,GAAGH,aAAa,YAAYL,UAAzB,GACfK,aADe,GACCE,KAAK,CAACE,QAAN,CAAeC,YAAf,GACdC,MADc,CACJ,CAAEC,cAAF,EAAkBC,QAAlB,KAAgCf,yBAAyB,CACnES,KAAK,CAACO,aAAN,CAAqBP,KAAK,CAACE,QAAN,CAAeM,OAAf,CAAwBF,QAAxB,CAArB,CADmE,EAEnEN,KAFmE,EAGnER,kBAAkB,CAAEM,aAAF,EAAiB,KAAKW,MAAtB,CAHiD,EAInEJ,cAJmE,CADrD,EAMV,IANU,CADjB;;AASA,QAAKJ,OAAO,CAACS,MAAb,EAAsB;AACrBV,MAAAA,KAAK,CAACW,MAAN,CAAc,MAAM;AACnB,SAAE,GAAGV,OAAL,EAAeW,OAAf,CAAwBC,YAAY,IAAI;AACvC;AACA,gBAAMjB,OAAN,CAAeC,OAAf,EAAwBgB,YAAxB;AACA,SAHD;AAIA,OALD;AAMA;AACD;;AAzC4D","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module find-and-replace/replaceallcommand\n */\n\nimport { updateFindResultFromRange, findByTextCallback } from './utils';\nimport { Collection } from 'ckeditor5/src/utils';\nimport ReplaceCommand from './replacecommand';\n\n/**\n * The replace all command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n *\n * @extends module:find-and-replace/replacecommand~ReplaceCommand\n */\nexport default class ReplaceAllCommand extends ReplaceCommand {\n\t/**\n\t * Replaces all the occurrences of `textToReplace` with a given `newText` string.\n\t *\n\t * ```js\n\t *\treplaceAllCommand.execute( 'replaceAll', 'new text replacement', 'text to replace' );\n\t * ```\n\t *\n\t * Alternatively you can call it from editor instance:\n\t *\n\t * ```js\n\t *\teditor.execute( 'replaceAll', 'new text', 'old text' );\n\t * ```\n\t *\n\t * @param {String} newText Text that will be inserted to the editor for each match.\n\t * @param {String|module:utils/collection~Collection} textToReplace Text to be replaced or a collection of matches\n\t * as returned by the find command.\n\t *\n\t * @fires module:core/command~Command#event:execute\n\t */\n\texecute( newText, textToReplace ) {\n\t\tconst { editor } = this;\n\t\tconst { model } = editor;\n\n\t\tconst results = textToReplace instanceof Collection ?\n\t\t\ttextToReplace : model.document.getRootNames()\n\t\t\t\t.reduce( ( ( currentResults, rootName ) => updateFindResultFromRange(\n\t\t\t\t\tmodel.createRangeIn( model.document.getRoot( rootName ) ),\n\t\t\t\t\tmodel,\n\t\t\t\t\tfindByTextCallback( textToReplace, this._state ),\n\t\t\t\t\tcurrentResults\n\t\t\t\t) ), null );\n\n\t\tif ( results.length ) {\n\t\t\tmodel.change( () => {\n\t\t\t\t[ ...results ].forEach( searchResult => {\n\t\t\t\t\t// Just reuse logic from the replace command to replace a single match.\n\t\t\t\t\tsuper.execute( newText, searchResult );\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}