{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/todolistediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { getCode, parseKeystroke, getLocalizedArrowKeyCodeDirection } from 'ckeditor5/src/utils';\nimport ListCommand from './listcommand';\nimport ListEditing from './listediting';\nimport CheckTodoListCommand from './checktodolistcommand';\nimport { dataModelViewInsertion, dataViewModelCheckmarkInsertion, mapModelToViewPosition, modelViewChangeChecked, modelViewChangeType, modelViewInsertion } from './todolistconverters';\nconst ITEM_TOGGLE_KEYSTROKE = parseKeystroke('Ctrl+Enter');\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/listediting~ListEditing list editing plugin} and extends\n * it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n * - `'todoListCheck'` as an alias for `checkTodoList` command.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TodoListEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TodoListEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [ListEditing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const {\n      editing,\n      data,\n      model\n    } = editor; // Extend schema.\n\n    model.schema.extend('listItem', {\n      allowAttributes: ['todoListChecked']\n    }); // Disallow todoListChecked attribute on other nodes than listItem with to-do listType.\n\n    model.schema.addAttributeCheck((context, attributeName) => {\n      const item = context.last;\n\n      if (attributeName == 'todoListChecked' && item.name == 'listItem' && item.getAttribute('listType') != 'todo') {\n        return false;\n      }\n    }); // Register `todoList` command.\n\n    editor.commands.add('todoList', new ListCommand(editor, 'todo'));\n    const checkTodoListCommand = new CheckTodoListCommand(editor); // Register `checkTodoList` command and add `todoListCheck` command as an alias for backward compatibility.\n\n    editor.commands.add('checkTodoList', checkTodoListCommand);\n    editor.commands.add('todoListCheck', checkTodoListCommand); // Define converters.\n\n    data.downcastDispatcher.on('insert:listItem', dataModelViewInsertion(model), {\n      priority: 'high'\n    });\n    data.upcastDispatcher.on('element:input', dataViewModelCheckmarkInsertion, {\n      priority: 'high'\n    });\n    editing.downcastDispatcher.on('insert:listItem', modelViewInsertion(model, listItem => this._handleCheckmarkChange(listItem)), {\n      priority: 'high'\n    });\n    editing.downcastDispatcher.on('attribute:listType:listItem', modelViewChangeType(listItem => this._handleCheckmarkChange(listItem), editing.view));\n    editing.downcastDispatcher.on('attribute:todoListChecked:listItem', modelViewChangeChecked(listItem => this._handleCheckmarkChange(listItem)));\n    editing.mapper.on('modelToViewPosition', mapModelToViewPosition(editing.view));\n    data.mapper.on('modelToViewPosition', mapModelToViewPosition(editing.view)); // Jump at the end of the previous node on left arrow key press, when selection is after the checkbox.\n    //\n    // <blockquote><p>Foo</p></blockquote>\n    // <ul><li><checkbox/>{}Bar</li></ul>\n    //\n    // press: `<-`\n    //\n    // <blockquote><p>Foo{}</p></blockquote>\n    // <ul><li><checkbox/>Bar</li></ul>\n    //\n\n    this.listenTo(editing.view.document, 'arrowKey', jumpOverCheckmarkOnSideArrowKeyPress(model, editor.locale), {\n      context: 'li'\n    }); // Toggle check state of selected to-do list items on keystroke.\n\n    this.listenTo(editing.view.document, 'keydown', (evt, data) => {\n      if (getCode(data) === ITEM_TOGGLE_KEYSTROKE) {\n        editor.execute('checkTodoList');\n        evt.stop();\n      }\n    }, {\n      priority: 'high'\n    }); // Remove `todoListChecked` attribute when a host element is no longer a to-do list item.\n\n    const listItemsToFix = new Set();\n    this.listenTo(model, 'applyOperation', (evt, args) => {\n      const operation = args[0];\n\n      if (operation.type == 'rename' && operation.oldName == 'listItem') {\n        const item = operation.position.nodeAfter;\n\n        if (item.hasAttribute('todoListChecked')) {\n          listItemsToFix.add(item);\n        }\n      } else if (operation.type == 'changeAttribute' && operation.key == 'listType' && operation.oldValue === 'todo') {\n        for (const item of operation.range.getItems()) {\n          if (item.hasAttribute('todoListChecked') && item.getAttribute('listType') !== 'todo') {\n            listItemsToFix.add(item);\n          }\n        }\n      }\n    });\n    model.document.registerPostFixer(writer => {\n      let hasChanged = false;\n\n      for (const listItem of listItemsToFix) {\n        writer.removeAttribute('todoListChecked', listItem);\n        hasChanged = true;\n      }\n\n      listItemsToFix.clear();\n      return hasChanged;\n    });\n  }\n  /**\n   * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n   * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n   *\n   * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n   * is not a clear solution. We need to design an API for using commands beyond the selection range.\n   * See https://github.com/ckeditor/ckeditor5/issues/1954.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} listItem\n   */\n\n\n  _handleCheckmarkChange(listItem) {\n    const editor = this.editor;\n    const model = editor.model;\n    const previousSelectionRanges = Array.from(model.document.selection.getRanges());\n    model.change(writer => {\n      writer.setSelection(listItem, 'end');\n      editor.execute('checkTodoList');\n      writer.setSelection(previousSelectionRanges);\n    });\n  }\n\n} // Handles the left/right (LTR/RTL content) arrow key and moves the selection at the end of the previous block element\n// if the selection is just after the checkbox element. In other words, it jumps over the checkbox element when\n// moving the selection to the left/right (LTR/RTL).\n//\n// @private\n// @param {module:engine/model/model~Model} model\n// @param {module:utils/locale~Locale} locale\n// @returns {Function} Callback for 'keydown' events.\n\nfunction jumpOverCheckmarkOnSideArrowKeyPress(model, locale) {\n  return (eventInfo, domEventData) => {\n    const direction = getLocalizedArrowKeyCodeDirection(domEventData.keyCode, locale.contentLanguageDirection);\n\n    if (direction != 'left') {\n      return;\n    }\n\n    const schema = model.schema;\n    const selection = model.document.selection;\n\n    if (!selection.isCollapsed) {\n      return;\n    }\n\n    const position = selection.getFirstPosition();\n    const parent = position.parent;\n\n    if (parent.name === 'listItem' && parent.getAttribute('listType') == 'todo' && position.isAtStart) {\n      const newRange = schema.getNearestSelectionRange(model.createPositionBefore(parent), 'backward');\n\n      if (newRange) {\n        model.change(writer => writer.setSelection(newRange));\n      }\n\n      domEventData.preventDefault();\n      domEventData.stopPropagation();\n      eventInfo.stop();\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-list/src/todolistediting.js"],"names":["Plugin","getCode","parseKeystroke","getLocalizedArrowKeyCodeDirection","ListCommand","ListEditing","CheckTodoListCommand","dataModelViewInsertion","dataViewModelCheckmarkInsertion","mapModelToViewPosition","modelViewChangeChecked","modelViewChangeType","modelViewInsertion","ITEM_TOGGLE_KEYSTROKE","TodoListEditing","pluginName","requires","init","editor","editing","data","model","schema","extend","allowAttributes","addAttributeCheck","context","attributeName","item","last","name","getAttribute","commands","add","checkTodoListCommand","downcastDispatcher","on","priority","upcastDispatcher","listItem","_handleCheckmarkChange","view","mapper","listenTo","document","jumpOverCheckmarkOnSideArrowKeyPress","locale","evt","execute","stop","listItemsToFix","Set","args","operation","type","oldName","position","nodeAfter","hasAttribute","key","oldValue","range","getItems","registerPostFixer","writer","hasChanged","removeAttribute","clear","previousSelectionRanges","Array","from","selection","getRanges","change","setSelection","eventInfo","domEventData","direction","keyCode","contentLanguageDirection","isCollapsed","getFirstPosition","parent","isAtStart","newRange","getNearestSelectionRange","createPositionBefore","preventDefault","stopPropagation"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/todolistediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport {\n\tgetCode,\n\tparseKeystroke,\n\tgetLocalizedArrowKeyCodeDirection\n} from 'ckeditor5/src/utils';\n\nimport ListCommand from './listcommand';\nimport ListEditing from './listediting';\nimport CheckTodoListCommand from './checktodolistcommand';\nimport {\n\tdataModelViewInsertion,\n\tdataViewModelCheckmarkInsertion,\n\tmapModelToViewPosition,\n\tmodelViewChangeChecked,\n\tmodelViewChangeType,\n\tmodelViewInsertion\n} from './todolistconverters';\n\nconst ITEM_TOGGLE_KEYSTROKE = parseKeystroke( 'Ctrl+Enter' );\n\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/listediting~ListEditing list editing plugin} and extends\n * it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n * - `'todoListCheck'` as an alias for `checkTodoList` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TodoListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TodoListEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ListEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst { editing, data, model } = editor;\n\n\t\t// Extend schema.\n\t\tmodel.schema.extend( 'listItem', {\n\t\t\tallowAttributes: [ 'todoListChecked' ]\n\t\t} );\n\n\t\t// Disallow todoListChecked attribute on other nodes than listItem with to-do listType.\n\t\tmodel.schema.addAttributeCheck( ( context, attributeName ) => {\n\t\t\tconst item = context.last;\n\n\t\t\tif ( attributeName == 'todoListChecked' && item.name == 'listItem' && item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Register `todoList` command.\n\t\teditor.commands.add( 'todoList', new ListCommand( editor, 'todo' ) );\n\n\t\tconst checkTodoListCommand = new CheckTodoListCommand( editor );\n\n\t\t// Register `checkTodoList` command and add `todoListCheck` command as an alias for backward compatibility.\n\t\teditor.commands.add( 'checkTodoList', checkTodoListCommand );\n\t\teditor.commands.add( 'todoListCheck', checkTodoListCommand );\n\n\t\t// Define converters.\n\t\tdata.downcastDispatcher.on( 'insert:listItem', dataModelViewInsertion( model ), { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:input', dataViewModelCheckmarkInsertion, { priority: 'high' } );\n\n\t\tediting.downcastDispatcher.on(\n\t\t\t'insert:listItem',\n\t\t\tmodelViewInsertion( model, listItem => this._handleCheckmarkChange( listItem ) ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\t\tediting.downcastDispatcher.on(\n\t\t\t'attribute:listType:listItem',\n\t\t\tmodelViewChangeType( listItem => this._handleCheckmarkChange( listItem ), editing.view )\n\t\t);\n\t\tediting.downcastDispatcher.on(\n\t\t\t'attribute:todoListChecked:listItem',\n\t\t\tmodelViewChangeChecked( listItem => this._handleCheckmarkChange( listItem ) )\n\t\t);\n\n\t\tediting.mapper.on( 'modelToViewPosition', mapModelToViewPosition( editing.view ) );\n\t\tdata.mapper.on( 'modelToViewPosition', mapModelToViewPosition( editing.view ) );\n\n\t\t// Jump at the end of the previous node on left arrow key press, when selection is after the checkbox.\n\t\t//\n\t\t// <blockquote><p>Foo</p></blockquote>\n\t\t// <ul><li><checkbox/>{}Bar</li></ul>\n\t\t//\n\t\t// press: `<-`\n\t\t//\n\t\t// <blockquote><p>Foo{}</p></blockquote>\n\t\t// <ul><li><checkbox/>Bar</li></ul>\n\t\t//\n\t\tthis.listenTo( editing.view.document, 'arrowKey', jumpOverCheckmarkOnSideArrowKeyPress( model, editor.locale ), { context: 'li' } );\n\n\t\t// Toggle check state of selected to-do list items on keystroke.\n\t\tthis.listenTo( editing.view.document, 'keydown', ( evt, data ) => {\n\t\t\tif ( getCode( data ) === ITEM_TOGGLE_KEYSTROKE ) {\n\t\t\t\teditor.execute( 'checkTodoList' );\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// Remove `todoListChecked` attribute when a host element is no longer a to-do list item.\n\t\tconst listItemsToFix = new Set();\n\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.type == 'rename' && operation.oldName == 'listItem' ) {\n\t\t\t\tconst item = operation.position.nodeAfter;\n\n\t\t\t\tif ( item.hasAttribute( 'todoListChecked' ) ) {\n\t\t\t\t\tlistItemsToFix.add( item );\n\t\t\t\t}\n\t\t\t} else if ( operation.type == 'changeAttribute' && operation.key == 'listType' && operation.oldValue === 'todo' ) {\n\t\t\t\tfor ( const item of operation.range.getItems() ) {\n\t\t\t\t\tif ( item.hasAttribute( 'todoListChecked' ) && item.getAttribute( 'listType' ) !== 'todo' ) {\n\t\t\t\t\t\tlistItemsToFix.add( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tlet hasChanged = false;\n\n\t\t\tfor ( const listItem of listItemsToFix ) {\n\t\t\t\twriter.removeAttribute( 'todoListChecked', listItem );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tlistItemsToFix.clear();\n\n\t\t\treturn hasChanged;\n\t\t} );\n\t}\n\n\t/**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} listItem\n\t */\n\t_handleCheckmarkChange( listItem ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst previousSelectionRanges = Array.from( model.document.selection.getRanges() );\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( listItem, 'end' );\n\t\t\teditor.execute( 'checkTodoList' );\n\t\t\twriter.setSelection( previousSelectionRanges );\n\t\t} );\n\t}\n}\n\n// Handles the left/right (LTR/RTL content) arrow key and moves the selection at the end of the previous block element\n// if the selection is just after the checkbox element. In other words, it jumps over the checkbox element when\n// moving the selection to the left/right (LTR/RTL).\n//\n// @private\n// @param {module:engine/model/model~Model} model\n// @param {module:utils/locale~Locale} locale\n// @returns {Function} Callback for 'keydown' events.\nfunction jumpOverCheckmarkOnSideArrowKeyPress( model, locale ) {\n\treturn ( eventInfo, domEventData ) => {\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( domEventData.keyCode, locale.contentLanguageDirection );\n\n\t\tif ( direction != 'left' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst parent = position.parent;\n\n\t\tif ( parent.name === 'listItem' && parent.getAttribute( 'listType' ) == 'todo' && position.isAtStart ) {\n\t\t\tconst newRange = schema.getNearestSelectionRange( model.createPositionBefore( parent ), 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => writer.setSelection( newRange ) );\n\t\t\t}\n\n\t\t\tdomEventData.preventDefault();\n\t\t\tdomEventData.stopPropagation();\n\t\t\teventInfo.stop();\n\t\t}\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}