{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { isHeadingColumnCell, updateNumericAttribute } from '../utils/common';\nimport { getColumnIndexes, getSelectionAffectedTableCells } from '../utils/selection';\nimport { getHorizontallyOverlappingCells, splitVertically } from '../utils/structure';\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n *\t\teditor.execute( 'setTableColumnHeader' );\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n *\n * @extends module:core/command~Command\n */\n\nexport default class SetHeaderColumnCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const selectedCells = getSelectionAffectedTableCells(model.document.selection);\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const isInTable = selectedCells.length > 0;\n    this.isEnabled = isInTable;\n    /**\n     * Flag indicating whether the command is active. The command is active when the\n     * {@link module:engine/model/selection~Selection} is in a header column.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #value\n     */\n\n    this.value = isInTable && selectedCells.every(cell => isHeadingColumnCell(tableUtils, cell));\n  }\n  /**\n   * Executes the command.\n   *\n   * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n   *\n   * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n   *\n   * @fires execute\n   * @param {Object} [options]\n   * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) the header columns according to\n   * the `forceValue` parameter instead of the current model state.\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (options.forceValue === this.value) {\n      return;\n    }\n\n    const model = this.editor.model;\n    const selectedCells = getSelectionAffectedTableCells(model.document.selection);\n    const table = selectedCells[0].findAncestor('table');\n    const {\n      first,\n      last\n    } = getColumnIndexes(selectedCells);\n    const headingColumnsToSet = this.value ? first : last + 1;\n    model.change(writer => {\n      if (headingColumnsToSet) {\n        // Changing heading columns requires to check if any of a heading cell is overlapping horizontally the table head.\n        // Any table cell that has a colspan attribute > 1 will not exceed the table head so we need to fix it in columns before.\n        const overlappingCells = getHorizontallyOverlappingCells(table, headingColumnsToSet);\n\n        for (const {\n          cell,\n          column\n        } of overlappingCells) {\n          splitVertically(cell, column, headingColumnsToSet, writer);\n        }\n      }\n\n      updateNumericAttribute('headingColumns', headingColumnsToSet, table, writer, 0);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js"],"names":["Command","isHeadingColumnCell","updateNumericAttribute","getColumnIndexes","getSelectionAffectedTableCells","getHorizontallyOverlappingCells","splitVertically","SetHeaderColumnCommand","refresh","model","editor","selectedCells","document","selection","tableUtils","plugins","get","isInTable","length","isEnabled","value","every","cell","execute","options","forceValue","table","findAncestor","first","last","headingColumnsToSet","change","writer","overlappingCells","column"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,SACCC,mBADD,EAECC,sBAFD,QAGO,iBAHP;AAIA,SAASC,gBAAT,EAA2BC,8BAA3B,QAAiE,oBAAjE;AACA,SAASC,+BAAT,EAA0CC,eAA1C,QAAiE,oBAAjE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,sBAAN,SAAqCP,OAArC,CAA6C;AAC3D;AACD;AACA;AACCQ,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,aAAa,GAAGP,8BAA8B,CAAEK,KAAK,CAACG,QAAN,CAAeC,SAAjB,CAApD;AACA,UAAMC,UAAU,GAAG,KAAKJ,MAAL,CAAYK,OAAZ,CAAoBC,GAApB,CAAyB,YAAzB,CAAnB;AACA,UAAMC,SAAS,GAAGN,aAAa,CAACO,MAAd,GAAuB,CAAzC;AAEA,SAAKC,SAAL,GAAiBF,SAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKG,KAAL,GAAaH,SAAS,IAAIN,aAAa,CAACU,KAAd,CAAqBC,IAAI,IAAIrB,mBAAmB,CAAEa,UAAF,EAAcQ,IAAd,CAAhD,CAA1B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,GAAiB;AAAA,QAAfC,OAAe,uEAAL,EAAK;;AACvB,QAAKA,OAAO,CAACC,UAAR,KAAuB,KAAKL,KAAjC,EAAyC;AACxC;AACA;;AAED,UAAMX,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,aAAa,GAAGP,8BAA8B,CAAEK,KAAK,CAACG,QAAN,CAAeC,SAAjB,CAApD;AACA,UAAMa,KAAK,GAAGf,aAAa,CAAE,CAAF,CAAb,CAAmBgB,YAAnB,CAAiC,OAAjC,CAAd;AAEA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkB1B,gBAAgB,CAAEQ,aAAF,CAAxC;AACA,UAAMmB,mBAAmB,GAAG,KAAKV,KAAL,GAAaQ,KAAb,GAAqBC,IAAI,GAAG,CAAxD;AAEApB,IAAAA,KAAK,CAACsB,MAAN,CAAcC,MAAM,IAAI;AACvB,UAAKF,mBAAL,EAA2B;AAC1B;AACA;AACA,cAAMG,gBAAgB,GAAG5B,+BAA+B,CAAEqB,KAAF,EAASI,mBAAT,CAAxD;;AAEA,aAAM,MAAM;AAAER,UAAAA,IAAF;AAAQY,UAAAA;AAAR,SAAZ,IAAgCD,gBAAhC,EAAmD;AAClD3B,UAAAA,eAAe,CAAEgB,IAAF,EAAQY,MAAR,EAAgBJ,mBAAhB,EAAqCE,MAArC,CAAf;AACA;AACD;;AAED9B,MAAAA,sBAAsB,CAAE,gBAAF,EAAoB4B,mBAApB,EAAyCJ,KAAzC,EAAgDM,MAAhD,EAAwD,CAAxD,CAAtB;AACA,KAZD;AAaA;;AA5D0D","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\nimport {\n\tisHeadingColumnCell,\n\tupdateNumericAttribute\n} from '../utils/common';\nimport { getColumnIndexes, getSelectionAffectedTableCells } from '../utils/selection';\nimport { getHorizontallyOverlappingCells, splitVertically } from '../utils/structure';\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n *\t\teditor.execute( 'setTableColumnHeader' );\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selectedCells = getSelectionAffectedTableCells( model.document.selection );\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst isInTable = selectedCells.length > 0;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header column.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && selectedCells.every( cell => isHeadingColumnCell( tableUtils, cell ) );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) the header columns according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */\n\texecute( options = {} ) {\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst selectedCells = getSelectionAffectedTableCells( model.document.selection );\n\t\tconst table = selectedCells[ 0 ].findAncestor( 'table' );\n\n\t\tconst { first, last } = getColumnIndexes( selectedCells );\n\t\tconst headingColumnsToSet = this.value ? first : last + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingColumnsToSet ) {\n\t\t\t\t// Changing heading columns requires to check if any of a heading cell is overlapping horizontally the table head.\n\t\t\t\t// Any table cell that has a colspan attribute > 1 will not exceed the table head so we need to fix it in columns before.\n\t\t\t\tconst overlappingCells = getHorizontallyOverlappingCells( table, headingColumnsToSet );\n\n\t\t\t\tfor ( const { cell, column } of overlappingCells ) {\n\t\t\t\t\tsplitVertically( cell, column, headingColumnsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingColumns', headingColumnsToSet, table, writer, 0 );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}