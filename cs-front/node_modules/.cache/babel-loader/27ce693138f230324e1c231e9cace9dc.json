{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/liststyleui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView, SplitButtonView, createDropdown, addToolbarToDropdown } from 'ckeditor5/src/ui';\nimport bulletedListIcon from '../theme/icons/bulletedlist.svg';\nimport numberedListIcon from '../theme/icons/numberedlist.svg';\nimport listStyleDiscIcon from '../theme/icons/liststyledisc.svg';\nimport listStyleCircleIcon from '../theme/icons/liststylecircle.svg';\nimport listStyleSquareIcon from '../theme/icons/liststylesquare.svg';\nimport listStyleDecimalIcon from '../theme/icons/liststyledecimal.svg';\nimport listStyleDecimalWithLeadingZeroIcon from '../theme/icons/liststyledecimalleadingzero.svg';\nimport listStyleLowerRomanIcon from '../theme/icons/liststylelowerroman.svg';\nimport listStyleUpperRomanIcon from '../theme/icons/liststyleupperroman.svg';\nimport listStyleLowerLatinIcon from '../theme/icons/liststylelowerlatin.svg';\nimport listStyleUpperLatinIcon from '../theme/icons/liststyleupperlatin.svg';\nimport '../theme/liststyles.css';\n/**\n * The list style UI plugin. It introduces the extended `'bulletedList'` and `'numberedList'` toolbar\n * buttons that allow users to change styles of individual lists in the content.\n *\n * **Note**: Buttons introduced by this plugin override implementations from the {@link module:list/listui~ListUI}\n * (because they share the same names).\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ListStyleUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ListStyleUI';\n  }\n\n  init() {\n    const editor = this.editor;\n    const t = editor.locale.t;\n    editor.ui.componentFactory.add('bulletedList', getSplitButtonCreator({\n      editor,\n      parentCommandName: 'bulletedList',\n      buttonLabel: t('Bulleted List'),\n      buttonIcon: bulletedListIcon,\n      toolbarAriaLabel: t('Bulleted list styles toolbar'),\n      styleDefinitions: [{\n        label: t('Toggle the disc list style'),\n        tooltip: t('Disc'),\n        type: 'disc',\n        icon: listStyleDiscIcon\n      }, {\n        label: t('Toggle the circle list style'),\n        tooltip: t('Circle'),\n        type: 'circle',\n        icon: listStyleCircleIcon\n      }, {\n        label: t('Toggle the square list style'),\n        tooltip: t('Square'),\n        type: 'square',\n        icon: listStyleSquareIcon\n      }]\n    }));\n    editor.ui.componentFactory.add('numberedList', getSplitButtonCreator({\n      editor,\n      parentCommandName: 'numberedList',\n      buttonLabel: t('Numbered List'),\n      buttonIcon: numberedListIcon,\n      toolbarAriaLabel: t('Numbered list styles toolbar'),\n      styleDefinitions: [{\n        label: t('Toggle the decimal list style'),\n        tooltip: t('Decimal'),\n        type: 'decimal',\n        icon: listStyleDecimalIcon\n      }, {\n        label: t('Toggle the decimal with leading zero list style'),\n        tooltip: t('Decimal with leading zero'),\n        type: 'decimal-leading-zero',\n        icon: listStyleDecimalWithLeadingZeroIcon\n      }, {\n        label: t('Toggle the lower–roman list style'),\n        tooltip: t('Lower–roman'),\n        type: 'lower-roman',\n        icon: listStyleLowerRomanIcon\n      }, {\n        label: t('Toggle the upper–roman list style'),\n        tooltip: t('Upper-roman'),\n        type: 'upper-roman',\n        icon: listStyleUpperRomanIcon\n      }, {\n        label: t('Toggle the lower–latin list style'),\n        tooltip: t('Lower-latin'),\n        type: 'lower-latin',\n        icon: listStyleLowerLatinIcon\n      }, {\n        label: t('Toggle the upper–latin list style'),\n        tooltip: t('Upper-latin'),\n        type: 'upper-latin',\n        icon: listStyleUpperLatinIcon\n      }]\n    }));\n  }\n\n} // A helper that returns a function that creates a split button with a toolbar in the dropdown,\n// which in turn contains buttons allowing users to change list styles in the context of the current selection.\n//\n// @param {Object} options\n// @param {module:core/editor/editor~Editor} options.editor\n// @param {'bulletedList'|'numberedList'} options.parentCommandName The name of the higher-order editor command associated with\n// the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n// @param {String} options.buttonLabel Label of the main part of the split button.\n// @param {String} options.buttonIcon The SVG string of an icon for the main part of the split button.\n// @param {String} options.toolbarAriaLabel The ARIA label for the toolbar in the split button dropdown.\n// @param {Object} options.styleDefinitions Definitions of the style buttons.\n// @returns {Function} A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n\nfunction getSplitButtonCreator(_ref) {\n  let {\n    editor,\n    parentCommandName,\n    buttonLabel,\n    buttonIcon,\n    toolbarAriaLabel,\n    styleDefinitions\n  } = _ref;\n  const parentCommand = editor.commands.get(parentCommandName);\n  const listStyleCommand = editor.commands.get('listStyle'); // @param {module:utils/locale~Locale} locale\n  // @returns {module:ui/dropdown/dropdownview~DropdownView}\n\n  return locale => {\n    const dropdownView = createDropdown(locale, SplitButtonView);\n    const splitButtonView = dropdownView.buttonView;\n    const styleButtonCreator = getStyleButtonCreator({\n      editor,\n      parentCommandName,\n      listStyleCommand\n    });\n    addToolbarToDropdown(dropdownView, styleDefinitions.map(styleButtonCreator));\n    dropdownView.bind('isEnabled').to(parentCommand);\n    dropdownView.toolbarView.ariaLabel = toolbarAriaLabel;\n    dropdownView.class = 'ck-list-styles-dropdown';\n    splitButtonView.on('execute', () => {\n      editor.execute(parentCommandName);\n      editor.editing.view.focus();\n    });\n    splitButtonView.set({\n      label: buttonLabel,\n      icon: buttonIcon,\n      tooltip: true,\n      isToggleable: true\n    });\n    splitButtonView.bind('isOn').to(parentCommand, 'value', value => !!value);\n    return dropdownView;\n  };\n} // A helper that returns a function (factory) that creates individual buttons used by users to change styles\n// of lists.\n//\n// @param {Object} options\n// @param {module:core/editor/editor~Editor} options.editor\n// @param {module:list/liststylecommand~ListStylesCommand} options.listStyleCommand The instance of the `ListStylesCommand` class.\n// @param {'bulletedList'|'numberedList'} options.parentCommandName The name of the higher-order command associated with a\n// particular list style (e.g. \"bulletedList\" is associated with \"square\" and \"numberedList\" is associated with \"roman\").\n// @returns {Function} A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n\n\nfunction getStyleButtonCreator(_ref2) {\n  let {\n    editor,\n    listStyleCommand,\n    parentCommandName\n  } = _ref2;\n  const locale = editor.locale;\n  const parentCommand = editor.commands.get(parentCommandName); // @param {String} label The label of the style button.\n  // @param {String} type The type of the style button (e.g. \"roman\" or \"circle\").\n  // @param {String} icon The SVG string of an icon of the style button.\n  // @param {String} tooltip The tooltip text of the button (shorter than verbose label).\n  // @returns {module:ui/button/buttonview~ButtonView}\n\n  return _ref3 => {\n    let {\n      label,\n      type,\n      icon,\n      tooltip\n    } = _ref3;\n    const button = new ButtonView(locale);\n    button.set({\n      label,\n      icon,\n      tooltip\n    });\n    listStyleCommand.on('change:value', () => {\n      button.isOn = listStyleCommand.value === type;\n    });\n    button.on('execute', () => {\n      // If the content the selection is anchored to is a list, let's change its style.\n      if (parentCommand.value) {\n        // If the current list style is not set in the model or the style is different than the\n        // one to be applied, simply apply the new style.\n        if (listStyleCommand.value !== type) {\n          editor.execute('listStyle', {\n            type\n          });\n        } // If the style was the same, remove it (the button works as an off toggle).\n        else {\n          editor.execute('listStyle', {\n            type: listStyleCommand._defaultType\n          });\n        }\n      } // If the content the selection is anchored to is not a list, let's create a list of a desired style.\n      else {\n        editor.model.change(() => {\n          editor.execute(parentCommandName);\n          editor.execute('listStyle', {\n            type\n          });\n        });\n      }\n\n      editor.editing.view.focus();\n    });\n    return button;\n  };\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-list/src/liststyleui.js"],"names":["Plugin","ButtonView","SplitButtonView","createDropdown","addToolbarToDropdown","bulletedListIcon","numberedListIcon","listStyleDiscIcon","listStyleCircleIcon","listStyleSquareIcon","listStyleDecimalIcon","listStyleDecimalWithLeadingZeroIcon","listStyleLowerRomanIcon","listStyleUpperRomanIcon","listStyleLowerLatinIcon","listStyleUpperLatinIcon","ListStyleUI","pluginName","init","editor","t","locale","ui","componentFactory","add","getSplitButtonCreator","parentCommandName","buttonLabel","buttonIcon","toolbarAriaLabel","styleDefinitions","label","tooltip","type","icon","parentCommand","commands","get","listStyleCommand","dropdownView","splitButtonView","buttonView","styleButtonCreator","getStyleButtonCreator","map","bind","to","toolbarView","ariaLabel","class","on","execute","editing","view","focus","set","isToggleable","value","button","isOn","_defaultType","model","change"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/liststyleui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView, SplitButtonView, createDropdown, addToolbarToDropdown } from 'ckeditor5/src/ui';\n\nimport bulletedListIcon from '../theme/icons/bulletedlist.svg';\nimport numberedListIcon from '../theme/icons/numberedlist.svg';\n\nimport listStyleDiscIcon from '../theme/icons/liststyledisc.svg';\nimport listStyleCircleIcon from '../theme/icons/liststylecircle.svg';\nimport listStyleSquareIcon from '../theme/icons/liststylesquare.svg';\nimport listStyleDecimalIcon from '../theme/icons/liststyledecimal.svg';\nimport listStyleDecimalWithLeadingZeroIcon from '../theme/icons/liststyledecimalleadingzero.svg';\nimport listStyleLowerRomanIcon from '../theme/icons/liststylelowerroman.svg';\nimport listStyleUpperRomanIcon from '../theme/icons/liststyleupperroman.svg';\nimport listStyleLowerLatinIcon from '../theme/icons/liststylelowerlatin.svg';\nimport listStyleUpperLatinIcon from '../theme/icons/liststyleupperlatin.svg';\n\nimport '../theme/liststyles.css';\n\n/**\n * The list style UI plugin. It introduces the extended `'bulletedList'` and `'numberedList'` toolbar\n * buttons that allow users to change styles of individual lists in the content.\n *\n * **Note**: Buttons introduced by this plugin override implementations from the {@link module:list/listui~ListUI}\n * (because they share the same names).\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListStyleUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ListStyleUI';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.locale.t;\n\n\t\teditor.ui.componentFactory.add( 'bulletedList', getSplitButtonCreator( {\n\t\t\teditor,\n\t\t\tparentCommandName: 'bulletedList',\n\t\t\tbuttonLabel: t( 'Bulleted List' ),\n\t\t\tbuttonIcon: bulletedListIcon,\n\t\t\ttoolbarAriaLabel: t( 'Bulleted list styles toolbar' ),\n\t\t\tstyleDefinitions: [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the disc list style' ),\n\t\t\t\t\ttooltip: t( 'Disc' ),\n\t\t\t\t\ttype: 'disc',\n\t\t\t\t\ticon: listStyleDiscIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the circle list style' ),\n\t\t\t\t\ttooltip: t( 'Circle' ),\n\t\t\t\t\ttype: 'circle',\n\t\t\t\t\ticon: listStyleCircleIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the square list style' ),\n\t\t\t\t\ttooltip: t( 'Square' ),\n\t\t\t\t\ttype: 'square',\n\t\t\t\t\ticon: listStyleSquareIcon\n\t\t\t\t}\n\t\t\t]\n\t\t} ) );\n\n\t\teditor.ui.componentFactory.add( 'numberedList', getSplitButtonCreator( {\n\t\t\teditor,\n\t\t\tparentCommandName: 'numberedList',\n\t\t\tbuttonLabel: t( 'Numbered List' ),\n\t\t\tbuttonIcon: numberedListIcon,\n\t\t\ttoolbarAriaLabel: t( 'Numbered list styles toolbar' ),\n\t\t\tstyleDefinitions: [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the decimal list style' ),\n\t\t\t\t\ttooltip: t( 'Decimal' ),\n\t\t\t\t\ttype: 'decimal',\n\t\t\t\t\ticon: listStyleDecimalIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the decimal with leading zero list style' ),\n\t\t\t\t\ttooltip: t( 'Decimal with leading zero' ),\n\t\t\t\t\ttype: 'decimal-leading-zero',\n\t\t\t\t\ticon: listStyleDecimalWithLeadingZeroIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the lower–roman list style' ),\n\t\t\t\t\ttooltip: t( 'Lower–roman' ),\n\t\t\t\t\ttype: 'lower-roman',\n\t\t\t\t\ticon: listStyleLowerRomanIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the upper–roman list style' ),\n\t\t\t\t\ttooltip: t( 'Upper-roman' ),\n\t\t\t\t\ttype: 'upper-roman',\n\t\t\t\t\ticon: listStyleUpperRomanIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the lower–latin list style' ),\n\t\t\t\t\ttooltip: t( 'Lower-latin' ),\n\t\t\t\t\ttype: 'lower-latin',\n\t\t\t\t\ticon: listStyleLowerLatinIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the upper–latin list style' ),\n\t\t\t\t\ttooltip: t( 'Upper-latin' ),\n\t\t\t\t\ttype: 'upper-latin',\n\t\t\t\t\ticon: listStyleUpperLatinIcon\n\t\t\t\t}\n\t\t\t]\n\t\t} ) );\n\t}\n}\n\n// A helper that returns a function that creates a split button with a toolbar in the dropdown,\n// which in turn contains buttons allowing users to change list styles in the context of the current selection.\n//\n// @param {Object} options\n// @param {module:core/editor/editor~Editor} options.editor\n// @param {'bulletedList'|'numberedList'} options.parentCommandName The name of the higher-order editor command associated with\n// the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n// @param {String} options.buttonLabel Label of the main part of the split button.\n// @param {String} options.buttonIcon The SVG string of an icon for the main part of the split button.\n// @param {String} options.toolbarAriaLabel The ARIA label for the toolbar in the split button dropdown.\n// @param {Object} options.styleDefinitions Definitions of the style buttons.\n// @returns {Function} A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\nfunction getSplitButtonCreator( { editor, parentCommandName, buttonLabel, buttonIcon, toolbarAriaLabel, styleDefinitions } ) {\n\tconst parentCommand = editor.commands.get( parentCommandName );\n\tconst listStyleCommand = editor.commands.get( 'listStyle' );\n\n\t// @param {module:utils/locale~Locale} locale\n\t// @returns {module:ui/dropdown/dropdownview~DropdownView}\n\treturn locale => {\n\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\tconst splitButtonView = dropdownView.buttonView;\n\t\tconst styleButtonCreator = getStyleButtonCreator( { editor, parentCommandName, listStyleCommand } );\n\n\t\taddToolbarToDropdown( dropdownView, styleDefinitions.map( styleButtonCreator ) );\n\n\t\tdropdownView.bind( 'isEnabled' ).to( parentCommand );\n\t\tdropdownView.toolbarView.ariaLabel = toolbarAriaLabel;\n\t\tdropdownView.class = 'ck-list-styles-dropdown';\n\n\t\tsplitButtonView.on( 'execute', () => {\n\t\t\teditor.execute( parentCommandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\tsplitButtonView.set( {\n\t\t\tlabel: buttonLabel,\n\t\t\ticon: buttonIcon,\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\tsplitButtonView.bind( 'isOn' ).to( parentCommand, 'value', value => !!value );\n\n\t\treturn dropdownView;\n\t};\n}\n\n// A helper that returns a function (factory) that creates individual buttons used by users to change styles\n// of lists.\n//\n// @param {Object} options\n// @param {module:core/editor/editor~Editor} options.editor\n// @param {module:list/liststylecommand~ListStylesCommand} options.listStyleCommand The instance of the `ListStylesCommand` class.\n// @param {'bulletedList'|'numberedList'} options.parentCommandName The name of the higher-order command associated with a\n// particular list style (e.g. \"bulletedList\" is associated with \"square\" and \"numberedList\" is associated with \"roman\").\n// @returns {Function} A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\nfunction getStyleButtonCreator( { editor, listStyleCommand, parentCommandName } ) {\n\tconst locale = editor.locale;\n\tconst parentCommand = editor.commands.get( parentCommandName );\n\n\t// @param {String} label The label of the style button.\n\t// @param {String} type The type of the style button (e.g. \"roman\" or \"circle\").\n\t// @param {String} icon The SVG string of an icon of the style button.\n\t// @param {String} tooltip The tooltip text of the button (shorter than verbose label).\n\t// @returns {module:ui/button/buttonview~ButtonView}\n\treturn ( { label, type, icon, tooltip } ) => {\n\t\tconst button = new ButtonView( locale );\n\n\t\tbutton.set( { label, icon, tooltip } );\n\n\t\tlistStyleCommand.on( 'change:value', () => {\n\t\t\tbutton.isOn = listStyleCommand.value === type;\n\t\t} );\n\n\t\tbutton.on( 'execute', () => {\n\t\t\t// If the content the selection is anchored to is a list, let's change its style.\n\t\t\tif ( parentCommand.value ) {\n\t\t\t\t// If the current list style is not set in the model or the style is different than the\n\t\t\t\t// one to be applied, simply apply the new style.\n\t\t\t\tif ( listStyleCommand.value !== type ) {\n\t\t\t\t\teditor.execute( 'listStyle', { type } );\n\t\t\t\t}\n\t\t\t\t// If the style was the same, remove it (the button works as an off toggle).\n\t\t\t\telse {\n\t\t\t\t\teditor.execute( 'listStyle', { type: listStyleCommand._defaultType } );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the content the selection is anchored to is not a list, let's create a list of a desired style.\n\t\t\telse {\n\t\t\t\teditor.model.change( () => {\n\t\t\t\t\teditor.execute( parentCommandName );\n\t\t\t\t\teditor.execute( 'listStyle', { type } );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn button;\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}