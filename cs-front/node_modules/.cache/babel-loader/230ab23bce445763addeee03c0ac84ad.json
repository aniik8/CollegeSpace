{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/toggleimagecaptioncommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport ImageBlockEditing from '../image/imageblockediting';\nimport { getCaptionFromImageModelElement, getCaptionFromModelSelection } from './utils';\n/**\n * The toggle image caption command.\n *\n * This command is registered by {@link module:image/imagecaption/imagecaptionediting~ImageCaptionEditing} as the\n * `'toggleImageCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the image caption of a selected image (depending on whether the caption is present or not),\n * * removes the image caption if the selection is anchored in one.\n *\n *\t\t// Toggle the presence of the caption.\n *\t\teditor.execute( 'toggleImageCaption' );\n *\n * **Note**: Upon executing this command, the selection will be set on the image if previously anchored in the caption element.\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n *\t\teditor.execute( 'toggleImageCaption', { focusCaptionOnShow: true } );\n *\n * @extends module:core/command~Command\n */\n\nexport default class ToggleImageCaptionCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const editor = this.editor;\n    const imageUtils = editor.plugins.get('ImageUtils'); // Only block images can get captions.\n\n    if (!editor.plugins.has(ImageBlockEditing)) {\n      this.isEnabled = false;\n      this.value = false;\n      return;\n    }\n\n    const selection = editor.model.document.selection;\n    const selectedElement = selection.getSelectedElement();\n\n    if (!selectedElement) {\n      const ancestorCaptionElement = getCaptionFromModelSelection(imageUtils, selection);\n      this.isEnabled = !!ancestorCaptionElement;\n      this.value = !!ancestorCaptionElement;\n      return;\n    } // Block images support captions by default but the command should also be enabled for inline\n    // images because toggling the caption when one is selected should convert it into a block image.\n\n\n    this.isEnabled = this.editor.plugins.get('ImageUtils').isImage(selectedElement);\n\n    if (!this.isEnabled) {\n      this.value = false;\n    } else {\n      this.value = !!getCaptionFromImageModelElement(selectedElement);\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   *\t\teditor.execute( 'toggleImageCaption' );\n   *\n   * @param {Object} [options] Options for the executed command.\n   * @param {String} [options.focusCaptionOnShow] When true and the caption shows up, the selection will be moved into it straight away.\n   * @fires execute\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      focusCaptionOnShow\n    } = options;\n    this.editor.model.change(writer => {\n      if (this.value) {\n        this._hideImageCaption(writer);\n      } else {\n        this._showImageCaption(writer, focusCaptionOnShow);\n      }\n    });\n  }\n  /**\n   * Shows the caption of the `<imageBlock>` or `<imageInline>`. Also:\n   *\n   * * it converts `<imageInline>` to `<imageBlock>` to show the caption,\n   * * it attempts to restore the caption content from the `ImageCaptionEditing` caption registry,\n   * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n   *\n   * @private\n   * @param {module:engine/model/writer~Writer} writer\n   */\n\n\n  _showImageCaption(writer, focusCaptionOnShow) {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const imageCaptionEditing = this.editor.plugins.get('ImageCaptionEditing');\n    let selectedImage = selection.getSelectedElement();\n\n    const savedCaption = imageCaptionEditing._getSavedCaption(selectedImage); // Convert imageInline -> image first.\n\n\n    if (this.editor.plugins.get('ImageUtils').isInlineImage(selectedImage)) {\n      this.editor.execute('imageTypeBlock'); // Executing the command created a new model element. Let's pick it again.\n\n      selectedImage = selection.getSelectedElement();\n    } // Try restoring the caption from the ImageCaptionEditing plugin storage.\n\n\n    const newCaptionElement = savedCaption || writer.createElement('caption');\n    writer.append(newCaptionElement, selectedImage);\n\n    if (focusCaptionOnShow) {\n      writer.setSelection(newCaptionElement, 'in');\n    }\n  }\n  /**\n   * Hides the caption of a selected image (or an image caption the selection is anchored to).\n   *\n   * The content of the caption is stored in the `ImageCaptionEditing` caption registry to make this\n   * a reversible action.\n   *\n   * @private\n   * @param {module:engine/model/writer~Writer} writer\n   */\n\n\n  _hideImageCaption(writer) {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n    const imageCaptionEditing = editor.plugins.get('ImageCaptionEditing');\n    const imageUtils = editor.plugins.get('ImageUtils');\n    let selectedImage = selection.getSelectedElement();\n    let captionElement;\n\n    if (selectedImage) {\n      captionElement = getCaptionFromImageModelElement(selectedImage);\n    } else {\n      captionElement = getCaptionFromModelSelection(imageUtils, selection);\n      selectedImage = captionElement.parent;\n    } // Store the caption content so it can be restored quickly if the user changes their mind even if they toggle image<->imageInline.\n\n\n    imageCaptionEditing._saveCaption(selectedImage, captionElement);\n\n    writer.setSelection(selectedImage, 'on');\n    writer.remove(captionElement);\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-image/src/imagecaption/toggleimagecaptioncommand.js"],"names":["Command","ImageBlockEditing","getCaptionFromImageModelElement","getCaptionFromModelSelection","ToggleImageCaptionCommand","refresh","editor","imageUtils","plugins","get","has","isEnabled","value","selection","model","document","selectedElement","getSelectedElement","ancestorCaptionElement","isImage","execute","options","focusCaptionOnShow","change","writer","_hideImageCaption","_showImageCaption","imageCaptionEditing","selectedImage","savedCaption","_getSavedCaption","isInlineImage","newCaptionElement","createElement","append","setSelection","captionElement","parent","_saveCaption","remove"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/toggleimagecaptioncommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\nimport ImageBlockEditing from '../image/imageblockediting';\nimport { getCaptionFromImageModelElement, getCaptionFromModelSelection } from './utils';\n\n/**\n * The toggle image caption command.\n *\n * This command is registered by {@link module:image/imagecaption/imagecaptionediting~ImageCaptionEditing} as the\n * `'toggleImageCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the image caption of a selected image (depending on whether the caption is present or not),\n * * removes the image caption if the selection is anchored in one.\n *\n *\t\t// Toggle the presence of the caption.\n *\t\teditor.execute( 'toggleImageCaption' );\n *\n * **Note**: Upon executing this command, the selection will be set on the image if previously anchored in the caption element.\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n *\t\teditor.execute( 'toggleImageCaption', { focusCaptionOnShow: true } );\n *\n * @extends module:core/command~Command\n */\nexport default class ToggleImageCaptionCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\n\t\t// Only block images can get captions.\n\t\tif ( !editor.plugins.has( ImageBlockEditing ) ) {\n\t\t\tthis.isEnabled = false;\n\t\t\tthis.value = false;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = editor.model.document.selection;\n\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\tif ( !selectedElement ) {\n\t\t\tconst ancestorCaptionElement = getCaptionFromModelSelection( imageUtils, selection );\n\n\t\t\tthis.isEnabled = !!ancestorCaptionElement;\n\t\t\tthis.value = !!ancestorCaptionElement;\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Block images support captions by default but the command should also be enabled for inline\n\t\t// images because toggling the caption when one is selected should convert it into a block image.\n\t\tthis.isEnabled = this.editor.plugins.get( 'ImageUtils' ).isImage( selectedElement );\n\n\t\tif ( !this.isEnabled ) {\n\t\t\tthis.value = false;\n\t\t} else {\n\t\t\tthis.value = !!getCaptionFromImageModelElement( selectedElement );\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t *\t\teditor.execute( 'toggleImageCaption' );\n\t *\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {String} [options.focusCaptionOnShow] When true and the caption shows up, the selection will be moved into it straight away.\n\t * @fires execute\n\t */\n\texecute( options = {} ) {\n\t\tconst { focusCaptionOnShow } = options;\n\n\t\tthis.editor.model.change( writer => {\n\t\t\tif ( this.value ) {\n\t\t\t\tthis._hideImageCaption( writer );\n\t\t\t} else {\n\t\t\t\tthis._showImageCaption( writer, focusCaptionOnShow );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Shows the caption of the `<imageBlock>` or `<imageInline>`. Also:\n\t *\n\t * * it converts `<imageInline>` to `<imageBlock>` to show the caption,\n\t * * it attempts to restore the caption content from the `ImageCaptionEditing` caption registry,\n\t * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\t_showImageCaption( writer, focusCaptionOnShow ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst imageCaptionEditing = this.editor.plugins.get( 'ImageCaptionEditing' );\n\n\t\tlet selectedImage = selection.getSelectedElement();\n\n\t\tconst savedCaption = imageCaptionEditing._getSavedCaption( selectedImage );\n\n\t\t// Convert imageInline -> image first.\n\t\tif ( this.editor.plugins.get( 'ImageUtils' ).isInlineImage( selectedImage ) ) {\n\t\t\tthis.editor.execute( 'imageTypeBlock' );\n\n\t\t\t// Executing the command created a new model element. Let's pick it again.\n\t\t\tselectedImage = selection.getSelectedElement();\n\t\t}\n\n\t\t// Try restoring the caption from the ImageCaptionEditing plugin storage.\n\t\tconst newCaptionElement = savedCaption || writer.createElement( 'caption' );\n\n\t\twriter.append( newCaptionElement, selectedImage );\n\n\t\tif ( focusCaptionOnShow ) {\n\t\t\twriter.setSelection( newCaptionElement, 'in' );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the caption of a selected image (or an image caption the selection is anchored to).\n\t *\n\t * The content of the caption is stored in the `ImageCaptionEditing` caption registry to make this\n\t * a reversible action.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\t_hideImageCaption( writer ) {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst imageCaptionEditing = editor.plugins.get( 'ImageCaptionEditing' );\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\t\tlet selectedImage = selection.getSelectedElement();\n\t\tlet captionElement;\n\n\t\tif ( selectedImage ) {\n\t\t\tcaptionElement = getCaptionFromImageModelElement( selectedImage );\n\t\t} else {\n\t\t\tcaptionElement = getCaptionFromModelSelection( imageUtils, selection );\n\t\t\tselectedImage = captionElement.parent;\n\t\t}\n\n\t\t// Store the caption content so it can be restored quickly if the user changes their mind even if they toggle image<->imageInline.\n\t\timageCaptionEditing._saveCaption( selectedImage, captionElement );\n\n\t\twriter.setSelection( selectedImage, 'on' );\n\t\twriter.remove( captionElement );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}