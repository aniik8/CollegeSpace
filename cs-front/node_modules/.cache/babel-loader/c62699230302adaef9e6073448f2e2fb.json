{"ast":null,"code":"var _jsxFileName = \"/Users/jaibhole/Documents/CS/cs-front/src/Component/QnA.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport Error from './Error'; // import 'quill/dist/quill.bubble.css'\n// import ReactQuill from 'react-quill';\n// import 'react-quill/dist/quill.snow.css';\n// import EditorToolbar, { modules, formats } from \"../EditorToolbar\";\n// import UpdateQ from './UpdateQ';\n\nimport CreateAns from './CreateAns';\n/*  if question undefined -- error \n    else --> answer length not zero \n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QnA = () => {\n  _s();\n\n  const BaseUrl = `http://127.0.0.1:8000`;\n  const history = useHistory();\n  const [question, setQuestion] = useState({\n    questions: [],\n    answers: []\n  });\n\n  const getData = async () => {\n    const data = await fetch(`${BaseUrl}${history.location.pathname}`);\n    const resdata = await data.json();\n    console.log(resdata);\n  };\n\n  const [clicked, setclicked] = useState({\n    clicked4ans: false,\n    clicked4update: false,\n    answered: false\n  });\n  useEffect(() => {\n    getData(); //     fetch(`${BaseUrl}${history.location.pathname}`)\n    //     .then((data)=> data.json())\n    //     .then((response)=> { console.log(response); setQuestion({\n    //         questions : response[0],\n    //         answers : response[1]\n    //     }\n    //     )\n    // }\n    // ); \n  }, []);\n  console.log(question.questions);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), typeof question.questions === \"undefined\" ? /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 54\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [question.questions.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: item.user === JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: item.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  color: \"#808080\"\n                },\n                children: item.question_date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 25\n              }, this), item.question !== undefined && item.user === JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn btn-success\",\n                onClick: () => setclicked({\n                  clicked4update: true\n                }),\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 29\n              }, this) : \"\"]\n            }, void 0, true)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, void 0, false);\n      }), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), typeof question.answers !== \"undefined\" ? question.answers.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [item.status === true ? setclicked({\n          answered: true\n        }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.answer\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Answered on : \", item.answered_date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    }) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"No answer .You haven't answered it yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Can you answer it?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: () => setclicked({\n          clicked4ans: true\n        }),\n        children: \"Answer it here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), clicked.clicked4ans === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CreateAns, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-outline-danger\",\n          onClick: () => setclicked({\n            clicked4ans: false\n          }),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(QnA, \"eDSICpkLjY4lqV5X7MRuBnMazZk=\", false, function () {\n  return [useHistory];\n});\n\n_c = QnA;\nexport default QnA;\n{\n  /* {question[1].map((item, index) => {\n                 return(<>\n                 {item.status === true ? setclicked({answered : true}) : <></>}\n                 <div className='container'>\n                     <p key={index}>{item.answer}</p>\n                     <p>Answered on : {item.answered_date}</p>\n                 </div>\n                 </>\n                 )\n             })}\n  \n  \n  <>\n         <div className='container' style={{width : \"75%\", marginTop:'5%'}}>\n         <h4>\n                 {question.map((item, index)=> {\n                     return(<>\n                    \n                         \n                         {clicked.clicked4update === true ?\n                         <UpdateQ q={item.question} qd={item.question_data} qid={item.id} qslug={item.slug}/> : \n                         <>\n                         <div key={index} style={{textAlign:\"center\"}}>\n                         <h2>{item.question}</h2>\n                         {item.question !== undefined ? <>\n                             <EditorToolbar toolbarId={'t1'}/>\n                             <ReactQuill\n                             theme=\"bubble\"\n                             readOnly={true}\n                             value={item.question_data}\n                             modules={modules('t1')}\n                             formats={formats}/> </>\n                         \n                         :<></>\n                          } </div>\n                         </>\n                         }\n                         {item.question !== undefined && item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id)\n                           ? \n                             <button type='button' className='btn btn-success' onClick={()=> setclicked({clicked4update:true})}>Update</button> : \"\" }\n                         \n                         \n                          <p>{item.user}</p>\n                         \n                     </>)\n                 })}\n             </h4>\n             \n             <hr/>\n             </div> */\n}\n{\n  /* https://medium.com/always-be-coding/four-steps-to-google-without-a-degree-8f381aa6bd5e */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"QnA\");","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/src/Component/QnA.js"],"names":["React","useEffect","useState","useHistory","Navbar","Error","CreateAns","QnA","BaseUrl","history","question","setQuestion","questions","answers","getData","data","fetch","location","pathname","resdata","json","console","log","clicked","setclicked","clicked4ans","clicked4update","answered","map","item","index","user","JSON","parse","atob","localStorage","getItem","split","user_id","color","question_date","undefined","status","answer","answered_date"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport Navbar from './Navbar';\nimport Error from './Error';\n// import 'quill/dist/quill.bubble.css'\n// import ReactQuill from 'react-quill';\n// import 'react-quill/dist/quill.snow.css';\n// import EditorToolbar, { modules, formats } from \"../EditorToolbar\";\n// import UpdateQ from './UpdateQ';\nimport CreateAns from './CreateAns';\n\n/*  if question undefined -- error \n    else --> answer length not zero \n*/\nconst QnA = () => {\n    const BaseUrl = `http://127.0.0.1:8000`\n    const history = useHistory();\n    const [question, setQuestion] = useState({\n        questions : [],\n        answers : []\n    })\n\n    const getData = async () => {\n        const data = await fetch(`${BaseUrl}${history.location.pathname}`)\n        const resdata = await data.json()\n        console.log(resdata);\n    }\n    const [clicked, setclicked] = useState({clicked4ans : false, clicked4update : false, answered : false});\n    useEffect(() => {\n        getData();\n    //     fetch(`${BaseUrl}${history.location.pathname}`)\n    //     .then((data)=> data.json())\n    //     .then((response)=> { console.log(response); setQuestion({\n    //         questions : response[0],\n    //         answers : response[1]\n    //     }\n    //     )\n    // }\n    // ); \n    }, [])\n    console.log(question.questions)\n    return (\n        <>\n        <Navbar/>\n        {typeof question.questions === \"undefined\" ? <Error/> : \n        <div>\n        {question.questions.map((item, index)=> {\n                    return(<>\n                        <div key={index}>\n                        <>\n                        <h2>{(item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id))}</h2>\n                        <h4>{item.question}</h4>\n                        <p style={{color : \"#808080\"}}>{item.question_date}</p>\n                        {item.question !== undefined && item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id)\n                          ? \n                            <button type='button' className='btn btn-success' onClick={()=> setclicked({clicked4update:true})}>Update</button> : \"\" }\n                        </> \n                            \n                        </div>\n                    </>\n                    )\n                })}\n           \n            <hr/>\n        </div> \n        }\n        {typeof question.answers !== \"undefined\" ? \n            question.answers.map((item, index) => {\n                return(<>\n                {item.status === true ? setclicked({answered : true}) : <></>}\n                <div className='container'>\n                    <p key={index}>{item.answer}</p>\n                    <p>Answered on : {item.answered_date}</p>\n                </div>\n                </>\n                )\n            }):<>\n            <h5>No answer .You haven't answered it yet</h5>\n            <p>Can you answer it?</p>\n            <button className='btn btn-success' onClick={() => setclicked({clicked4ans : true})}>Answer it here</button>\n            {clicked.clicked4ans === true ? \n            <>\n            <CreateAns/>\n            <button type='submit' className='btn btn-outline-danger' onClick={() => setclicked({clicked4ans : false})}>Cancel</button>\n           </>: <></>\n           }\n        </>\n         } \n         </>    \n    )\n}\n\nexport default QnA\n\n{/* {question[1].map((item, index) => {\n                return(<>\n                {item.status === true ? setclicked({answered : true}) : <></>}\n                <div className='container'>\n                    <p key={index}>{item.answer}</p>\n                    <p>Answered on : {item.answered_date}</p>\n                </div>\n                </>\n                )\n            })}\n \n\n\n<>\n        <div className='container' style={{width : \"75%\", marginTop:'5%'}}>\n        <h4>\n                {question.map((item, index)=> {\n                    return(<>\n                   \n                        \n                        {clicked.clicked4update === true ?\n                        <UpdateQ q={item.question} qd={item.question_data} qid={item.id} qslug={item.slug}/> : \n                        <>\n                        <div key={index} style={{textAlign:\"center\"}}>\n                        <h2>{item.question}</h2>\n                        {item.question !== undefined ? <>\n                            <EditorToolbar toolbarId={'t1'}/>\n                            <ReactQuill\n                            theme=\"bubble\"\n                            readOnly={true}\n                            value={item.question_data}\n                            modules={modules('t1')}\n                            formats={formats}/> </>\n                        \n                        :<></>\n                         } </div>\n                        </>\n                        }\n                        {item.question !== undefined && item.user === (JSON.parse(atob(localStorage.getItem('access_token').split('.')[1])).user_id)\n                          ? \n                            <button type='button' className='btn btn-success' onClick={()=> setclicked({clicked4update:true})}>Update</button> : \"\" }\n                        \n                        \n                         <p>{item.user}</p>\n                        \n                    </>)\n                })}\n            </h4>\n            \n            <hr/>\n            </div> */}\n\n\n\n{/* https://medium.com/always-be-coding/four-steps-to-google-without-a-degree-8f381aa6bd5e */}"]},"metadata":{},"sourceType":"module"}