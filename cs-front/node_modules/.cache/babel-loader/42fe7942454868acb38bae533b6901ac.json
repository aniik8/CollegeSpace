{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-paragraph-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which inserts a `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have an empty `paragraph` as a child.\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * Will be fixed to:\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph></paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellParagraphPostFixer(model) {\n  model.document.registerPostFixer(writer => tableCellContentsPostFixer(writer, model));\n} // The table cell contents post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\n\nfunction tableCellContentsPostFixer(writer, model) {\n  const changes = model.document.differ.getChanges();\n  let wasFixed = false;\n\n  for (const entry of changes) {\n    if (entry.type == 'insert' && entry.name == 'table') {\n      wasFixed = fixTable(entry.position.nodeAfter, writer) || wasFixed;\n    }\n\n    if (entry.type == 'insert' && entry.name == 'tableRow') {\n      wasFixed = fixTableRow(entry.position.nodeAfter, writer) || wasFixed;\n    }\n\n    if (entry.type == 'insert' && entry.name == 'tableCell') {\n      wasFixed = fixTableCellContent(entry.position.nodeAfter, writer) || wasFixed;\n    }\n\n    if (checkTableCellChange(entry)) {\n      wasFixed = fixTableCellContent(entry.position.parent, writer) || wasFixed;\n    }\n  }\n\n  return wasFixed;\n} // Fixes all table cells in a table.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n\n\nfunction fixTable(table, writer) {\n  let wasFixed = false;\n\n  for (const row of table.getChildren()) {\n    if (row.is('element', 'tableRow')) {\n      wasFixed = fixTableRow(row, writer) || wasFixed;\n    }\n  }\n\n  return wasFixed;\n} // Fixes all table cells in a table row.\n//\n// @param {module:engine/model/element~Element} tableRow\n// @param {module:engine/model/writer~Writer} writer\n\n\nfunction fixTableRow(tableRow, writer) {\n  let wasFixed = false;\n\n  for (const tableCell of tableRow.getChildren()) {\n    wasFixed = fixTableCellContent(tableCell, writer) || wasFixed;\n  }\n\n  return wasFixed;\n} // Fixes all table cell content by:\n// - Adding a paragraph to a table cell without any child.\n// - Wrapping direct $text in a `<paragraph>`.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean}\n\n\nfunction fixTableCellContent(tableCell, writer) {\n  // Insert paragraph to an empty table cell.\n  if (tableCell.childCount == 0) {\n    // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: insert paragraph in empty cell.' );\n    writer.insertElement('paragraph', tableCell);\n    return true;\n  } // Check table cell children for directly placed text nodes.\n  // Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n\n\n  const textNodes = Array.from(tableCell.getChildren()).filter(child => child.is('$text')); // @if CK_DEBUG_TABLE // textNodes.length && console.log( 'Post-fixing table: wrap cell content with paragraph.' );\n\n  for (const child of textNodes) {\n    writer.wrap(writer.createRangeOn(child), 'paragraph');\n  } // Return true when there were text nodes to fix.\n\n\n  return !!textNodes.length;\n} // Checks if a differ change should fix the table cell. This happens on:\n// - Removing content from the table cell (i.e. `tableCell` can be left empty).\n// - Adding a text node directly into a table cell.\n//\n// @param {Object} differ change entry\n// @returns {Boolean}\n\n\nfunction checkTableCellChange(entry) {\n  if (!entry.position || !entry.position.parent.is('element', 'tableCell')) {\n    return false;\n  }\n\n  return entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.js"],"names":["injectTableCellParagraphPostFixer","model","document","registerPostFixer","writer","tableCellContentsPostFixer","changes","differ","getChanges","wasFixed","entry","type","name","fixTable","position","nodeAfter","fixTableRow","fixTableCellContent","checkTableCellChange","parent","table","row","getChildren","is","tableRow","tableCell","childCount","insertElement","textNodes","Array","from","filter","child","wrap","createRangeOn","length"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-paragraph-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which inserts a `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have an empty `paragraph` as a child.\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * Will be fixed to:\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph></paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellParagraphPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => tableCellContentsPostFixer( writer, model ) );\n}\n\n// The table cell contents post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction tableCellContentsPostFixer( writer, model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'table' ) {\n\t\t\twasFixed = fixTable( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableRow' ) {\n\t\t\twasFixed = fixTableRow( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableCell' ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( checkTableCellChange( entry ) ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.parent, writer ) || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cells in a table.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTable( table, writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const row of table.getChildren() ) {\n\t\tif ( row.is( 'element', 'tableRow' ) ) {\n\t\t\twasFixed = fixTableRow( row, writer ) || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cells in a table row.\n//\n// @param {module:engine/model/element~Element} tableRow\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTableRow( tableRow, writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const tableCell of tableRow.getChildren() ) {\n\t\twasFixed = fixTableCellContent( tableCell, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cell content by:\n// - Adding a paragraph to a table cell without any child.\n// - Wrapping direct $text in a `<paragraph>`.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean}\nfunction fixTableCellContent( tableCell, writer ) {\n\t// Insert paragraph to an empty table cell.\n\tif ( tableCell.childCount == 0 ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: insert paragraph in empty cell.' );\n\n\t\twriter.insertElement( 'paragraph', tableCell );\n\n\t\treturn true;\n\t}\n\n\t// Check table cell children for directly placed text nodes.\n\t// Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n\tconst textNodes = Array.from( tableCell.getChildren() ).filter( child => child.is( '$text' ) );\n\n\t// @if CK_DEBUG_TABLE // textNodes.length && console.log( 'Post-fixing table: wrap cell content with paragraph.' );\n\n\tfor ( const child of textNodes ) {\n\t\twriter.wrap( writer.createRangeOn( child ), 'paragraph' );\n\t}\n\n\t// Return true when there were text nodes to fix.\n\treturn !!textNodes.length;\n}\n\n// Checks if a differ change should fix the table cell. This happens on:\n// - Removing content from the table cell (i.e. `tableCell` can be left empty).\n// - Adding a text node directly into a table cell.\n//\n// @param {Object} differ change entry\n// @returns {Boolean}\nfunction checkTableCellChange( entry ) {\n\tif ( !entry.position || !entry.position.parent.is( 'element', 'tableCell' ) ) {\n\t\treturn false;\n\t}\n\n\treturn entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n"]},"metadata":{},"sourceType":"module"}