{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module horizontal-line/horizontallineediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { toWidget } from 'ckeditor5/src/widget';\nimport HorizontalLineCommand from './horizontallinecommand';\nimport '../theme/horizontalline.css';\n/**\n * The horizontal line editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class HorizontalLineEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'HorizontalLineEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const t = editor.t;\n    const conversion = editor.conversion;\n    schema.register('horizontalLine', {\n      isObject: true,\n      allowWhere: '$block'\n    });\n    conversion.for('dataDowncast').elementToElement({\n      model: 'horizontalLine',\n      view: (modelElement, _ref) => {\n        let {\n          writer\n        } = _ref;\n        return writer.createEmptyElement('hr');\n      }\n    });\n    conversion.for('editingDowncast').elementToElement({\n      model: 'horizontalLine',\n      view: (modelElement, _ref2) => {\n        let {\n          writer\n        } = _ref2;\n        const label = t('Horizontal line');\n        const viewWrapper = writer.createContainerElement('div');\n        const viewHrElement = writer.createEmptyElement('hr');\n        writer.addClass('ck-horizontal-line', viewWrapper);\n        writer.setCustomProperty('hr', true, viewWrapper);\n        writer.insert(writer.createPositionAt(viewWrapper, 0), viewHrElement);\n        return toHorizontalLineWidget(viewWrapper, writer, label);\n      }\n    });\n    conversion.for('upcast').elementToElement({\n      view: 'hr',\n      model: 'horizontalLine'\n    });\n    editor.commands.add('horizontalLine', new HorizontalLineCommand(editor));\n  }\n\n} // Converts a given {@link module:engine/view/element~Element} to a horizontal line widget:\n// * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to\n//   recognize the horizontal line widget element.\n// * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n//\n//  @param {module:engine/view/element~Element} viewElement\n//  @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n//  @param {String} label The element's label.\n//  @returns {module:engine/view/element~Element}\n\nfunction toHorizontalLineWidget(viewElement, writer, label) {\n  writer.setCustomProperty('horizontalLine', true, viewElement);\n  return toWidget(viewElement, writer, {\n    label\n  });\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-horizontal-line/src/horizontallineediting.js"],"names":["Plugin","toWidget","HorizontalLineCommand","HorizontalLineEditing","pluginName","init","editor","schema","model","t","conversion","register","isObject","allowWhere","for","elementToElement","view","modelElement","writer","createEmptyElement","label","viewWrapper","createContainerElement","viewHrElement","addClass","setCustomProperty","insert","createPositionAt","toHorizontalLineWidget","commands","add","viewElement"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,OAAO,6BAAP;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,qBAAN,SAAoCH,MAApC,CAA2C;AACzD;AACD;AACA;AACsB,aAAVI,UAAU,GAAG;AACvB,WAAO,uBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,MAAM,GAAGD,MAAM,CAACE,KAAP,CAAaD,MAA5B;AACA,UAAME,CAAC,GAAGH,MAAM,CAACG,CAAjB;AACA,UAAMC,UAAU,GAAGJ,MAAM,CAACI,UAA1B;AAEAH,IAAAA,MAAM,CAACI,QAAP,CAAiB,gBAAjB,EAAmC;AAClCC,MAAAA,QAAQ,EAAE,IADwB;AAElCC,MAAAA,UAAU,EAAE;AAFsB,KAAnC;AAKAH,IAAAA,UAAU,CAACI,GAAX,CAAgB,cAAhB,EAAiCC,gBAAjC,CAAmD;AAClDP,MAAAA,KAAK,EAAE,gBAD2C;AAElDQ,MAAAA,IAAI,EAAE,CAAEC,YAAF,WAAgC;AAAA,YAAhB;AAAEC,UAAAA;AAAF,SAAgB;AACrC,eAAOA,MAAM,CAACC,kBAAP,CAA2B,IAA3B,CAAP;AACA;AAJiD,KAAnD;AAOAT,IAAAA,UAAU,CAACI,GAAX,CAAgB,iBAAhB,EAAoCC,gBAApC,CAAsD;AACrDP,MAAAA,KAAK,EAAE,gBAD8C;AAErDQ,MAAAA,IAAI,EAAE,CAAEC,YAAF,YAAgC;AAAA,YAAhB;AAAEC,UAAAA;AAAF,SAAgB;AACrC,cAAME,KAAK,GAAGX,CAAC,CAAE,iBAAF,CAAf;AACA,cAAMY,WAAW,GAAGH,MAAM,CAACI,sBAAP,CAA+B,KAA/B,CAApB;AACA,cAAMC,aAAa,GAAGL,MAAM,CAACC,kBAAP,CAA2B,IAA3B,CAAtB;AAEAD,QAAAA,MAAM,CAACM,QAAP,CAAiB,oBAAjB,EAAuCH,WAAvC;AACAH,QAAAA,MAAM,CAACO,iBAAP,CAA0B,IAA1B,EAAgC,IAAhC,EAAsCJ,WAAtC;AAEAH,QAAAA,MAAM,CAACQ,MAAP,CAAeR,MAAM,CAACS,gBAAP,CAAyBN,WAAzB,EAAsC,CAAtC,CAAf,EAA0DE,aAA1D;AAEA,eAAOK,sBAAsB,CAAEP,WAAF,EAAeH,MAAf,EAAuBE,KAAvB,CAA7B;AACA;AAboD,KAAtD;AAgBAV,IAAAA,UAAU,CAACI,GAAX,CAAgB,QAAhB,EAA2BC,gBAA3B,CAA6C;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcR,MAAAA,KAAK,EAAE;AAArB,KAA7C;AAEAF,IAAAA,MAAM,CAACuB,QAAP,CAAgBC,GAAhB,CAAqB,gBAArB,EAAuC,IAAI5B,qBAAJ,CAA2BI,MAA3B,CAAvC;AACA;;AAhDwD,C,CAmD1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASsB,sBAAT,CAAiCG,WAAjC,EAA8Cb,MAA9C,EAAsDE,KAAtD,EAA8D;AAC7DF,EAAAA,MAAM,CAACO,iBAAP,CAA0B,gBAA1B,EAA4C,IAA5C,EAAkDM,WAAlD;AAEA,SAAO9B,QAAQ,CAAE8B,WAAF,EAAeb,MAAf,EAAuB;AAAEE,IAAAA;AAAF,GAAvB,CAAf;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module horizontal-line/horizontallineediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { toWidget } from 'ckeditor5/src/widget';\n\nimport HorizontalLineCommand from './horizontallinecommand';\n\nimport '../theme/horizontalline.css';\n\n/**\n * The horizontal line editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HorizontalLineEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'HorizontalLineEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst t = editor.t;\n\t\tconst conversion = editor.conversion;\n\n\t\tschema.register( 'horizontalLine', {\n\t\t\tisObject: true,\n\t\t\tallowWhere: '$block'\n\t\t} );\n\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'horizontalLine',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\treturn writer.createEmptyElement( 'hr' );\n\t\t\t}\n\t\t} );\n\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'horizontalLine',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\tconst label = t( 'Horizontal line' );\n\t\t\t\tconst viewWrapper = writer.createContainerElement( 'div' );\n\t\t\t\tconst viewHrElement = writer.createEmptyElement( 'hr' );\n\n\t\t\t\twriter.addClass( 'ck-horizontal-line', viewWrapper );\n\t\t\t\twriter.setCustomProperty( 'hr', true, viewWrapper );\n\n\t\t\t\twriter.insert( writer.createPositionAt( viewWrapper, 0 ), viewHrElement );\n\n\t\t\t\treturn toHorizontalLineWidget( viewWrapper, writer, label );\n\t\t\t}\n\t\t} );\n\n\t\tconversion.for( 'upcast' ).elementToElement( { view: 'hr', model: 'horizontalLine' } );\n\n\t\teditor.commands.add( 'horizontalLine', new HorizontalLineCommand( editor ) );\n\t}\n}\n\n// Converts a given {@link module:engine/view/element~Element} to a horizontal line widget:\n// * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to\n//   recognize the horizontal line widget element.\n// * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n//\n//  @param {module:engine/view/element~Element} viewElement\n//  @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n//  @param {String} label The element's label.\n//  @returns {module:engine/view/element~Element}\nfunction toHorizontalLineWidget( viewElement, writer, label ) {\n\twriter.setCustomProperty( 'horizontalLine', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { label } );\n}\n"]},"metadata":{},"sourceType":"module"}