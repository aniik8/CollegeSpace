{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquoteediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Enter } from 'ckeditor5/src/enter';\nimport { Delete } from 'ckeditor5/src/typing';\nimport BlockQuoteCommand from './blockquotecommand';\n/**\n * The block quote editing.\n *\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class BlockQuoteEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'BlockQuoteEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [Enter, Delete];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    editor.commands.add('blockQuote', new BlockQuoteCommand(editor));\n    schema.register('blockQuote', {\n      allowWhere: '$block',\n      allowContentOf: '$root'\n    });\n    editor.conversion.elementToElement({\n      model: 'blockQuote',\n      view: 'blockquote'\n    }); // Postfixer which cleans incorrect model states connected with block quotes.\n\n    editor.model.document.registerPostFixer(writer => {\n      const changes = editor.model.document.differ.getChanges();\n\n      for (const entry of changes) {\n        if (entry.type == 'insert') {\n          const element = entry.position.nodeAfter;\n\n          if (!element) {\n            // We are inside a text node.\n            continue;\n          }\n\n          if (element.is('element', 'blockQuote') && element.isEmpty) {\n            // Added an empty blockQuote - remove it.\n            writer.remove(element);\n            return true;\n          } else if (element.is('element', 'blockQuote') && !schema.checkChild(entry.position, element)) {\n            // Added a blockQuote in incorrect place. Unwrap it so the content inside is not lost.\n            writer.unwrap(element);\n            return true;\n          } else if (element.is('element')) {\n            // Just added an element. Check that all children meet the scheme rules.\n            const range = writer.createRangeIn(element);\n\n            for (const child of range.getItems()) {\n              if (child.is('element', 'blockQuote') && !schema.checkChild(writer.createPositionBefore(child), child)) {\n                writer.unwrap(child);\n                return true;\n              }\n            }\n          }\n        } else if (entry.type == 'remove') {\n          const parent = entry.position.parent;\n\n          if (parent.is('element', 'blockQuote') && parent.isEmpty) {\n            // Something got removed and now blockQuote is empty. Remove the blockQuote as well.\n            writer.remove(parent);\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n    const viewDocument = this.editor.editing.view.document;\n    const selection = editor.model.document.selection;\n    const blockQuoteCommand = editor.commands.get('blockQuote'); // Overwrite default Enter key behavior.\n    // If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\n\n    this.listenTo(viewDocument, 'enter', (evt, data) => {\n      if (!selection.isCollapsed || !blockQuoteCommand.value) {\n        return;\n      }\n\n      const positionParent = selection.getLastPosition().parent;\n\n      if (positionParent.isEmpty) {\n        editor.execute('blockQuote');\n        editor.editing.view.scrollToTheSelection();\n        data.preventDefault();\n        evt.stop();\n      }\n    }, {\n      context: 'blockquote'\n    }); // Overwrite default Backspace key behavior.\n    // If Backspace key is pressed with selection collapsed in first empty block inside a quote, break the quote.\n\n    this.listenTo(viewDocument, 'delete', (evt, data) => {\n      if (data.direction != 'backward' || !selection.isCollapsed || !blockQuoteCommand.value) {\n        return;\n      }\n\n      const positionParent = selection.getLastPosition().parent;\n\n      if (positionParent.isEmpty && !positionParent.previousSibling) {\n        editor.execute('blockQuote');\n        editor.editing.view.scrollToTheSelection();\n        data.preventDefault();\n        evt.stop();\n      }\n    }, {\n      context: 'blockquote'\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-block-quote/src/blockquoteediting.js"],"names":["Plugin","Enter","Delete","BlockQuoteCommand","BlockQuoteEditing","pluginName","requires","init","editor","schema","model","commands","add","register","allowWhere","allowContentOf","conversion","elementToElement","view","document","registerPostFixer","writer","changes","differ","getChanges","entry","type","element","position","nodeAfter","is","isEmpty","remove","checkChild","unwrap","range","createRangeIn","child","getItems","createPositionBefore","parent","viewDocument","editing","selection","blockQuoteCommand","get","listenTo","evt","data","isCollapsed","value","positionParent","getLastPosition","execute","scrollToTheSelection","preventDefault","stop","context","direction","previousSibling"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquoteediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Enter } from 'ckeditor5/src/enter';\nimport { Delete } from 'ckeditor5/src/typing';\n\nimport BlockQuoteCommand from './blockquotecommand';\n\n/**\n * The block quote editing.\n *\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockQuoteEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Enter, Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\n\t\teditor.commands.add( 'blockQuote', new BlockQuoteCommand( editor ) );\n\n\t\tschema.register( 'blockQuote', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowContentOf: '$root'\n\t\t} );\n\n\t\teditor.conversion.elementToElement( { model: 'blockQuote', view: 'blockquote' } );\n\n\t\t// Postfixer which cleans incorrect model states connected with block quotes.\n\t\teditor.model.document.registerPostFixer( writer => {\n\t\t\tconst changes = editor.model.document.differ.getChanges();\n\n\t\t\tfor ( const entry of changes ) {\n\t\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\t\tconst element = entry.position.nodeAfter;\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\t// We are inside a text node.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( element.is( 'element', 'blockQuote' ) && element.isEmpty ) {\n\t\t\t\t\t\t// Added an empty blockQuote - remove it.\n\t\t\t\t\t\twriter.remove( element );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if ( element.is( 'element', 'blockQuote' ) && !schema.checkChild( entry.position, element ) ) {\n\t\t\t\t\t\t// Added a blockQuote in incorrect place. Unwrap it so the content inside is not lost.\n\t\t\t\t\t\twriter.unwrap( element );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if ( element.is( 'element' ) ) {\n\t\t\t\t\t\t// Just added an element. Check that all children meet the scheme rules.\n\t\t\t\t\t\tconst range = writer.createRangeIn( element );\n\n\t\t\t\t\t\tfor ( const child of range.getItems() ) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tchild.is( 'element', 'blockQuote' ) &&\n\t\t\t\t\t\t\t\t!schema.checkChild( writer.createPositionBefore( child ), child )\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\twriter.unwrap( child );\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\t\tconst parent = entry.position.parent;\n\n\t\t\t\t\tif ( parent.is( 'element', 'blockQuote' ) && parent.isEmpty ) {\n\t\t\t\t\t\t// Something got removed and now blockQuote is empty. Remove the blockQuote as well.\n\t\t\t\t\t\twriter.remove( parent );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} );\n\n\t\tconst viewDocument = this.editor.editing.view.document;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst blockQuoteCommand = editor.commands.get( 'blockQuote' );\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tif ( !selection.isCollapsed || !blockQuoteCommand.value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = selection.getLastPosition().parent;\n\n\t\t\tif ( positionParent.isEmpty ) {\n\t\t\t\teditor.execute( 'blockQuote' );\n\t\t\t\teditor.editing.view.scrollToTheSelection();\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'blockquote' } );\n\n\t\t// Overwrite default Backspace key behavior.\n\t\t// If Backspace key is pressed with selection collapsed in first empty block inside a quote, break the quote.\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tif ( data.direction != 'backward' || !selection.isCollapsed || !blockQuoteCommand.value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = selection.getLastPosition().parent;\n\n\t\t\tif ( positionParent.isEmpty && !positionParent.previousSibling ) {\n\t\t\t\teditor.execute( 'blockQuote' );\n\t\t\t\teditor.editing.view.scrollToTheSelection();\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'blockquote' } );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}