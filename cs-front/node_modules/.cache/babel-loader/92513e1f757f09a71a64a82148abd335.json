{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global window */\n\n/**\n * @module ckfinder/ckfindercommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { CKEditorError } from 'ckeditor5/src/utils';\n/**\n * The CKFinder command. It is used by the {@link module:ckfinder/ckfinderediting~CKFinderEditing CKFinder editing feature}\n * to open the CKFinder file manager to insert an image or a link to a file into the editor content.\n *\n *\t\teditor.execute( 'ckfinder' );\n *\n * **Note:** This command uses other features to perform tasks:\n * - To insert images the {@link module:image/image/insertimagecommand~InsertImageCommand 'insertImage'} command\n * from the {@link module:image/image~Image Image feature}.\n * - To insert links to files the {@link module:link/linkcommand~LinkCommand 'link'} command\n * from the {@link module:link/link~Link Link feature}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class CKFinderCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor); // Remove default document listener to lower its priority.\n\n    this.stopListening(this.editor.model.document, 'change'); // Lower this command listener priority to be sure that refresh() will be called after link & image refresh.\n\n    this.listenTo(this.editor.model.document, 'change', () => this.refresh(), {\n      priority: 'low'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const imageCommand = this.editor.commands.get('insertImage');\n    const linkCommand = this.editor.commands.get('link'); // The CKFinder command is enabled when one of image or link command is enabled.\n\n    this.isEnabled = imageCommand.isEnabled || linkCommand.isEnabled;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const editor = this.editor;\n    const openerMethod = this.editor.config.get('ckfinder.openerMethod') || 'modal';\n\n    if (openerMethod != 'popup' && openerMethod != 'modal') {\n      /**\n       * The `ckfinder.openerMethod` must be one of: \"popup\" or \"modal\".\n       *\n       * @error ckfinder-unknown-openermethod\n       */\n      throw new CKEditorError('ckfinder-unknown-openermethod', editor);\n    }\n\n    const options = this.editor.config.get('ckfinder.options') || {};\n    options.chooseFiles = true; // Cache the user-defined onInit method\n\n    const originalOnInit = options.onInit; // Pass the lang code to the CKFinder if not defined by user.\n\n    if (!options.language) {\n      options.language = editor.locale.uiLanguage;\n    } // The onInit method allows to extend CKFinder's behavior. It is used to attach event listeners to file choosing related events.\n\n\n    options.onInit = finder => {\n      // Call original options.onInit if it was defined by user.\n      if (originalOnInit) {\n        originalOnInit(finder);\n      }\n\n      finder.on('files:choose', evt => {\n        const files = evt.data.files.toArray(); // Insert links\n\n        const links = files.filter(file => !file.isImage());\n        const images = files.filter(file => file.isImage());\n\n        for (const linkFile of links) {\n          editor.execute('link', linkFile.getUrl());\n        }\n\n        const imagesUrls = [];\n\n        for (const image of images) {\n          const url = image.getUrl();\n          imagesUrls.push(url ? url : finder.request('file:getProxyUrl', {\n            file: image\n          }));\n        }\n\n        if (imagesUrls.length) {\n          insertImages(editor, imagesUrls);\n        }\n      });\n      finder.on('file:choose:resizedImage', evt => {\n        const resizedUrl = evt.data.resizedUrl;\n\n        if (!resizedUrl) {\n          const notification = editor.plugins.get('Notification');\n          const t = editor.locale.t;\n          notification.showWarning(t('Could not obtain resized image URL.'), {\n            title: t('Selecting resized image failed'),\n            namespace: 'ckfinder'\n          });\n          return;\n        }\n\n        insertImages(editor, [resizedUrl]);\n      });\n    };\n\n    window.CKFinder[openerMethod](options);\n  }\n\n}\n\nfunction insertImages(editor, urls) {\n  const imageCommand = editor.commands.get('insertImage'); // Check if inserting an image is actually possible - it might be possible to only insert a link.\n\n  if (!imageCommand.isEnabled) {\n    const notification = editor.plugins.get('Notification');\n    const t = editor.locale.t;\n    notification.showWarning(t('Could not insert image at the current position.'), {\n      title: t('Inserting image failed'),\n      namespace: 'ckfinder'\n    });\n    return;\n  }\n\n  editor.execute('insertImage', {\n    source: urls\n  });\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfindercommand.js"],"names":["Command","CKEditorError","CKFinderCommand","constructor","editor","stopListening","model","document","listenTo","refresh","priority","imageCommand","commands","get","linkCommand","isEnabled","execute","openerMethod","config","options","chooseFiles","originalOnInit","onInit","language","locale","uiLanguage","finder","on","evt","files","data","toArray","links","filter","file","isImage","images","linkFile","getUrl","imagesUrls","image","url","push","request","length","insertImages","resizedUrl","notification","plugins","t","showWarning","title","namespace","window","CKFinder","urls","source"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global window */\n\n/**\n * @module ckfinder/ckfindercommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { CKEditorError } from 'ckeditor5/src/utils';\n\n/**\n * The CKFinder command. It is used by the {@link module:ckfinder/ckfinderediting~CKFinderEditing CKFinder editing feature}\n * to open the CKFinder file manager to insert an image or a link to a file into the editor content.\n *\n *\t\teditor.execute( 'ckfinder' );\n *\n * **Note:** This command uses other features to perform tasks:\n * - To insert images the {@link module:image/image/insertimagecommand~InsertImageCommand 'insertImage'} command\n * from the {@link module:image/image~Image Image feature}.\n * - To insert links to files the {@link module:link/linkcommand~LinkCommand 'link'} command\n * from the {@link module:link/link~Link Link feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class CKFinderCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t// Remove default document listener to lower its priority.\n\t\tthis.stopListening( this.editor.model.document, 'change' );\n\n\t\t// Lower this command listener priority to be sure that refresh() will be called after link & image refresh.\n\t\tthis.listenTo( this.editor.model.document, 'change', () => this.refresh(), { priority: 'low' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst imageCommand = this.editor.commands.get( 'insertImage' );\n\t\tconst linkCommand = this.editor.commands.get( 'link' );\n\n\t\t// The CKFinder command is enabled when one of image or link command is enabled.\n\t\tthis.isEnabled = imageCommand.isEnabled || linkCommand.isEnabled;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\n\t\tconst openerMethod = this.editor.config.get( 'ckfinder.openerMethod' ) || 'modal';\n\n\t\tif ( openerMethod != 'popup' && openerMethod != 'modal' ) {\n\t\t\t/**\n\t\t\t * The `ckfinder.openerMethod` must be one of: \"popup\" or \"modal\".\n\t\t\t *\n\t\t\t * @error ckfinder-unknown-openermethod\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'ckfinder-unknown-openermethod', editor );\n\t\t}\n\n\t\tconst options = this.editor.config.get( 'ckfinder.options' ) || {};\n\n\t\toptions.chooseFiles = true;\n\n\t\t// Cache the user-defined onInit method\n\t\tconst originalOnInit = options.onInit;\n\n\t\t// Pass the lang code to the CKFinder if not defined by user.\n\t\tif ( !options.language ) {\n\t\t\toptions.language = editor.locale.uiLanguage;\n\t\t}\n\n\t\t// The onInit method allows to extend CKFinder's behavior. It is used to attach event listeners to file choosing related events.\n\t\toptions.onInit = finder => {\n\t\t\t// Call original options.onInit if it was defined by user.\n\t\t\tif ( originalOnInit ) {\n\t\t\t\toriginalOnInit( finder );\n\t\t\t}\n\n\t\t\tfinder.on( 'files:choose', evt => {\n\t\t\t\tconst files = evt.data.files.toArray();\n\n\t\t\t\t// Insert links\n\t\t\t\tconst links = files.filter( file => !file.isImage() );\n\t\t\t\tconst images = files.filter( file => file.isImage() );\n\n\t\t\t\tfor ( const linkFile of links ) {\n\t\t\t\t\teditor.execute( 'link', linkFile.getUrl() );\n\t\t\t\t}\n\n\t\t\t\tconst imagesUrls = [];\n\n\t\t\t\tfor ( const image of images ) {\n\t\t\t\t\tconst url = image.getUrl();\n\n\t\t\t\t\timagesUrls.push( url ? url : finder.request( 'file:getProxyUrl', { file: image } ) );\n\t\t\t\t}\n\n\t\t\t\tif ( imagesUrls.length ) {\n\t\t\t\t\tinsertImages( editor, imagesUrls );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tfinder.on( 'file:choose:resizedImage', evt => {\n\t\t\t\tconst resizedUrl = evt.data.resizedUrl;\n\n\t\t\t\tif ( !resizedUrl ) {\n\t\t\t\t\tconst notification = editor.plugins.get( 'Notification' );\n\t\t\t\t\tconst t = editor.locale.t;\n\n\t\t\t\t\tnotification.showWarning( t( 'Could not obtain resized image URL.' ), {\n\t\t\t\t\t\ttitle: t( 'Selecting resized image failed' ),\n\t\t\t\t\t\tnamespace: 'ckfinder'\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tinsertImages( editor, [ resizedUrl ] );\n\t\t\t} );\n\t\t};\n\n\t\twindow.CKFinder[ openerMethod ]( options );\n\t}\n}\n\nfunction insertImages( editor, urls ) {\n\tconst imageCommand = editor.commands.get( 'insertImage' );\n\n\t// Check if inserting an image is actually possible - it might be possible to only insert a link.\n\tif ( !imageCommand.isEnabled ) {\n\t\tconst notification = editor.plugins.get( 'Notification' );\n\t\tconst t = editor.locale.t;\n\n\t\tnotification.showWarning( t( 'Could not insert image at the current position.' ), {\n\t\t\ttitle: t( 'Inserting image failed' ),\n\t\t\tnamespace: 'ckfinder'\n\t\t} );\n\n\t\treturn;\n\t}\n\n\teditor.execute( 'insertImage', { source: urls } );\n}\n"]},"metadata":{},"sourceType":"module"}