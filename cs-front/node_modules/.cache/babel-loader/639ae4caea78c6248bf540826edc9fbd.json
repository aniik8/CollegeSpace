{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableproperties/tablepropertiesediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addBackgroundRules, addBorderRules } from 'ckeditor5/src/engine';\nimport TableEditing from '../tableediting';\nimport { downcastAttributeToStyle, downcastTableAttribute, upcastBorderStyles, upcastStyleToAttribute } from '../converters/tableproperties';\nimport TableBackgroundColorCommand from './commands/tablebackgroundcolorcommand';\nimport TableBorderColorCommand from './commands/tablebordercolorcommand';\nimport TableBorderStyleCommand from './commands/tableborderstylecommand';\nimport TableBorderWidthCommand from './commands/tableborderwidthcommand';\nimport TableWidthCommand from './commands/tablewidthcommand';\nimport TableHeightCommand from './commands/tableheightcommand';\nimport TableAlignmentCommand from './commands/tablealignmentcommand';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right)$/;\nconst FLOAT_VALUES_REG_EXP = /^(left|none|right)$/;\n/**\n * The table properties editing feature.\n *\n * Introduces table's model attributes and their conversion:\n *\n * - border: `tableBorderStyle`, `tableBorderColor` and `tableBorderWidth`\n * - background color: `tableBackgroundColor`\n * - horizontal alignment: `tableAlignment`\n * - width & height: `tableWidth` & `tableHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: `'tableBorderStyle'`, `'tableBorderColor'` and `'tableBorderWidth'` commands\n * - background color: `'tableBackgroundColor'`\n * - horizontal alignment: `'tableAlignment'`\n * - width & height: `'tableWidth'` & `'tableHeight'`\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TablePropertiesEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TablePropertiesEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [TableEditing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const conversion = editor.conversion;\n    editor.config.define('table.tableProperties.defaultProperties', {});\n    const defaultTableProperties = getNormalizedDefaultProperties(editor.config.get('table.tableProperties.defaultProperties'), {\n      includeAlignmentProperty: true\n    });\n    editor.data.addStyleProcessorRules(addBorderRules);\n    enableBorderProperties(schema, conversion, {\n      color: defaultTableProperties.borderColor,\n      style: defaultTableProperties.borderStyle,\n      width: defaultTableProperties.borderWidth\n    });\n    editor.commands.add('tableBorderColor', new TableBorderColorCommand(editor, defaultTableProperties.borderColor));\n    editor.commands.add('tableBorderStyle', new TableBorderStyleCommand(editor, defaultTableProperties.borderStyle));\n    editor.commands.add('tableBorderWidth', new TableBorderWidthCommand(editor, defaultTableProperties.borderWidth));\n    enableAlignmentProperty(schema, conversion, defaultTableProperties.alignment);\n    editor.commands.add('tableAlignment', new TableAlignmentCommand(editor, defaultTableProperties.alignment));\n    enableTableToFigureProperty(schema, conversion, {\n      modelAttribute: 'tableWidth',\n      styleName: 'width',\n      defaultValue: defaultTableProperties.width\n    });\n    editor.commands.add('tableWidth', new TableWidthCommand(editor, defaultTableProperties.width));\n    enableTableToFigureProperty(schema, conversion, {\n      modelAttribute: 'tableHeight',\n      styleName: 'height',\n      defaultValue: defaultTableProperties.height\n    });\n    editor.commands.add('tableHeight', new TableHeightCommand(editor, defaultTableProperties.height));\n    editor.data.addStyleProcessorRules(addBackgroundRules);\n    enableProperty(schema, conversion, {\n      modelAttribute: 'tableBackgroundColor',\n      styleName: 'background-color',\n      defaultValue: defaultTableProperties.backgroundColor\n    });\n    editor.commands.add('tableBackgroundColor', new TableBackgroundColorCommand(editor, defaultTableProperties.backgroundColor));\n  }\n\n} // Enables `tableBorderStyle'`, `tableBorderColor'` and `tableBorderWidth'` attributes for table.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} defaultBorder The default border values.\n// @param {String} defaultBorder.color The default `tableBorderColor` value.\n// @param {String} defaultBorder.style The default `tableBorderStyle` value.\n// @param {String} defaultBorder.width The default `tableBorderWidth` value.\n\nfunction enableBorderProperties(schema, conversion, defaultBorder) {\n  const modelAttributes = {\n    width: 'tableBorderWidth',\n    color: 'tableBorderColor',\n    style: 'tableBorderStyle'\n  };\n  schema.extend('table', {\n    allowAttributes: Object.values(modelAttributes)\n  });\n  upcastBorderStyles(conversion, 'table', modelAttributes, defaultBorder);\n  downcastTableAttribute(conversion, {\n    modelAttribute: modelAttributes.color,\n    styleName: 'border-color'\n  });\n  downcastTableAttribute(conversion, {\n    modelAttribute: modelAttributes.style,\n    styleName: 'border-style'\n  });\n  downcastTableAttribute(conversion, {\n    modelAttribute: modelAttributes.width,\n    styleName: 'border-width'\n  });\n} // Enables the `'alignment'` attribute for table.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {String} defaultValue The default alignment value.\n\n\nfunction enableAlignmentProperty(schema, conversion, defaultValue) {\n  schema.extend('table', {\n    allowAttributes: ['tableAlignment']\n  });\n  conversion.for('downcast').attributeToAttribute({\n    model: {\n      name: 'table',\n      key: 'tableAlignment'\n    },\n    view: alignment => ({\n      key: 'style',\n      value: {\n        // Model: `alignment:center` => CSS: `float:none`.\n        float: alignment === 'center' ? 'none' : alignment\n      }\n    }),\n    converterPriority: 'high'\n  });\n  conversion.for('upcast') // Support for the `float:*;` CSS definition for the table alignment.\n  .attributeToAttribute({\n    view: {\n      name: /^(table|figure)$/,\n      styles: {\n        float: FLOAT_VALUES_REG_EXP\n      }\n    },\n    model: {\n      key: 'tableAlignment',\n      value: viewElement => {\n        let align = viewElement.getStyle('float'); // CSS: `float:none` => Model: `alignment:center`.\n\n        if (align === 'none') {\n          align = 'center';\n        }\n\n        return align === defaultValue ? null : align;\n      }\n    }\n  }) // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n  .attributeToAttribute({\n    view: {\n      attributes: {\n        align: ALIGN_VALUES_REG_EXP\n      }\n    },\n    model: {\n      name: 'table',\n      key: 'tableAlignment',\n      value: viewElement => {\n        const align = viewElement.getAttribute('align');\n        return align === defaultValue ? null : align;\n      }\n    }\n  });\n} // Enables conversion for an attribute for simple view-model mappings.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} options\n// @param {String} options.modelAttribute\n// @param {String} options.styleName\n// @param {String} options.defaultValue The default value for the specified `modelAttribute`.\n\n\nfunction enableProperty(schema, conversion, options) {\n  const {\n    modelAttribute\n  } = options;\n  schema.extend('table', {\n    allowAttributes: [modelAttribute]\n  });\n  upcastStyleToAttribute(conversion, {\n    viewElement: 'table',\n    ...options\n  });\n  downcastTableAttribute(conversion, options);\n} // Enables conversion for an attribute for simple view (figure) to model (table) mappings.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} options\n// @param {String} options.modelAttribute\n// @param {String} options.styleName\n\n\nfunction enableTableToFigureProperty(schema, conversion, options) {\n  const {\n    modelAttribute\n  } = options;\n  schema.extend('table', {\n    allowAttributes: [modelAttribute]\n  });\n  upcastStyleToAttribute(conversion, {\n    viewElement: /^(table|figure)$/,\n    ...options\n  });\n  downcastAttributeToStyle(conversion, {\n    modelElement: 'table',\n    ...options\n  });\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesediting.js"],"names":["Plugin","addBackgroundRules","addBorderRules","TableEditing","downcastAttributeToStyle","downcastTableAttribute","upcastBorderStyles","upcastStyleToAttribute","TableBackgroundColorCommand","TableBorderColorCommand","TableBorderStyleCommand","TableBorderWidthCommand","TableWidthCommand","TableHeightCommand","TableAlignmentCommand","getNormalizedDefaultProperties","ALIGN_VALUES_REG_EXP","FLOAT_VALUES_REG_EXP","TablePropertiesEditing","pluginName","requires","init","editor","schema","model","conversion","config","define","defaultTableProperties","get","includeAlignmentProperty","data","addStyleProcessorRules","enableBorderProperties","color","borderColor","style","borderStyle","width","borderWidth","commands","add","enableAlignmentProperty","alignment","enableTableToFigureProperty","modelAttribute","styleName","defaultValue","height","enableProperty","backgroundColor","defaultBorder","modelAttributes","extend","allowAttributes","Object","values","for","attributeToAttribute","name","key","view","value","float","converterPriority","styles","viewElement","align","getStyle","attributes","getAttribute","options","modelElement"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableproperties/tablepropertiesediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addBackgroundRules, addBorderRules } from 'ckeditor5/src/engine';\n\nimport TableEditing from '../tableediting';\nimport {\n\tdowncastAttributeToStyle,\n\tdowncastTableAttribute,\n\tupcastBorderStyles,\n\tupcastStyleToAttribute\n} from '../converters/tableproperties';\nimport TableBackgroundColorCommand from './commands/tablebackgroundcolorcommand';\nimport TableBorderColorCommand from './commands/tablebordercolorcommand';\nimport TableBorderStyleCommand from './commands/tableborderstylecommand';\nimport TableBorderWidthCommand from './commands/tableborderwidthcommand';\nimport TableWidthCommand from './commands/tablewidthcommand';\nimport TableHeightCommand from './commands/tableheightcommand';\nimport TableAlignmentCommand from './commands/tablealignmentcommand';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\n\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right)$/;\nconst FLOAT_VALUES_REG_EXP = /^(left|none|right)$/;\n\n/**\n * The table properties editing feature.\n *\n * Introduces table's model attributes and their conversion:\n *\n * - border: `tableBorderStyle`, `tableBorderColor` and `tableBorderWidth`\n * - background color: `tableBackgroundColor`\n * - horizontal alignment: `tableAlignment`\n * - width & height: `tableWidth` & `tableHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: `'tableBorderStyle'`, `'tableBorderColor'` and `'tableBorderWidth'` commands\n * - background color: `'tableBackgroundColor'`\n * - horizontal alignment: `'tableAlignment'`\n * - width & height: `'tableWidth'` & `'tableHeight'`\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TablePropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TablePropertiesEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\teditor.config.define( 'table.tableProperties.defaultProperties', {} );\n\n\t\tconst defaultTableProperties = getNormalizedDefaultProperties( editor.config.get( 'table.tableProperties.defaultProperties' ), {\n\t\t\tincludeAlignmentProperty: true\n\t\t} );\n\n\t\teditor.data.addStyleProcessorRules( addBorderRules );\n\t\tenableBorderProperties( schema, conversion, {\n\t\t\tcolor: defaultTableProperties.borderColor,\n\t\t\tstyle: defaultTableProperties.borderStyle,\n\t\t\twidth: defaultTableProperties.borderWidth\n\t\t} );\n\t\teditor.commands.add( 'tableBorderColor', new TableBorderColorCommand( editor, defaultTableProperties.borderColor ) );\n\t\teditor.commands.add( 'tableBorderStyle', new TableBorderStyleCommand( editor, defaultTableProperties.borderStyle ) );\n\t\teditor.commands.add( 'tableBorderWidth', new TableBorderWidthCommand( editor, defaultTableProperties.borderWidth ) );\n\n\t\tenableAlignmentProperty( schema, conversion, defaultTableProperties.alignment );\n\t\teditor.commands.add( 'tableAlignment', new TableAlignmentCommand( editor, defaultTableProperties.alignment ) );\n\n\t\tenableTableToFigureProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableWidth',\n\t\t\tstyleName: 'width',\n\t\t\tdefaultValue: defaultTableProperties.width\n\t\t} );\n\t\teditor.commands.add( 'tableWidth', new TableWidthCommand( editor, defaultTableProperties.width ) );\n\n\t\tenableTableToFigureProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableHeight',\n\t\t\tstyleName: 'height',\n\t\t\tdefaultValue: defaultTableProperties.height\n\t\t} );\n\t\teditor.commands.add( 'tableHeight', new TableHeightCommand( editor, defaultTableProperties.height ) );\n\n\t\teditor.data.addStyleProcessorRules( addBackgroundRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableBackgroundColor',\n\t\t\tstyleName: 'background-color',\n\t\t\tdefaultValue: defaultTableProperties.backgroundColor\n\t\t} );\n\t\teditor.commands.add(\n\t\t\t'tableBackgroundColor',\n\t\t\tnew TableBackgroundColorCommand( editor, defaultTableProperties.backgroundColor )\n\t\t);\n\t}\n}\n\n// Enables `tableBorderStyle'`, `tableBorderColor'` and `tableBorderWidth'` attributes for table.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} defaultBorder The default border values.\n// @param {String} defaultBorder.color The default `tableBorderColor` value.\n// @param {String} defaultBorder.style The default `tableBorderStyle` value.\n// @param {String} defaultBorder.width The default `tableBorderWidth` value.\nfunction enableBorderProperties( schema, conversion, defaultBorder ) {\n\tconst modelAttributes = {\n\t\twidth: 'tableBorderWidth',\n\t\tcolor: 'tableBorderColor',\n\t\tstyle: 'tableBorderStyle'\n\t};\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: Object.values( modelAttributes )\n\t} );\n\n\tupcastBorderStyles( conversion, 'table', modelAttributes, defaultBorder );\n\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.color, styleName: 'border-color' } );\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.style, styleName: 'border-style' } );\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.width, styleName: 'border-width' } );\n}\n\n// Enables the `'alignment'` attribute for table.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {String} defaultValue The default alignment value.\nfunction enableAlignmentProperty( schema, conversion, defaultValue ) {\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ 'tableAlignment' ]\n\t} );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tkey: 'tableAlignment'\n\t\t\t},\n\t\t\tview: alignment => ( {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t// Model: `alignment:center` => CSS: `float:none`.\n\t\t\t\t\tfloat: alignment === 'center' ? 'none' : alignment\n\t\t\t\t}\n\t\t\t} ),\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `float:*;` CSS definition for the table alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(table|figure)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\tfloat: FLOAT_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableAlignment',\n\t\t\t\tvalue: viewElement => {\n\t\t\t\t\tlet align = viewElement.getStyle( 'float' );\n\n\t\t\t\t\t// CSS: `float:none` => Model: `alignment:center`.\n\t\t\t\t\tif ( align === 'none' ) {\n\t\t\t\t\t\talign = 'center';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tattributes: {\n\t\t\t\t\talign: ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tkey: 'tableAlignment',\n\t\t\t\tvalue: viewElement => {\n\t\t\t\t\tconst align = viewElement.getAttribute( 'align' );\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n\n// Enables conversion for an attribute for simple view-model mappings.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} options\n// @param {String} options.modelAttribute\n// @param {String} options.styleName\n// @param {String} options.defaultValue The default value for the specified `modelAttribute`.\nfunction enableProperty( schema, conversion, options ) {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\tupcastStyleToAttribute( conversion, { viewElement: 'table', ...options } );\n\tdowncastTableAttribute( conversion, options );\n}\n\n// Enables conversion for an attribute for simple view (figure) to model (table) mappings.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/conversion/conversion~Conversion} conversion\n// @param {Object} options\n// @param {String} options.modelAttribute\n// @param {String} options.styleName\nfunction enableTableToFigureProperty( schema, conversion, options ) {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\tupcastStyleToAttribute( conversion, { viewElement: /^(table|figure)$/, ...options } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'table', ...options } );\n}\n"]},"metadata":{},"sourceType":"module"}