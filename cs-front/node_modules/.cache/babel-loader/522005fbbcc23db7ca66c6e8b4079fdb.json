{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableproperties/ui/tablepropertiesview\n */\nimport { ButtonView, FocusCycler, FormHeaderView, LabelView, LabeledFieldView, ToolbarView, View, ViewCollection, addListToDropdown, createLabeledDropdown, createLabeledInputText, submitHandler } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\nimport { fillToolbar, getBorderStyleDefinitions, getBorderStyleLabels, getLabeledColorInputCreator } from '../../utils/ui/table-properties';\nimport FormRowView from '../../ui/formrowview';\nimport '../../../theme/form.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tableproperties.css';\nconst ALIGNMENT_ICONS = {\n  left: icons.objectLeft,\n  center: icons.objectCenter,\n  right: icons.objectRight\n};\n/**\n * The class representing a table properties form, allowing users to customize\n * certain style aspects of a table, for instance, border, background color, alignment, etc..\n *\n * @extends module:ui/view~View\n */\n\nexport default class TablePropertiesView extends View {\n  /**\n   * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n   * @param {Object} options Additional configuration of the view.\n   * @param {module:table/table~TableColorConfig} options.borderColors A configuration of the border\n   * color palette used by the\n   * {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView#borderColorInput}.\n   * @param {module:table/table~TableColorConfig} options.backgroundColors A configuration of the background\n   * color palette used by the\n   * {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView#backgroundInput}.\n   * @param {module:table/tableproperties~TablePropertiesOptions} options.defaultTableProperties The default table properties.\n   */\n  constructor(locale, options) {\n    super(locale);\n    this.set({\n      /**\n       * The value of the border style.\n       *\n       * @observable\n       * @default ''\n       * @member #borderStyle\n       */\n      borderStyle: '',\n\n      /**\n       * The value of the border width style.\n       *\n       * @observable\n       * @default ''\n       * @member #borderWidth\n       */\n      borderWidth: '',\n\n      /**\n       * The value of the border color style.\n       *\n       * @observable\n       * @default ''\n       * @member #borderColor\n       */\n      borderColor: '',\n\n      /**\n       * The value of the background color style.\n       *\n       * @observable\n       * @default ''\n       * @member #backgroundColor\n       */\n      backgroundColor: '',\n\n      /**\n       * The value of the table width style.\n       *\n       * @observable\n       * @default ''\n       * @member #width\n       */\n      width: '',\n\n      /**\n       * The value of the table height style.\n       *\n       * @observable\n       * @default ''\n       * @member #height\n       */\n      height: '',\n\n      /**\n       * The value of the table alignment style.\n       *\n       * @observable\n       * @default ''\n       * @member #alignment\n       */\n      alignment: ''\n    });\n    /**\n     * Options passed to the view. See {@link #constructor} to learn more.\n     *\n     * @protected\n     * @member {Object}\n     */\n\n    this.options = options;\n\n    const {\n      borderStyleDropdown,\n      borderWidthInput,\n      borderColorInput,\n      borderRowLabel\n    } = this._createBorderFields();\n\n    const {\n      backgroundRowLabel,\n      backgroundInput\n    } = this._createBackgroundFields();\n\n    const {\n      widthInput,\n      operatorLabel,\n      heightInput,\n      dimensionsLabel\n    } = this._createDimensionFields();\n\n    const {\n      alignmentToolbar,\n      alignmentLabel\n    } = this._createAlignmentFields();\n    /**\n     * Tracks information about the DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * A collection of child views in the form.\n     *\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    /**\n     * A dropdown that allows selecting the style of the table border.\n     *\n     * @readonly\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n    this.borderStyleDropdown = borderStyleDropdown;\n    /**\n     * An input that allows specifying the width of the table border.\n     *\n     * @readonly\n     * @member {module:ui/inputtext/inputtextview~InputTextView}\n     */\n\n    this.borderWidthInput = borderWidthInput;\n    /**\n     * An input that allows specifying the color of the table border.\n     *\n     * @readonly\n     * @member {module:table/ui/colorinputview~ColorInputView}\n     */\n\n    this.borderColorInput = borderColorInput;\n    /**\n     * An input that allows specifying the table background color.\n     *\n     * @readonly\n     * @member {module:table/ui/colorinputview~ColorInputView}\n     */\n\n    this.backgroundInput = backgroundInput;\n    /**\n     * An input that allows specifying the table width.\n     *\n     * @readonly\n     * @member {module:ui/inputtext/inputtextview~InputTextView}\n     */\n\n    this.widthInput = widthInput;\n    /**\n     * An input that allows specifying the table height.\n     *\n     * @readonly\n     * @member {module:ui/inputtext/inputtextview~InputTextView}\n     */\n\n    this.heightInput = heightInput;\n    /**\n     * A toolbar with buttons that allow changing the alignment of an entire table.\n     * @readonly\n     * @member {module:ui/toolbar/toolbar~ToolbarView}\n     */\n\n    this.alignmentToolbar = alignmentToolbar; // Defer creating to make sure other fields are present and the Save button can\n    // bind its #isEnabled to their error messages so there's no way to save unless all\n    // fields are valid.\n\n    const {\n      saveButtonView,\n      cancelButtonView\n    } = this._createActionButtons();\n    /**\n     * The \"Save\" button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n\n    this.saveButtonView = saveButtonView;\n    /**\n     * The \"Cancel\" button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.cancelButtonView = cancelButtonView;\n    /**\n     * A collection of views that can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the Shift + Tab keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the Tab key.\n        focusNext: 'tab'\n      }\n    }); // Form header.\n\n    this.children.add(new FormHeaderView(locale, {\n      label: this.t('Table properties')\n    })); // Border row.\n\n    this.children.add(new FormRowView(locale, {\n      labelView: borderRowLabel,\n      children: [borderRowLabel, borderStyleDropdown, borderColorInput, borderWidthInput],\n      class: 'ck-table-form__border-row'\n    })); // Background row.\n\n    this.children.add(new FormRowView(locale, {\n      labelView: backgroundRowLabel,\n      children: [backgroundRowLabel, backgroundInput],\n      class: 'ck-table-form__background-row'\n    }));\n    this.children.add(new FormRowView(locale, {\n      children: [// Dimensions row.\n      new FormRowView(locale, {\n        labelView: dimensionsLabel,\n        children: [dimensionsLabel, widthInput, operatorLabel, heightInput],\n        class: 'ck-table-form__dimensions-row'\n      }), // Alignment row.\n      new FormRowView(locale, {\n        labelView: alignmentLabel,\n        children: [alignmentLabel, alignmentToolbar],\n        class: 'ck-table-properties-form__alignment-row'\n      })]\n    })); // Action row.\n\n    this.children.add(new FormRowView(locale, {\n      children: [this.saveButtonView, this.cancelButtonView],\n      class: 'ck-table-form__action-row'\n    }));\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-form', 'ck-table-form', 'ck-table-properties-form'],\n        // https://github.com/ckeditor/ckeditor5-link/issues/90\n        tabindex: '-1'\n      },\n      children: this.children\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n    // which is of the \"submit\" DOM \"type\".\n\n    submitHandler({\n      view: this\n    });\n    [this.borderStyleDropdown, this.borderColorInput, this.borderWidthInput, this.backgroundInput, this.widthInput, this.heightInput, this.alignmentToolbar, this.saveButtonView, this.cancelButtonView].forEach(view => {\n      // Register the view as focusable.\n      this._focusables.add(view); // Register the view in the focus tracker.\n\n\n      this.focusTracker.add(view.element);\n    }); // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n\n    this.keystrokes.listenTo(this.element);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n  /**\n   * Focuses the fist focusable field in the form.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #borderStyleDropdown},\n   * * {@link #borderWidthInput},\n   * * {@link #borderColorInput}.\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createBorderFields() {\n    const defaultTableProperties = this.options.defaultTableProperties;\n    const defaultBorder = {\n      style: defaultTableProperties.borderStyle,\n      width: defaultTableProperties.borderWidth,\n      color: defaultTableProperties.borderColor\n    };\n    const colorInputCreator = getLabeledColorInputCreator({\n      colorConfig: this.options.borderColors,\n      columns: 5,\n      defaultColorValue: defaultBorder.color\n    });\n    const locale = this.locale;\n    const t = this.t; // -- Group label ---------------------------------------------\n\n    const borderRowLabel = new LabelView(locale);\n    borderRowLabel.text = t('Border'); // -- Style ---------------------------------------------------\n\n    const styleLabels = getBorderStyleLabels(this.t);\n    const borderStyleDropdown = new LabeledFieldView(locale, createLabeledDropdown);\n    borderStyleDropdown.set({\n      label: t('Style'),\n      class: 'ck-table-form__border-style'\n    });\n    borderStyleDropdown.fieldView.buttonView.set({\n      isOn: false,\n      withText: true,\n      tooltip: t('Style')\n    });\n    borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', value => {\n      return styleLabels[value ? value : 'none'];\n    });\n    borderStyleDropdown.fieldView.on('execute', evt => {\n      this.borderStyle = evt.source._borderStyleValue;\n    });\n    borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', value => !value);\n    addListToDropdown(borderStyleDropdown.fieldView, getBorderStyleDefinitions(this, defaultBorder.style)); // -- Width ---------------------------------------------------\n\n    const borderWidthInput = new LabeledFieldView(locale, createLabeledInputText);\n    borderWidthInput.set({\n      label: t('Width'),\n      class: 'ck-table-form__border-width'\n    });\n    borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n    borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n    borderWidthInput.fieldView.on('input', () => {\n      this.borderWidth = borderWidthInput.fieldView.element.value;\n    }); // -- Color ---------------------------------------------------\n\n    const borderColorInput = new LabeledFieldView(locale, colorInputCreator);\n    borderColorInput.set({\n      label: t('Color'),\n      class: 'ck-table-form__border-color'\n    });\n    borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n    borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n    borderColorInput.fieldView.on('input', () => {\n      this.borderColor = borderColorInput.fieldView.value;\n    }); // Reset the border color and width fields depending on the `border-style` value.\n\n    this.on('change:borderStyle', (evt, name, newValue, oldValue) => {\n      // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n      // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n      if (!isBorderStyleSet(newValue)) {\n        this.borderColor = '';\n        this.borderWidth = '';\n      } // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n\n\n      if (!isBorderStyleSet(oldValue)) {\n        this.borderColor = defaultBorder.color;\n        this.borderWidth = defaultBorder.width;\n      }\n    });\n    return {\n      borderRowLabel,\n      borderStyleDropdown,\n      borderColorInput,\n      borderWidthInput\n    };\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #backgroundInput}.\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createBackgroundFields() {\n    const locale = this.locale;\n    const t = this.t; // -- Group label ---------------------------------------------\n\n    const backgroundRowLabel = new LabelView(locale);\n    backgroundRowLabel.text = t('Background'); // -- Background color input -----------------------------------\n\n    const backgroundInputCreator = getLabeledColorInputCreator({\n      colorConfig: this.options.backgroundColors,\n      columns: 5,\n      defaultColorValue: this.options.defaultTableProperties.backgroundColor\n    });\n    const backgroundInput = new LabeledFieldView(locale, backgroundInputCreator);\n    backgroundInput.set({\n      label: t('Color'),\n      class: 'ck-table-properties-form__background'\n    });\n    backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n    backgroundInput.fieldView.on('input', () => {\n      this.backgroundColor = backgroundInput.fieldView.value;\n    });\n    return {\n      backgroundRowLabel,\n      backgroundInput\n    };\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #widthInput}.\n   * * {@link #heightInput}.\n   *\n   * @private\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n   */\n\n\n  _createDimensionFields() {\n    const locale = this.locale;\n    const t = this.t; // -- Label ---------------------------------------------------\n\n    const dimensionsLabel = new LabelView(locale);\n    dimensionsLabel.text = t('Dimensions'); // -- Width ---------------------------------------------------\n\n    const widthInput = new LabeledFieldView(locale, createLabeledInputText);\n    widthInput.set({\n      label: t('Width'),\n      class: 'ck-table-form__dimensions-row__width'\n    });\n    widthInput.fieldView.bind('value').to(this, 'width');\n    widthInput.fieldView.on('input', () => {\n      this.width = widthInput.fieldView.element.value;\n    }); // -- Operator ---------------------------------------------------\n\n    const operatorLabel = new View(locale);\n    operatorLabel.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck-table-form__dimension-operator']\n      },\n      children: [{\n        text: '×'\n      }]\n    }); // -- Height ---------------------------------------------------\n\n    const heightInput = new LabeledFieldView(locale, createLabeledInputText);\n    heightInput.set({\n      label: t('Height'),\n      class: 'ck-table-form__dimensions-row__height'\n    });\n    heightInput.fieldView.bind('value').to(this, 'height');\n    heightInput.fieldView.on('input', () => {\n      this.height = heightInput.fieldView.element.value;\n    });\n    return {\n      dimensionsLabel,\n      widthInput,\n      operatorLabel,\n      heightInput\n    };\n  }\n  /**\n   * Creates the following form fields:\n   *\n   * * {@link #alignmentToolbar},\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createAlignmentFields() {\n    const locale = this.locale;\n    const t = this.t; // -- Label ---------------------------------------------------\n\n    const alignmentLabel = new LabelView(locale);\n    alignmentLabel.text = t('Alignment'); // -- Toolbar ---------------------------------------------------\n\n    const alignmentToolbar = new ToolbarView(locale);\n    alignmentToolbar.set({\n      isCompact: true,\n      ariaLabel: t('Table alignment toolbar')\n    });\n    fillToolbar({\n      view: this,\n      icons: ALIGNMENT_ICONS,\n      toolbar: alignmentToolbar,\n      labels: this._alignmentLabels,\n      propertyName: 'alignment',\n      defaultValue: this.options.defaultTableProperties.alignment\n    });\n    return {\n      alignmentLabel,\n      alignmentToolbar\n    };\n  }\n  /**\n   * Creates the following form controls:\n   *\n   * * {@link #saveButtonView},\n   * * {@link #cancelButtonView}.\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createActionButtons() {\n    const locale = this.locale;\n    const t = this.t;\n    const saveButtonView = new ButtonView(locale);\n    const cancelButtonView = new ButtonView(locale);\n    const fieldsThatShouldValidateToSave = [this.borderWidthInput, this.borderColorInput, this.backgroundInput, this.widthInput, this.heightInput];\n    saveButtonView.set({\n      label: t('Save'),\n      icon: icons.check,\n      class: 'ck-button-save',\n      type: 'submit',\n      withText: true\n    });\n    saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', function () {\n      for (var _len = arguments.length, errorTexts = new Array(_len), _key = 0; _key < _len; _key++) {\n        errorTexts[_key] = arguments[_key];\n      }\n\n      return errorTexts.every(errorText => !errorText);\n    });\n    cancelButtonView.set({\n      label: t('Cancel'),\n      icon: icons.cancel,\n      class: 'ck-button-cancel',\n      withText: true\n    });\n    cancelButtonView.delegate('execute').to(this, 'cancel');\n    return {\n      saveButtonView,\n      cancelButtonView\n    };\n  }\n  /**\n   * Provides localized labels for {@link #alignmentToolbar} buttons.\n   *\n   * @private\n   * @type {Object.<String,String>}\n   */\n\n\n  get _alignmentLabels() {\n    const locale = this.locale;\n    const t = this.t;\n    const left = t('Align table to the left');\n    const center = t('Center table');\n    const right = t('Align table to the right'); // Returns object with a proper order of labels.\n\n    if (locale.uiLanguageDirection === 'rtl') {\n      return {\n        right,\n        center,\n        left\n      };\n    } else {\n      return {\n        left,\n        center,\n        right\n      };\n    }\n  }\n\n}\n\nfunction isBorderStyleSet(value) {\n  return value !== 'none';\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tableproperties/ui/tablepropertiesview.js"],"names":["ButtonView","FocusCycler","FormHeaderView","LabelView","LabeledFieldView","ToolbarView","View","ViewCollection","addListToDropdown","createLabeledDropdown","createLabeledInputText","submitHandler","FocusTracker","KeystrokeHandler","icons","fillToolbar","getBorderStyleDefinitions","getBorderStyleLabels","getLabeledColorInputCreator","FormRowView","ALIGNMENT_ICONS","left","objectLeft","center","objectCenter","right","objectRight","TablePropertiesView","constructor","locale","options","set","borderStyle","borderWidth","borderColor","backgroundColor","width","height","alignment","borderStyleDropdown","borderWidthInput","borderColorInput","borderRowLabel","_createBorderFields","backgroundRowLabel","backgroundInput","_createBackgroundFields","widthInput","operatorLabel","heightInput","dimensionsLabel","_createDimensionFields","alignmentToolbar","alignmentLabel","_createAlignmentFields","focusTracker","keystrokes","children","createCollection","saveButtonView","cancelButtonView","_createActionButtons","_focusables","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","add","label","t","labelView","class","setTemplate","tag","attributes","tabindex","render","view","forEach","element","listenTo","destroy","focus","focusFirst","defaultTableProperties","defaultBorder","style","color","colorInputCreator","colorConfig","borderColors","columns","defaultColorValue","text","styleLabels","fieldView","buttonView","isOn","withText","tooltip","bind","to","value","on","evt","source","_borderStyleValue","isBorderStyleSet","name","newValue","oldValue","backgroundInputCreator","backgroundColors","isCompact","ariaLabel","toolbar","labels","_alignmentLabels","propertyName","defaultValue","fieldsThatShouldValidateToSave","icon","check","type","toMany","errorTexts","every","errorText","cancel","delegate","uiLanguageDirection"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableproperties/ui/tablepropertiesview\n */\n\nimport {\n\tButtonView,\n\tFocusCycler,\n\tFormHeaderView,\n\tLabelView,\n\tLabeledFieldView,\n\tToolbarView,\n\tView,\n\tViewCollection,\n\taddListToDropdown,\n\tcreateLabeledDropdown,\n\tcreateLabeledInputText,\n\tsubmitHandler\n} from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\n\nimport {\n\tfillToolbar,\n\tgetBorderStyleDefinitions,\n\tgetBorderStyleLabels,\n\tgetLabeledColorInputCreator\n} from '../../utils/ui/table-properties';\nimport FormRowView from '../../ui/formrowview';\n\nimport '../../../theme/form.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tableproperties.css';\n\nconst ALIGNMENT_ICONS = {\n\tleft: icons.objectLeft,\n\tcenter: icons.objectCenter,\n\tright: icons.objectRight\n};\n\n/**\n * The class representing a table properties form, allowing users to customize\n * certain style aspects of a table, for instance, border, background color, alignment, etc..\n *\n * @extends module:ui/view~View\n */\nexport default class TablePropertiesView extends View {\n\t/**\n\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param {Object} options Additional configuration of the view.\n\t * @param {module:table/table~TableColorConfig} options.borderColors A configuration of the border\n\t * color palette used by the\n\t * {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView#borderColorInput}.\n\t * @param {module:table/table~TableColorConfig} options.backgroundColors A configuration of the background\n\t * color palette used by the\n\t * {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView#backgroundInput}.\n\t * @param {module:table/tableproperties~TablePropertiesOptions} options.defaultTableProperties The default table properties.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tthis.set( {\n\t\t\t/**\n\t\t\t * The value of the border style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #borderStyle\n\t\t\t */\n\t\t\tborderStyle: '',\n\n\t\t\t/**\n\t\t\t * The value of the border width style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #borderWidth\n\t\t\t */\n\t\t\tborderWidth: '',\n\n\t\t\t/**\n\t\t\t * The value of the border color style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #borderColor\n\t\t\t */\n\t\t\tborderColor: '',\n\n\t\t\t/**\n\t\t\t * The value of the background color style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #backgroundColor\n\t\t\t */\n\t\t\tbackgroundColor: '',\n\n\t\t\t/**\n\t\t\t * The value of the table width style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #width\n\t\t\t */\n\t\t\twidth: '',\n\n\t\t\t/**\n\t\t\t * The value of the table height style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #height\n\t\t\t */\n\t\t\theight: '',\n\n\t\t\t/**\n\t\t\t * The value of the table alignment style.\n\t\t\t *\n\t\t\t * @observable\n\t\t\t * @default ''\n\t\t\t * @member #alignment\n\t\t\t */\n\t\t\talignment: ''\n\t\t} );\n\n\t\t/**\n\t\t * Options passed to the view. See {@link #constructor} to learn more.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object}\n\t\t */\n\t\tthis.options = options;\n\n\t\tconst { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n\t\tconst { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n\t\tconst { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n\t\tconst { alignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * A collection of child views in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * A dropdown that allows selecting the style of the table border.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.borderStyleDropdown = borderStyleDropdown;\n\n\t\t/**\n\t\t * An input that allows specifying the width of the table border.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView}\n\t\t */\n\t\tthis.borderWidthInput = borderWidthInput;\n\n\t\t/**\n\t\t * An input that allows specifying the color of the table border.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:table/ui/colorinputview~ColorInputView}\n\t\t */\n\t\tthis.borderColorInput = borderColorInput;\n\n\t\t/**\n\t\t * An input that allows specifying the table background color.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:table/ui/colorinputview~ColorInputView}\n\t\t */\n\t\tthis.backgroundInput = backgroundInput;\n\n\t\t/**\n\t\t * An input that allows specifying the table width.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView}\n\t\t */\n\t\tthis.widthInput = widthInput;\n\n\t\t/**\n\t\t * An input that allows specifying the table height.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView}\n\t\t */\n\t\tthis.heightInput = heightInput;\n\n\t\t/**\n\t\t * A toolbar with buttons that allow changing the alignment of an entire table.\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbar~ToolbarView}\n\t\t */\n\t\tthis.alignmentToolbar = alignmentToolbar;\n\n\t\t// Defer creating to make sure other fields are present and the Save button can\n\t\t// bind its #isEnabled to their error messages so there's no way to save unless all\n\t\t// fields are valid.\n\t\tconst { saveButtonView, cancelButtonView } = this._createActionButtons();\n\n\t\t/**\n\t\t * The \"Save\" button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.saveButtonView = saveButtonView;\n\n\t\t/**\n\t\t * The \"Cancel\" button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.cancelButtonView = cancelButtonView;\n\n\t\t/**\n\t\t * A collection of views that can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._focusables = new ViewCollection();\n\n\t\t/**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t// Form header.\n\t\tthis.children.add( new FormHeaderView( locale, {\n\t\t\tlabel: this.t( 'Table properties' )\n\t\t} ) );\n\n\t\t// Border row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: borderRowLabel,\n\t\t\tchildren: [\n\t\t\t\tborderRowLabel,\n\t\t\t\tborderStyleDropdown,\n\t\t\t\tborderColorInput,\n\t\t\t\tborderWidthInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__border-row'\n\t\t} ) );\n\n\t\t// Background row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: backgroundRowLabel,\n\t\t\tchildren: [\n\t\t\t\tbackgroundRowLabel,\n\t\t\t\tbackgroundInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__background-row'\n\t\t} ) );\n\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\t// Dimensions row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: dimensionsLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tdimensionsLabel,\n\t\t\t\t\t\twidthInput,\n\t\t\t\t\t\toperatorLabel,\n\t\t\t\t\t\theightInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-form__dimensions-row'\n\t\t\t\t} ),\n\t\t\t\t// Alignment row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: alignmentLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\talignmentLabel,\n\t\t\t\t\t\talignmentToolbar\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-properties-form__alignment-row'\n\t\t\t\t} )\n\t\t\t]\n\t\t} ) );\n\n\t\t// Action row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t],\n\t\t\tclass: 'ck-table-form__action-row'\n\t\t} ) );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-form',\n\t\t\t\t\t'ck-table-form',\n\t\t\t\t\t'ck-table-properties-form'\n\t\t\t\t],\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/90\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n\t\t// which is of the \"submit\" DOM \"type\".\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\t[\n\t\t\tthis.borderStyleDropdown,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.widthInput,\n\t\t\tthis.heightInput,\n\t\t\tthis.alignmentToolbar,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t].forEach( view => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( view );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( view.element );\n\t\t} );\n\n\t\t// Mainly for closing using \"Esc\" and navigation using \"Tab\".\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist focusable field in the form.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createBorderFields() {\n\t\tconst defaultTableProperties = this.options.defaultTableProperties;\n\t\tconst defaultBorder = {\n\t\t\tstyle: defaultTableProperties.borderStyle,\n\t\t\twidth: defaultTableProperties.borderWidth,\n\t\t\tcolor: defaultTableProperties.borderColor\n\t\t};\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.borderColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: defaultBorder.color\n\t\t} );\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst borderRowLabel = new LabelView( locale );\n\t\tborderRowLabel.text = t( 'Border' );\n\n\t\t// -- Style ---------------------------------------------------\n\n\t\tconst styleLabels = getBorderStyleLabels( this.t );\n\t\tconst borderStyleDropdown = new LabeledFieldView( locale, createLabeledDropdown );\n\t\tborderStyleDropdown.set( {\n\t\t\tlabel: t( 'Style' ),\n\t\t\tclass: 'ck-table-form__border-style'\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.set( {\n\t\t\tisOn: false,\n\t\t\twithText: true,\n\t\t\ttooltip: t( 'Style' )\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.bind( 'label' ).to( this, 'borderStyle', value => {\n\t\t\treturn styleLabels[ value ? value : 'none' ];\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.on( 'execute', evt => {\n\t\t\tthis.borderStyle = evt.source._borderStyleValue;\n\t\t} );\n\n\t\tborderStyleDropdown.bind( 'isEmpty' ).to( this, 'borderStyle', value => !value );\n\n\t\taddListToDropdown( borderStyleDropdown.fieldView, getBorderStyleDefinitions( this, defaultBorder.style ) );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst borderWidthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tborderWidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__border-width'\n\t\t} );\n\n\t\tborderWidthInput.fieldView.bind( 'value' ).to( this, 'borderWidth' );\n\t\tborderWidthInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\t\tborderWidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderWidth = borderWidthInput.fieldView.element.value;\n\t\t} );\n\n\t\t// -- Color ---------------------------------------------------\n\n\t\tconst borderColorInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tborderColorInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-form__border-color'\n\t\t} );\n\n\t\tborderColorInput.fieldView.bind( 'value' ).to( this, 'borderColor' );\n\t\tborderColorInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\n\t\tborderColorInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderColor = borderColorInput.fieldView.value;\n\t\t} );\n\n\t\t// Reset the border color and width fields depending on the `border-style` value.\n\t\tthis.on( 'change:borderStyle', ( evt, name, newValue, oldValue ) => {\n\t\t\t// When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/6227.\n\t\t\tif ( !isBorderStyleSet( newValue ) ) {\n\t\t\t\tthis.borderColor = '';\n\t\t\t\tthis.borderWidth = '';\n\t\t\t}\n\n\t\t\t// When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n\t\t\tif ( !isBorderStyleSet( oldValue ) ) {\n\t\t\t\tthis.borderColor = defaultBorder.color;\n\t\t\t\tthis.borderWidth = defaultBorder.width;\n\t\t\t}\n\t\t} );\n\n\t\treturn {\n\t\t\tborderRowLabel,\n\t\t\tborderStyleDropdown,\n\t\t\tborderColorInput,\n\t\t\tborderWidthInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createBackgroundFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst backgroundRowLabel = new LabelView( locale );\n\t\tbackgroundRowLabel.text = t( 'Background' );\n\n\t\t// -- Background color input -----------------------------------\n\n\t\tconst backgroundInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.backgroundColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: this.options.defaultTableProperties.backgroundColor\n\t\t} );\n\n\t\tconst backgroundInput = new LabeledFieldView( locale, backgroundInputCreator );\n\n\t\tbackgroundInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-properties-form__background'\n\t\t} );\n\n\t\tbackgroundInput.fieldView.bind( 'value' ).to( this, 'backgroundColor' );\n\t\tbackgroundInput.fieldView.on( 'input', () => {\n\t\t\tthis.backgroundColor = backgroundInput.fieldView.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tbackgroundRowLabel,\n\t\t\tbackgroundInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput}.\n\t * * {@link #heightInput}.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n\t */\n\t_createDimensionFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst dimensionsLabel = new LabelView( locale );\n\t\tdimensionsLabel.text = t( 'Dimensions' );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst widthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\twidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__width'\n\t\t} );\n\n\t\twidthInput.fieldView.bind( 'value' ).to( this, 'width' );\n\t\twidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.width = widthInput.fieldView.element.value;\n\t\t} );\n\n\t\t// -- Operator ---------------------------------------------------\n\n\t\tconst operatorLabel = new View( locale );\n\t\toperatorLabel.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-table-form__dimension-operator'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{ text: '×' }\n\t\t\t]\n\t\t} );\n\n\t\t// -- Height ---------------------------------------------------\n\n\t\tconst heightInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\theightInput.set( {\n\t\t\tlabel: t( 'Height' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__height'\n\t\t} );\n\n\t\theightInput.fieldView.bind( 'value' ).to( this, 'height' );\n\t\theightInput.fieldView.on( 'input', () => {\n\t\t\tthis.height = heightInput.fieldView.element.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tdimensionsLabel,\n\t\t\twidthInput,\n\t\t\toperatorLabel,\n\t\t\theightInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #alignmentToolbar},\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createAlignmentFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst alignmentLabel = new LabelView( locale );\n\t\talignmentLabel.text = t( 'Alignment' );\n\n\t\t// -- Toolbar ---------------------------------------------------\n\n\t\tconst alignmentToolbar = new ToolbarView( locale );\n\t\talignmentToolbar.set( {\n\t\t\tisCompact: true,\n\t\t\tariaLabel: t( 'Table alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: ALIGNMENT_ICONS,\n\t\t\ttoolbar: alignmentToolbar,\n\t\t\tlabels: this._alignmentLabels,\n\t\t\tpropertyName: 'alignment',\n\t\t\tdefaultValue: this.options.defaultTableProperties.alignment\n\t\t} );\n\n\t\treturn {\n\t\t\talignmentLabel,\n\t\t\talignmentToolbar\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createActionButtons() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\tconst saveButtonView = new ButtonView( locale );\n\t\tconst cancelButtonView = new ButtonView( locale );\n\t\tconst fieldsThatShouldValidateToSave = [\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.widthInput,\n\t\t\tthis.heightInput\n\t\t];\n\n\t\tsaveButtonView.set( {\n\t\t\tlabel: t( 'Save' ),\n\t\t\ticon: icons.check,\n\t\t\tclass: 'ck-button-save',\n\t\t\ttype: 'submit',\n\t\t\twithText: true\n\t\t} );\n\n\t\tsaveButtonView.bind( 'isEnabled' ).toMany( fieldsThatShouldValidateToSave, 'errorText', ( ...errorTexts ) => {\n\t\t\treturn errorTexts.every( errorText => !errorText );\n\t\t} );\n\n\t\tcancelButtonView.set( {\n\t\t\tlabel: t( 'Cancel' ),\n\t\t\ticon: icons.cancel,\n\t\t\tclass: 'ck-button-cancel',\n\t\t\twithText: true\n\t\t} );\n\n\t\tcancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n\t\treturn {\n\t\t\tsaveButtonView, cancelButtonView\n\t\t};\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #alignmentToolbar} buttons.\n\t *\n\t * @private\n\t * @type {Object.<String,String>}\n\t */\n\tget _alignmentLabels() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t;\n\n\t\tconst left = t( 'Align table to the left' );\n\t\tconst center = t( 'Center table' );\n\t\tconst right = t( 'Align table to the right' );\n\n\t\t// Returns object with a proper order of labels.\n\t\tif ( locale.uiLanguageDirection === 'rtl' ) {\n\t\t\treturn { right, center, left };\n\t\t} else {\n\t\t\treturn { left, center, right };\n\t\t}\n\t}\n}\n\nfunction isBorderStyleSet( value ) {\n\treturn value !== 'none';\n}\n"]},"metadata":{},"sourceType":"module"}