{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/ui/colorinputview\n */\nimport { View, InputTextView, ButtonView, createDropdown, ColorGridView } from 'ckeditor5/src/ui';\nimport { icons } from 'ckeditor5/src/core';\nimport '../../theme/colorinput.css';\n/**\n * The color input view class. It allows the user to type in a color (hex, rgb, etc.)\n * or choose it from the configurable color palette with a preview.\n *\n * @private\n * @extends module:ui/view~View\n */\n\nexport default class ColorInputView extends View {\n  /**\n   * Creates an instance of the color input view.\n   *\n   * @param {module:utils/locale~Locale} locale The locale instance.\n   * @param {Object} options The input options.\n   * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} options.colorDefinitions The colors to be displayed\n   * in the palette inside the input's dropdown.\n   * @param {Number} options.columns The number of columns in which the colors will be displayed.\n   * @param {String} [options.defaultColorValue] If specified, the color input view will replace the \"Remove color\" button with\n   * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n   */\n  constructor(locale, options) {\n    super(locale);\n    const bind = this.bindTemplate;\n    /**\n     * The value of the input.\n     *\n     * @observable\n     * @member {String} #value\n     * @default ''\n     */\n\n    this.set('value', '');\n    /**\n     * The `id` attribute of the input (i.e. to pair with the `<label>` element).\n     *\n     * @observable\n     * @member {String} #id\n     */\n\n    this.set('id');\n    /**\n     * Controls whether the input view is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     * @default false\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * Set to `true` when the field has some error. Usually controlled via\n     * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n     *\n     * @observable\n     * @member {Boolean} #hasError\n     * @default false\n     */\n\n    this.set('hasError', false);\n    /**\n     * An observable flag set to `true` when the input is focused by the user.\n     * `false` otherwise.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isFocused\n     * @default false\n     */\n\n    this.set('isFocused', false);\n    /**\n     * An observable flag set to `true` when the input contains no text.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isEmpty\n     * @default true\n     */\n\n    this.set('isEmpty', true);\n    /**\n     * The `id` of the element describing this field. When the field has\n     * some error, it helps screen readers read the error text.\n     *\n     * @observable\n     * @member {String} #ariaDescribedById\n     */\n\n    this.set('ariaDescribedById');\n    /**\n     * A cached reference to the options passed to the constructor.\n     *\n     * @member {Object}\n     */\n\n    this.options = options;\n    /**\n     * An instance of the dropdown allowing to select a color from a grid.\n     *\n     * @protected\n     * @member {module:ui/dropdown/dropdown~DropdownView}\n     */\n\n    this._dropdownView = this._createDropdownView();\n    /**\n     * An instance of the input allowing the user to type a color value.\n     *\n     * @protected\n     * @member {module:ui/inputtext/inputtextview~InputTextView}\n     */\n\n    this._inputView = this._createInputTextView();\n    /**\n     * The flag that indicates whether the user is still typing.\n     * If set to true, it means that the text input field ({@link #_inputView}) still has the focus.\n     * So, we should interrupt the user by replacing the input's value.\n     *\n     * @protected\n     * @member {Boolean}\n     */\n\n    this._stillTyping = false;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-input-color', bind.if('hasError', 'ck-error')],\n        id: bind.to('id'),\n        'aria-invalid': bind.if('hasError', true),\n        'aria-describedby': bind.to('ariaDescribedById')\n      },\n      children: [this._dropdownView, this._inputView]\n    });\n    this.on('change:value', (evt, name, inputValue) => this._setInputValue(inputValue));\n  }\n  /**\n   * Focuses the input.\n   */\n\n\n  focus() {\n    this._inputView.focus();\n  }\n  /**\n   * Creates and configures the {@link #_dropdownView}.\n   *\n   * @private\n   */\n\n\n  _createDropdownView() {\n    const locale = this.locale;\n    const t = locale.t;\n    const bind = this.bindTemplate;\n\n    const colorGrid = this._createColorGrid(locale);\n\n    const dropdown = createDropdown(locale);\n    const colorPreview = new View();\n\n    const removeColorButton = this._createRemoveColorButton();\n\n    colorPreview.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-input-color__button__preview'],\n        style: {\n          backgroundColor: bind.to('value')\n        }\n      },\n      children: [{\n        tag: 'span',\n        attributes: {\n          class: ['ck', 'ck-input-color__button__preview__no-color-indicator', bind.if('value', 'ck-hidden', value => value != '')]\n        }\n      }]\n    });\n    dropdown.buttonView.extendTemplate({\n      attributes: {\n        class: 'ck-input-color__button'\n      }\n    });\n    dropdown.buttonView.children.add(colorPreview);\n    dropdown.buttonView.tooltip = t('Color picker');\n    dropdown.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n    dropdown.panelView.children.add(removeColorButton);\n    dropdown.panelView.children.add(colorGrid);\n    dropdown.bind('isEnabled').to(this, 'isReadOnly', value => !value);\n    return dropdown;\n  }\n  /**\n   * Creates and configures an instance of {@link module:ui/inputtext/inputtextview~InputTextView}.\n   *\n   * @private\n   * @returns {module:ui/inputtext/inputtextview~InputTextView} A configured instance to be set as {@link #_inputView}.\n   */\n\n\n  _createInputTextView() {\n    const locale = this.locale;\n    const inputView = new InputTextView(locale);\n    inputView.extendTemplate({\n      on: {\n        blur: inputView.bindTemplate.to('blur')\n      }\n    });\n    inputView.value = this.value;\n    inputView.bind('isReadOnly', 'hasError').to(this);\n    this.bind('isFocused', 'isEmpty').to(inputView);\n    inputView.on('input', () => {\n      const inputValue = inputView.element.value; // Check if the value matches one of our defined colors' label.\n\n      const mappedColor = this.options.colorDefinitions.find(def => inputValue === def.label);\n      this._stillTyping = true;\n      this.value = mappedColor && mappedColor.color || inputValue;\n    });\n    inputView.on('blur', () => {\n      this._stillTyping = false;\n\n      this._setInputValue(inputView.element.value);\n    });\n    inputView.delegate('input').to(this);\n    return inputView;\n  }\n  /**\n   * Creates and configures the button that clears the color.\n   *\n   * @private\n   */\n\n\n  _createRemoveColorButton() {\n    const locale = this.locale;\n    const t = locale.t;\n    const removeColorButton = new ButtonView(locale);\n    const defaultColor = this.options.defaultColorValue || '';\n    const removeColorButtonLabel = defaultColor ? t('Restore default') : t('Remove color');\n    removeColorButton.class = 'ck-input-color__remove-color';\n    removeColorButton.withText = true;\n    removeColorButton.icon = icons.eraser;\n    removeColorButton.label = removeColorButtonLabel;\n    removeColorButton.on('execute', () => {\n      this.value = defaultColor;\n      this._dropdownView.isOpen = false;\n      this.fire('input');\n    });\n    return removeColorButton;\n  }\n  /**\n   * Creates and configures the color grid inside the {@link #_dropdownView}.\n   *\n   * @private\n   */\n\n\n  _createColorGrid(locale) {\n    const colorGrid = new ColorGridView(locale, {\n      colorDefinitions: this.options.colorDefinitions,\n      columns: this.options.columns\n    });\n    colorGrid.on('execute', (evtData, data) => {\n      this.value = data.value;\n      this._dropdownView.isOpen = false;\n      this.fire('input');\n    });\n    colorGrid.bind('selectedColor').to(this, 'value');\n    return colorGrid;\n  }\n  /**\n   * Sets {@link #_inputView}'s value property to the color value or color label,\n   * if there is one and the user is not typing.\n   *\n   * Handles cases like:\n   *\n   * * Someone picks the color in the grid.\n   * * The color is set from the plugin level.\n   *\n   * @private\n   * @param {String} inputValue Color value to be set.\n   */\n\n\n  _setInputValue(inputValue) {\n    if (!this._stillTyping) {\n      const normalizedInputValue = normalizeColor(inputValue); // Check if the value matches one of our defined colors.\n\n      const mappedColor = this.options.colorDefinitions.find(def => normalizedInputValue === normalizeColor(def.color));\n\n      if (mappedColor) {\n        this._inputView.value = mappedColor.label;\n      } else {\n        this._inputView.value = inputValue || '';\n      }\n    }\n  }\n\n} // Normalizes color value, by stripping extensive whitespace.\n// For example., transforms:\n// * `   rgb(  25 50    0 )` to `rgb(25 50 0)`,\n// * \"\\t  rgb(  25 ,  50,0 )\t\t\" to `rgb(25 50 0)`.\n//\n// @param {String} colorString The value to be normalized.\n// @returns {String}\n\nfunction normalizeColor(colorString) {\n  return colorString // Remove any whitespace right after `(` or `,`.\n  .replace(/([(,])\\s+/g, '$1') // Remove any whitespace at the beginning or right before the end, `)`, `,`, or another whitespace.\n  .replace(/^\\s+|\\s+(?=[),\\s]|$)/g, '') // Then, replace `,` or whitespace with a single space.\n  .replace(/,|\\s/g, ' ');\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/ui/colorinputview.js"],"names":["View","InputTextView","ButtonView","createDropdown","ColorGridView","icons","ColorInputView","constructor","locale","options","bind","bindTemplate","set","_dropdownView","_createDropdownView","_inputView","_createInputTextView","_stillTyping","setTemplate","tag","attributes","class","if","id","to","children","on","evt","name","inputValue","_setInputValue","focus","t","colorGrid","_createColorGrid","dropdown","colorPreview","removeColorButton","_createRemoveColorButton","style","backgroundColor","value","buttonView","extendTemplate","add","tooltip","panelPosition","uiLanguageDirection","panelView","inputView","blur","element","mappedColor","colorDefinitions","find","def","label","color","delegate","defaultColor","defaultColorValue","removeColorButtonLabel","withText","icon","eraser","isOpen","fire","columns","evtData","data","normalizedInputValue","normalizeColor","colorString","replace"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,IAAT,EAAeC,aAAf,EAA8BC,UAA9B,EAA0CC,cAA1C,EAA0DC,aAA1D,QAA+E,kBAA/E;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,OAAO,4BAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,cAAN,SAA6BN,IAA7B,CAAkC;AAChD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCO,EAAAA,WAAW,CAAEC,MAAF,EAAUC,OAAV,EAAoB;AAC9B,UAAOD,MAAP;AAEA,UAAME,IAAI,GAAG,KAAKC,YAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,GAAL,CAAU,OAAV,EAAmB,EAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,IAAV;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,YAAV,EAAwB,KAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,UAAV,EAAsB,KAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,WAAV,EAAuB,KAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,SAAV,EAAqB,IAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,mBAAV;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKH,OAAL,GAAeA,OAAf;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKI,aAAL,GAAqB,KAAKC,mBAAL,EAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,UAAL,GAAkB,KAAKC,oBAAL,EAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,YAAL,GAAoB,KAApB;AAEA,SAAKC,WAAL,CAAkB;AACjBC,MAAAA,GAAG,EAAE,KADY;AAEjBC,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE,CACN,IADM,EAEN,gBAFM,EAGNX,IAAI,CAACY,EAAL,CAAS,UAAT,EAAqB,UAArB,CAHM,CADI;AAMXC,QAAAA,EAAE,EAAEb,IAAI,CAACc,EAAL,CAAS,IAAT,CANO;AAOX,wBAAgBd,IAAI,CAACY,EAAL,CAAS,UAAT,EAAqB,IAArB,CAPL;AAQX,4BAAoBZ,IAAI,CAACc,EAAL,CAAS,mBAAT;AART,OAFK;AAYjBC,MAAAA,QAAQ,EAAE,CACT,KAAKZ,aADI,EAET,KAAKE,UAFI;AAZO,KAAlB;AAkBA,SAAKW,EAAL,CAAS,cAAT,EAAyB,CAAEC,GAAF,EAAOC,IAAP,EAAaC,UAAb,KAA6B,KAAKC,cAAL,CAAqBD,UAArB,CAAtD;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,KAAK,GAAG;AACP,SAAKhB,UAAL,CAAgBgB,KAAhB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCjB,EAAAA,mBAAmB,GAAG;AACrB,UAAMN,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMwB,CAAC,GAAGxB,MAAM,CAACwB,CAAjB;AACA,UAAMtB,IAAI,GAAG,KAAKC,YAAlB;;AACA,UAAMsB,SAAS,GAAG,KAAKC,gBAAL,CAAuB1B,MAAvB,CAAlB;;AACA,UAAM2B,QAAQ,GAAGhC,cAAc,CAAEK,MAAF,CAA/B;AACA,UAAM4B,YAAY,GAAG,IAAIpC,IAAJ,EAArB;;AACA,UAAMqC,iBAAiB,GAAG,KAAKC,wBAAL,EAA1B;;AAEAF,IAAAA,YAAY,CAAClB,WAAb,CAA0B;AACzBC,MAAAA,GAAG,EAAE,MADoB;AAEzBC,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE,CACN,IADM,EAEN,iCAFM,CADI;AAKXkB,QAAAA,KAAK,EAAE;AACNC,UAAAA,eAAe,EAAE9B,IAAI,CAACc,EAAL,CAAS,OAAT;AADX;AALI,OAFa;AAWzBC,MAAAA,QAAQ,EAAE,CAAE;AACXN,QAAAA,GAAG,EAAE,MADM;AAEXC,QAAAA,UAAU,EAAE;AACXC,UAAAA,KAAK,EAAE,CACN,IADM,EAEN,qDAFM,EAGNX,IAAI,CAACY,EAAL,CAAS,OAAT,EAAkB,WAAlB,EAA+BmB,KAAK,IAAIA,KAAK,IAAI,EAAjD,CAHM;AADI;AAFD,OAAF;AAXe,KAA1B;AAuBAN,IAAAA,QAAQ,CAACO,UAAT,CAAoBC,cAApB,CAAoC;AACnCvB,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE;AADI;AADuB,KAApC;AAMAc,IAAAA,QAAQ,CAACO,UAAT,CAAoBjB,QAApB,CAA6BmB,GAA7B,CAAkCR,YAAlC;AACAD,IAAAA,QAAQ,CAACO,UAAT,CAAoBG,OAApB,GAA8Bb,CAAC,CAAE,cAAF,CAA/B;AAEAG,IAAAA,QAAQ,CAACW,aAAT,GAAyBtC,MAAM,CAACuC,mBAAP,KAA+B,KAA/B,GAAuC,IAAvC,GAA8C,IAAvE;AACAZ,IAAAA,QAAQ,CAACa,SAAT,CAAmBvB,QAAnB,CAA4BmB,GAA5B,CAAiCP,iBAAjC;AACAF,IAAAA,QAAQ,CAACa,SAAT,CAAmBvB,QAAnB,CAA4BmB,GAA5B,CAAiCX,SAAjC;AACAE,IAAAA,QAAQ,CAACzB,IAAT,CAAe,WAAf,EAA6Bc,EAA7B,CAAiC,IAAjC,EAAuC,YAAvC,EAAqDiB,KAAK,IAAI,CAACA,KAA/D;AAEA,WAAON,QAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCnB,EAAAA,oBAAoB,GAAG;AACtB,UAAMR,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMyC,SAAS,GAAG,IAAIhD,aAAJ,CAAmBO,MAAnB,CAAlB;AAEAyC,IAAAA,SAAS,CAACN,cAAV,CAA0B;AACzBjB,MAAAA,EAAE,EAAE;AACHwB,QAAAA,IAAI,EAAED,SAAS,CAACtC,YAAV,CAAuBa,EAAvB,CAA2B,MAA3B;AADH;AADqB,KAA1B;AAMAyB,IAAAA,SAAS,CAACR,KAAV,GAAkB,KAAKA,KAAvB;AACAQ,IAAAA,SAAS,CAACvC,IAAV,CAAgB,YAAhB,EAA8B,UAA9B,EAA2Cc,EAA3C,CAA+C,IAA/C;AACA,SAAKd,IAAL,CAAW,WAAX,EAAwB,SAAxB,EAAoCc,EAApC,CAAwCyB,SAAxC;AAEAA,IAAAA,SAAS,CAACvB,EAAV,CAAc,OAAd,EAAuB,MAAM;AAC5B,YAAMG,UAAU,GAAGoB,SAAS,CAACE,OAAV,CAAkBV,KAArC,CAD4B,CAE5B;;AACA,YAAMW,WAAW,GAAG,KAAK3C,OAAL,CAAa4C,gBAAb,CAA8BC,IAA9B,CAAoCC,GAAG,IAAI1B,UAAU,KAAK0B,GAAG,CAACC,KAA9D,CAApB;AAEA,WAAKvC,YAAL,GAAoB,IAApB;AACA,WAAKwB,KAAL,GAAaW,WAAW,IAAIA,WAAW,CAACK,KAA3B,IAAoC5B,UAAjD;AACA,KAPD;AASAoB,IAAAA,SAAS,CAACvB,EAAV,CAAc,MAAd,EAAsB,MAAM;AAC3B,WAAKT,YAAL,GAAoB,KAApB;;AACA,WAAKa,cAAL,CAAqBmB,SAAS,CAACE,OAAV,CAAkBV,KAAvC;AACA,KAHD;AAKAQ,IAAAA,SAAS,CAACS,QAAV,CAAoB,OAApB,EAA8BlC,EAA9B,CAAkC,IAAlC;AAEA,WAAOyB,SAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCX,EAAAA,wBAAwB,GAAG;AAC1B,UAAM9B,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMwB,CAAC,GAAGxB,MAAM,CAACwB,CAAjB;AACA,UAAMK,iBAAiB,GAAG,IAAInC,UAAJ,CAAgBM,MAAhB,CAA1B;AACA,UAAMmD,YAAY,GAAG,KAAKlD,OAAL,CAAamD,iBAAb,IAAkC,EAAvD;AACA,UAAMC,sBAAsB,GAAGF,YAAY,GAAG3B,CAAC,CAAE,iBAAF,CAAJ,GAA4BA,CAAC,CAAE,cAAF,CAAxE;AAEAK,IAAAA,iBAAiB,CAAChB,KAAlB,GAA0B,8BAA1B;AACAgB,IAAAA,iBAAiB,CAACyB,QAAlB,GAA6B,IAA7B;AACAzB,IAAAA,iBAAiB,CAAC0B,IAAlB,GAAyB1D,KAAK,CAAC2D,MAA/B;AACA3B,IAAAA,iBAAiB,CAACmB,KAAlB,GAA0BK,sBAA1B;AACAxB,IAAAA,iBAAiB,CAACX,EAAlB,CAAsB,SAAtB,EAAiC,MAAM;AACtC,WAAKe,KAAL,GAAakB,YAAb;AACA,WAAK9C,aAAL,CAAmBoD,MAAnB,GAA4B,KAA5B;AACA,WAAKC,IAAL,CAAW,OAAX;AACA,KAJD;AAMA,WAAO7B,iBAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCH,EAAAA,gBAAgB,CAAE1B,MAAF,EAAW;AAC1B,UAAMyB,SAAS,GAAG,IAAI7B,aAAJ,CAAmBI,MAAnB,EAA2B;AAC5C6C,MAAAA,gBAAgB,EAAE,KAAK5C,OAAL,CAAa4C,gBADa;AAE5Cc,MAAAA,OAAO,EAAE,KAAK1D,OAAL,CAAa0D;AAFsB,KAA3B,CAAlB;AAKAlC,IAAAA,SAAS,CAACP,EAAV,CAAc,SAAd,EAAyB,CAAE0C,OAAF,EAAWC,IAAX,KAAqB;AAC7C,WAAK5B,KAAL,GAAa4B,IAAI,CAAC5B,KAAlB;AACA,WAAK5B,aAAL,CAAmBoD,MAAnB,GAA4B,KAA5B;AACA,WAAKC,IAAL,CAAW,OAAX;AACA,KAJD;AAKAjC,IAAAA,SAAS,CAACvB,IAAV,CAAgB,eAAhB,EAAkCc,EAAlC,CAAsC,IAAtC,EAA4C,OAA5C;AAEA,WAAOS,SAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCH,EAAAA,cAAc,CAAED,UAAF,EAAe;AAC5B,QAAK,CAAC,KAAKZ,YAAX,EAA0B;AACzB,YAAMqD,oBAAoB,GAAGC,cAAc,CAAE1C,UAAF,CAA3C,CADyB,CAEzB;;AACA,YAAMuB,WAAW,GAAG,KAAK3C,OAAL,CAAa4C,gBAAb,CAA8BC,IAA9B,CAAoCC,GAAG,IAAIe,oBAAoB,KAAKC,cAAc,CAAEhB,GAAG,CAACE,KAAN,CAAlF,CAApB;;AAEA,UAAKL,WAAL,EAAmB;AAClB,aAAKrC,UAAL,CAAgB0B,KAAhB,GAAwBW,WAAW,CAACI,KAApC;AACA,OAFD,MAEO;AACN,aAAKzC,UAAL,CAAgB0B,KAAhB,GAAwBZ,UAAU,IAAI,EAAtC;AACA;AACD;AACD;;AAnT+C,C,CAsTjD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS0C,cAAT,CAAyBC,WAAzB,EAAuC;AACtC,SAAOA,WAAW,CACjB;AADiB,GAEhBC,OAFK,CAEI,YAFJ,EAEkB,IAFlB,EAGN;AAHM,GAILA,OAJK,CAII,uBAJJ,EAI6B,EAJ7B,EAKN;AALM,GAMLA,OANK,CAMI,OANJ,EAMa,GANb,CAAP;AAOA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/ui/colorinputview\n */\n\nimport { View, InputTextView, ButtonView, createDropdown, ColorGridView } from 'ckeditor5/src/ui';\nimport { icons } from 'ckeditor5/src/core';\n\nimport '../../theme/colorinput.css';\n\n/**\n * The color input view class. It allows the user to type in a color (hex, rgb, etc.)\n * or choose it from the configurable color palette with a preview.\n *\n * @private\n * @extends module:ui/view~View\n */\nexport default class ColorInputView extends View {\n\t/**\n\t * Creates an instance of the color input view.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance.\n\t * @param {Object} options The input options.\n\t * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} options.colorDefinitions The colors to be displayed\n\t * in the palette inside the input's dropdown.\n\t * @param {Number} options.columns The number of columns in which the colors will be displayed.\n\t * @param {String} [options.defaultColorValue] If specified, the color input view will replace the \"Remove color\" button with\n\t * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t * @default ''\n\t\t */\n\t\tthis.set( 'value', '' );\n\n\t\t/**\n\t\t * The `id` attribute of the input (i.e. to pair with the `<label>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #id\n\t\t */\n\t\tthis.set( 'id' );\n\n\t\t/**\n\t\t * Controls whether the input view is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t * @default false\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Set to `true` when the field has some error. Usually controlled via\n\t\t * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #hasError\n\t\t * @default false\n\t\t */\n\t\tthis.set( 'hasError', false );\n\n\t\t/**\n\t\t * An observable flag set to `true` when the input is focused by the user.\n\t\t * `false` otherwise.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t * @default false\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * An observable flag set to `true` when the input contains no text.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isEmpty\n\t\t * @default true\n\t\t */\n\t\tthis.set( 'isEmpty', true );\n\n\t\t/**\n\t\t * The `id` of the element describing this field. When the field has\n\t\t * some error, it helps screen readers read the error text.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #ariaDescribedById\n\t\t */\n\t\tthis.set( 'ariaDescribedById' );\n\n\t\t/**\n\t\t * A cached reference to the options passed to the constructor.\n\t\t *\n\t\t * @member {Object}\n\t\t */\n\t\tthis.options = options;\n\n\t\t/**\n\t\t * An instance of the dropdown allowing to select a color from a grid.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:ui/dropdown/dropdown~DropdownView}\n\t\t */\n\t\tthis._dropdownView = this._createDropdownView();\n\n\t\t/**\n\t\t * An instance of the input allowing the user to type a color value.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView}\n\t\t */\n\t\tthis._inputView = this._createInputTextView();\n\n\t\t/**\n\t\t * The flag that indicates whether the user is still typing.\n\t\t * If set to true, it means that the text input field ({@link #_inputView}) still has the focus.\n\t\t * So, we should interrupt the user by replacing the input's value.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._stillTyping = false;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input-color',\n\t\t\t\t\tbind.if( 'hasError', 'ck-error' )\n\t\t\t\t],\n\t\t\t\tid: bind.to( 'id' ),\n\t\t\t\t'aria-invalid': bind.if( 'hasError', true ),\n\t\t\t\t'aria-describedby': bind.to( 'ariaDescribedById' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis._dropdownView,\n\t\t\t\tthis._inputView\n\t\t\t]\n\t\t} );\n\n\t\tthis.on( 'change:value', ( evt, name, inputValue ) => this._setInputValue( inputValue ) );\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis._inputView.focus();\n\t}\n\n\t/**\n\t * Creates and configures the {@link #_dropdownView}.\n\t *\n\t * @private\n\t */\n\t_createDropdownView() {\n\t\tconst locale = this.locale;\n\t\tconst t = locale.t;\n\t\tconst bind = this.bindTemplate;\n\t\tconst colorGrid = this._createColorGrid( locale );\n\t\tconst dropdown = createDropdown( locale );\n\t\tconst colorPreview = new View();\n\t\tconst removeColorButton = this._createRemoveColorButton();\n\n\t\tcolorPreview.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input-color__button__preview'\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tbackgroundColor: bind.to( 'value' )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: [ {\n\t\t\t\ttag: 'span',\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [\n\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t'ck-input-color__button__preview__no-color-indicator',\n\t\t\t\t\t\tbind.if( 'value', 'ck-hidden', value => value != '' )\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} ]\n\t\t} );\n\n\t\tdropdown.buttonView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-input-color__button'\n\t\t\t}\n\t\t} );\n\n\t\tdropdown.buttonView.children.add( colorPreview );\n\t\tdropdown.buttonView.tooltip = t( 'Color picker' );\n\n\t\tdropdown.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n\t\tdropdown.panelView.children.add( removeColorButton );\n\t\tdropdown.panelView.children.add( colorGrid );\n\t\tdropdown.bind( 'isEnabled' ).to( this, 'isReadOnly', value => !value );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Creates and configures an instance of {@link module:ui/inputtext/inputtextview~InputTextView}.\n\t *\n\t * @private\n\t * @returns {module:ui/inputtext/inputtextview~InputTextView} A configured instance to be set as {@link #_inputView}.\n\t */\n\t_createInputTextView() {\n\t\tconst locale = this.locale;\n\t\tconst inputView = new InputTextView( locale );\n\n\t\tinputView.extendTemplate( {\n\t\t\ton: {\n\t\t\t\tblur: inputView.bindTemplate.to( 'blur' )\n\t\t\t}\n\t\t} );\n\n\t\tinputView.value = this.value;\n\t\tinputView.bind( 'isReadOnly', 'hasError' ).to( this );\n\t\tthis.bind( 'isFocused', 'isEmpty' ).to( inputView );\n\n\t\tinputView.on( 'input', () => {\n\t\t\tconst inputValue = inputView.element.value;\n\t\t\t// Check if the value matches one of our defined colors' label.\n\t\t\tconst mappedColor = this.options.colorDefinitions.find( def => inputValue === def.label );\n\n\t\t\tthis._stillTyping = true;\n\t\t\tthis.value = mappedColor && mappedColor.color || inputValue;\n\t\t} );\n\n\t\tinputView.on( 'blur', () => {\n\t\t\tthis._stillTyping = false;\n\t\t\tthis._setInputValue( inputView.element.value );\n\t\t} );\n\n\t\tinputView.delegate( 'input' ).to( this );\n\n\t\treturn inputView;\n\t}\n\n\t/**\n\t * Creates and configures the button that clears the color.\n\t *\n\t * @private\n\t */\n\t_createRemoveColorButton() {\n\t\tconst locale = this.locale;\n\t\tconst t = locale.t;\n\t\tconst removeColorButton = new ButtonView( locale );\n\t\tconst defaultColor = this.options.defaultColorValue || '';\n\t\tconst removeColorButtonLabel = defaultColor ? t( 'Restore default' ) : t( 'Remove color' );\n\n\t\tremoveColorButton.class = 'ck-input-color__remove-color';\n\t\tremoveColorButton.withText = true;\n\t\tremoveColorButton.icon = icons.eraser;\n\t\tremoveColorButton.label = removeColorButtonLabel;\n\t\tremoveColorButton.on( 'execute', () => {\n\t\t\tthis.value = defaultColor;\n\t\t\tthis._dropdownView.isOpen = false;\n\t\t\tthis.fire( 'input' );\n\t\t} );\n\n\t\treturn removeColorButton;\n\t}\n\n\t/**\n\t * Creates and configures the color grid inside the {@link #_dropdownView}.\n\t *\n\t * @private\n\t */\n\t_createColorGrid( locale ) {\n\t\tconst colorGrid = new ColorGridView( locale, {\n\t\t\tcolorDefinitions: this.options.colorDefinitions,\n\t\t\tcolumns: this.options.columns\n\t\t} );\n\n\t\tcolorGrid.on( 'execute', ( evtData, data ) => {\n\t\t\tthis.value = data.value;\n\t\t\tthis._dropdownView.isOpen = false;\n\t\t\tthis.fire( 'input' );\n\t\t} );\n\t\tcolorGrid.bind( 'selectedColor' ).to( this, 'value' );\n\n\t\treturn colorGrid;\n\t}\n\n\t/**\n\t * Sets {@link #_inputView}'s value property to the color value or color label,\n\t * if there is one and the user is not typing.\n\t *\n\t * Handles cases like:\n\t *\n\t * * Someone picks the color in the grid.\n\t * * The color is set from the plugin level.\n\t *\n\t * @private\n\t * @param {String} inputValue Color value to be set.\n\t */\n\t_setInputValue( inputValue ) {\n\t\tif ( !this._stillTyping ) {\n\t\t\tconst normalizedInputValue = normalizeColor( inputValue );\n\t\t\t// Check if the value matches one of our defined colors.\n\t\t\tconst mappedColor = this.options.colorDefinitions.find( def => normalizedInputValue === normalizeColor( def.color ) );\n\n\t\t\tif ( mappedColor ) {\n\t\t\t\tthis._inputView.value = mappedColor.label;\n\t\t\t} else {\n\t\t\t\tthis._inputView.value = inputValue || '';\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Normalizes color value, by stripping extensive whitespace.\n// For example., transforms:\n// * `   rgb(  25 50    0 )` to `rgb(25 50 0)`,\n// * \"\\t  rgb(  25 ,  50,0 )\t\t\" to `rgb(25 50 0)`.\n//\n// @param {String} colorString The value to be normalized.\n// @returns {String}\nfunction normalizeColor( colorString ) {\n\treturn colorString\n\t\t// Remove any whitespace right after `(` or `,`.\n\t\t.replace( /([(,])\\s+/g, '$1' )\n\t\t// Remove any whitespace at the beginning or right before the end, `)`, `,`, or another whitespace.\n\t\t.replace( /^\\s+|\\s+(?=[),\\s]|$)/g, '' )\n\t\t// Then, replace `,` or whitespace with a single space.\n\t\t.replace( /,|\\s/g, ' ' );\n}\n"]},"metadata":{},"sourceType":"module"}