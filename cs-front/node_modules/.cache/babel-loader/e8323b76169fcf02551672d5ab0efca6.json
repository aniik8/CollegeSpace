{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils/ui/table-properties\n */\nimport { ButtonView, Model } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { isColor, isLength, isPercentage } from 'ckeditor5/src/engine';\nimport ColorInputView from '../../ui/colorinputview';\n\nconst isEmpty = val => val === '';\n/**\n * Returns an object containing pairs of CSS border style values and their localized UI\n * labels. Used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}.\n *\n * @param {module:utils/locale~Locale#t} t The \"t\" function provided by the editor\n * that is used to localize strings.\n * @returns {Object.<String,String>}\n */\n\n\nexport function getBorderStyleLabels(t) {\n  return {\n    none: t('None'),\n    solid: t('Solid'),\n    dotted: t('Dotted'),\n    dashed: t('Dashed'),\n    double: t('Double'),\n    groove: t('Groove'),\n    ridge: t('Ridge'),\n    inset: t('Inset'),\n    outset: t('Outset')\n  };\n}\n/**\n * Returns a localized error string that can be displayed next to color (background, border)\n * fields that have an invalid value.\n *\n * @param {module:utils/locale~Locale#t} t The \"t\" function provided by the editor\n * that is used to localize strings.\n * @returns {String}\n */\n\nexport function getLocalizedColorErrorText(t) {\n  return t('The color is invalid. Try \"#FF0000\" or \"rgb(255,0,0)\" or \"red\".');\n}\n/**\n * Returns a localized error string that can be displayed next to length (padding, border width)\n * fields that have an invalid value.\n *\n * @param {module:utils/locale~Locale#t} t The \"t\" function provided by the editor\n * that is used to localize strings.\n * @returns {String}\n */\n\nexport function getLocalizedLengthErrorText(t) {\n  return t('The value is invalid. Try \"10px\" or \"2em\" or simply \"2\".');\n}\n/**\n * Returns `true` when the passed value is an empty string or a valid CSS color expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isColor}.\n *\n * @param {String} value\n * @returns {Boolean}\n */\n\nexport function colorFieldValidator(value) {\n  value = value.trim();\n  return isEmpty(value) || isColor(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n * See {@link module:engine/view/styles/utils~isPercentage}.\n *\n * @param {String} value\n * @returns {Boolean}\n */\n\nexport function lengthFieldValidator(value) {\n  value = value.trim();\n  return isEmpty(value) || isNumberString(value) || isLength(value) || isPercentage(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n *\n * @param {String} value\n * @returns {Boolean}\n */\n\nexport function lineWidthFieldValidator(value) {\n  value = value.trim();\n  return isEmpty(value) || isNumberString(value) || isLength(value);\n}\n/**\n * Generates item definitions for a UI dropdown that allows changing the border style of a table or a table cell.\n *\n * @param {module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView|\n * module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} view\n * @param {String} defaultStyle The default border.\n * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>}\n */\n\nexport function getBorderStyleDefinitions(view, defaultStyle) {\n  const itemDefinitions = new Collection();\n  const styleLabels = getBorderStyleLabels(view.t);\n\n  for (const style in styleLabels) {\n    const definition = {\n      type: 'button',\n      model: new Model({\n        _borderStyleValue: style,\n        label: styleLabels[style],\n        withText: true\n      })\n    };\n\n    if (style === 'none') {\n      definition.model.bind('isOn').to(view, 'borderStyle', value => {\n        if (defaultStyle === 'none') {\n          return !value;\n        }\n\n        return value === style;\n      });\n    } else {\n      definition.model.bind('isOn').to(view, 'borderStyle', value => {\n        return value === style;\n      });\n    }\n\n    itemDefinitions.add(definition);\n  }\n\n  return itemDefinitions;\n}\n/**\n * A helper that fills a toolbar with buttons that:\n *\n * * have some labels,\n * * have some icons,\n * * set a certain UI view property value upon execution.\n *\n * @param {Object} options\n * @param {module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView|\n * module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} options.view\n * @param {Array.<String>} options.icons\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar\n * @param {Object.<String,String>} labels\n * @param {String} propertyName\n * @param {Function} nameToValue A function that maps a button name to a value. By default names are the same as values.\n */\n\nexport function fillToolbar(options) {\n  const {\n    view,\n    icons,\n    toolbar,\n    labels,\n    propertyName,\n    nameToValue,\n    defaultValue\n  } = options;\n\n  for (const name in labels) {\n    const button = new ButtonView(view.locale);\n    button.set({\n      label: labels[name],\n      icon: icons[name],\n      tooltip: labels[name]\n    }); // If specified the `nameToValue()` callback, map the value based on the option's name.\n\n    const buttonValue = nameToValue ? nameToValue(name) : name;\n    button.bind('isOn').to(view, propertyName, value => {\n      // `value` comes from `view[ propertyName ]`.\n      let valueToCompare = value; // If it's empty, and the `defaultValue` is specified, use it instead.\n\n      if (value === '' && defaultValue) {\n        valueToCompare = defaultValue;\n      }\n\n      return buttonValue === valueToCompare;\n    });\n    button.on('execute', () => {\n      view[propertyName] = buttonValue;\n    });\n    toolbar.items.add(button);\n  }\n}\n/**\n * A default color palette used by various user interfaces related to tables, for instance,\n * by {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI} or\n * {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI}.\n *\n * The color palette follows the {@link module:table/table~TableColorConfig table color configuration format}\n * and contains the following color definitions:\n *\n *\t\tconst defaultColors = [\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 0%)',\n *\t\t\t\tlabel: 'Black'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 30%)',\n *\t\t\t\tlabel: 'Dim grey'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 60%)',\n *\t\t\t\tlabel: 'Grey'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 90%)',\n *\t\t\t\tlabel: 'Light grey'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 100%)',\n *\t\t\t\tlabel: 'White',\n *\t\t\t\thasBorder: true\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 75%, 60%)',\n *\t\t\t\tlabel: 'Red'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(30, 75%, 60%)',\n *\t\t\t\tlabel: 'Orange'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(60, 75%, 60%)',\n *\t\t\t\tlabel: 'Yellow'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(90, 75%, 60%)',\n *\t\t\t\tlabel: 'Light green'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(120, 75%, 60%)',\n *\t\t\t\tlabel: 'Green'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(150, 75%, 60%)',\n *\t\t\t\tlabel: 'Aquamarine'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(180, 75%, 60%)',\n *\t\t\t\tlabel: 'Turquoise'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(210, 75%, 60%)',\n *\t\t\t\tlabel: 'Light blue'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(240, 75%, 60%)',\n *\t\t\t\tlabel: 'Blue'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(270, 75%, 60%)',\n *\t\t\t\tlabel: 'Purple'\n *\t\t\t}\n *\t\t];\n */\n\nexport const defaultColors = [{\n  color: 'hsl(0, 0%, 0%)',\n  label: 'Black'\n}, {\n  color: 'hsl(0, 0%, 30%)',\n  label: 'Dim grey'\n}, {\n  color: 'hsl(0, 0%, 60%)',\n  label: 'Grey'\n}, {\n  color: 'hsl(0, 0%, 90%)',\n  label: 'Light grey'\n}, {\n  color: 'hsl(0, 0%, 100%)',\n  label: 'White',\n  hasBorder: true\n}, {\n  color: 'hsl(0, 75%, 60%)',\n  label: 'Red'\n}, {\n  color: 'hsl(30, 75%, 60%)',\n  label: 'Orange'\n}, {\n  color: 'hsl(60, 75%, 60%)',\n  label: 'Yellow'\n}, {\n  color: 'hsl(90, 75%, 60%)',\n  label: 'Light green'\n}, {\n  color: 'hsl(120, 75%, 60%)',\n  label: 'Green'\n}, {\n  color: 'hsl(150, 75%, 60%)',\n  label: 'Aquamarine'\n}, {\n  color: 'hsl(180, 75%, 60%)',\n  label: 'Turquoise'\n}, {\n  color: 'hsl(210, 75%, 60%)',\n  label: 'Light blue'\n}, {\n  color: 'hsl(240, 75%, 60%)',\n  label: 'Blue'\n}, {\n  color: 'hsl(270, 75%, 60%)',\n  label: 'Purple'\n}];\n/**\n * Returns a creator for a color input with a label.\n *\n * For given options, it returns a function that creates an instance of a\n * {@link module:table/ui/colorinputview~ColorInputView color input} logically related to\n * a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in the DOM.\n *\n * The helper does the following:\n *\n * * It sets the color input `id` and `ariaDescribedById` attributes.\n * * It binds the color input `isReadOnly` to the labeled view.\n * * It binds the color input `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when the user starts typing in the color input.\n *\n * Usage:\n *\n *\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n *\t\t\tcolorConfig: [ ... ],\n *\t\t\tcolumns: 3,\n *\t\t} );\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, colorInputCreator );\n *\t\tconsole.log( labeledInputView.view ); // A color input instance.\n *\n * @private\n * @param options Color input options.\n * @param {module:table/table~TableColorConfig} options.colorConfig The configuration of the color palette\n * displayed in the input's dropdown.\n * @param {Number} options.columns The configuration of the number of columns the color palette consists of\n * in the input's dropdown.\n * @param {String} [options.defaultColorValue] If specified, the color input view will replace the \"Remove color\" button with\n * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n * @returns {Function}\n */\n\nexport function getLabeledColorInputCreator(options) {\n  return (labeledFieldView, viewUid, statusUid) => {\n    const inputView = new ColorInputView(labeledFieldView.locale, {\n      colorDefinitions: colorConfigToColorGridDefinitions(options.colorConfig),\n      columns: options.columns,\n      defaultColorValue: options.defaultColorValue\n    });\n    inputView.set({\n      id: viewUid,\n      ariaDescribedById: statusUid\n    });\n    inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n    inputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n    inputView.on('input', () => {\n      // UX: Make the error text disappear and disable the error indicator as the user\n      // starts fixing the errors.\n      labeledFieldView.errorText = null;\n    });\n    labeledFieldView.bind('isEmpty', 'isFocused').to(inputView);\n    return inputView;\n  };\n} // A simple helper method to detect number strings.\n// I allows full number notation, so omitting 0 is not allowed:\n\nfunction isNumberString(value) {\n  const parsedValue = parseFloat(value);\n  return !Number.isNaN(parsedValue) && value === String(parsedValue);\n} // @param {Array.<Object>} colorConfig\n// @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}\n\n\nfunction colorConfigToColorGridDefinitions(colorConfig) {\n  return colorConfig.map(item => ({\n    color: item.model,\n    label: item.label,\n    options: {\n      hasBorder: item.hasBorder\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js"],"names":["ButtonView","Model","Collection","isColor","isLength","isPercentage","ColorInputView","isEmpty","val","getBorderStyleLabels","t","none","solid","dotted","dashed","double","groove","ridge","inset","outset","getLocalizedColorErrorText","getLocalizedLengthErrorText","colorFieldValidator","value","trim","lengthFieldValidator","isNumberString","lineWidthFieldValidator","getBorderStyleDefinitions","view","defaultStyle","itemDefinitions","styleLabels","style","definition","type","model","_borderStyleValue","label","withText","bind","to","add","fillToolbar","options","icons","toolbar","labels","propertyName","nameToValue","defaultValue","name","button","locale","set","icon","tooltip","buttonValue","valueToCompare","on","items","defaultColors","color","hasBorder","getLabeledColorInputCreator","labeledFieldView","viewUid","statusUid","inputView","colorDefinitions","colorConfigToColorGridDefinitions","colorConfig","columns","defaultColorValue","id","ariaDescribedById","errorText","parsedValue","parseFloat","Number","isNaN","String","map","item"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils/ui/table-properties\n */\n\nimport { ButtonView, Model } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { isColor, isLength, isPercentage } from 'ckeditor5/src/engine';\n\nimport ColorInputView from '../../ui/colorinputview';\n\nconst isEmpty = val => val === '';\n\n/**\n * Returns an object containing pairs of CSS border style values and their localized UI\n * labels. Used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}.\n *\n * @param {module:utils/locale~Locale#t} t The \"t\" function provided by the editor\n * that is used to localize strings.\n * @returns {Object.<String,String>}\n */\nexport function getBorderStyleLabels( t ) {\n\treturn {\n\t\tnone: t( 'None' ),\n\t\tsolid: t( 'Solid' ),\n\t\tdotted: t( 'Dotted' ),\n\t\tdashed: t( 'Dashed' ),\n\t\tdouble: t( 'Double' ),\n\t\tgroove: t( 'Groove' ),\n\t\tridge: t( 'Ridge' ),\n\t\tinset: t( 'Inset' ),\n\t\toutset: t( 'Outset' )\n\t};\n}\n\n/**\n * Returns a localized error string that can be displayed next to color (background, border)\n * fields that have an invalid value.\n *\n * @param {module:utils/locale~Locale#t} t The \"t\" function provided by the editor\n * that is used to localize strings.\n * @returns {String}\n */\nexport function getLocalizedColorErrorText( t ) {\n\treturn t( 'The color is invalid. Try \"#FF0000\" or \"rgb(255,0,0)\" or \"red\".' );\n}\n\n/**\n * Returns a localized error string that can be displayed next to length (padding, border width)\n * fields that have an invalid value.\n *\n * @param {module:utils/locale~Locale#t} t The \"t\" function provided by the editor\n * that is used to localize strings.\n * @returns {String}\n */\nexport function getLocalizedLengthErrorText( t ) {\n\treturn t( 'The value is invalid. Try \"10px\" or \"2em\" or simply \"2\".' );\n}\n\n/**\n * Returns `true` when the passed value is an empty string or a valid CSS color expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isColor}.\n *\n * @param {String} value\n * @returns {Boolean}\n */\nexport function colorFieldValidator( value ) {\n\tvalue = value.trim();\n\n\treturn isEmpty( value ) || isColor( value );\n}\n\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n * See {@link module:engine/view/styles/utils~isPercentage}.\n *\n * @param {String} value\n * @returns {Boolean}\n */\nexport function lengthFieldValidator( value ) {\n\tvalue = value.trim();\n\n\treturn isEmpty( value ) || isNumberString( value ) || isLength( value ) || isPercentage( value );\n}\n\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n *\n * @param {String} value\n * @returns {Boolean}\n */\nexport function lineWidthFieldValidator( value ) {\n\tvalue = value.trim();\n\n\treturn isEmpty( value ) || isNumberString( value ) || isLength( value );\n}\n\n/**\n * Generates item definitions for a UI dropdown that allows changing the border style of a table or a table cell.\n *\n * @param {module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView|\n * module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} view\n * @param {String} defaultStyle The default border.\n * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>}\n */\nexport function getBorderStyleDefinitions( view, defaultStyle ) {\n\tconst itemDefinitions = new Collection();\n\tconst styleLabels = getBorderStyleLabels( view.t );\n\n\tfor ( const style in styleLabels ) {\n\t\tconst definition = {\n\t\t\ttype: 'button',\n\t\t\tmodel: new Model( {\n\t\t\t\t_borderStyleValue: style,\n\t\t\t\tlabel: styleLabels[ style ],\n\t\t\t\twithText: true\n\t\t\t} )\n\t\t};\n\n\t\tif ( style === 'none' ) {\n\t\t\tdefinition.model.bind( 'isOn' ).to( view, 'borderStyle', value => {\n\t\t\t\tif ( defaultStyle === 'none' ) {\n\t\t\t\t\treturn !value;\n\t\t\t\t}\n\n\t\t\t\treturn value === style;\n\t\t\t} );\n\t\t} else {\n\t\t\tdefinition.model.bind( 'isOn' ).to( view, 'borderStyle', value => {\n\t\t\t\treturn value === style;\n\t\t\t} );\n\t\t}\n\n\t\titemDefinitions.add( definition );\n\t}\n\n\treturn itemDefinitions;\n}\n\n/**\n * A helper that fills a toolbar with buttons that:\n *\n * * have some labels,\n * * have some icons,\n * * set a certain UI view property value upon execution.\n *\n * @param {Object} options\n * @param {module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView|\n * module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} options.view\n * @param {Array.<String>} options.icons\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar\n * @param {Object.<String,String>} labels\n * @param {String} propertyName\n * @param {Function} nameToValue A function that maps a button name to a value. By default names are the same as values.\n */\nexport function fillToolbar( options ) {\n\tconst { view, icons, toolbar, labels, propertyName, nameToValue, defaultValue } = options;\n\tfor ( const name in labels ) {\n\t\tconst button = new ButtonView( view.locale );\n\n\t\tbutton.set( {\n\t\t\tlabel: labels[ name ],\n\t\t\ticon: icons[ name ],\n\t\t\ttooltip: labels[ name ]\n\t\t} );\n\n\t\t// If specified the `nameToValue()` callback, map the value based on the option's name.\n\t\tconst buttonValue = nameToValue ? nameToValue( name ) : name;\n\n\t\tbutton.bind( 'isOn' ).to( view, propertyName, value => {\n\t\t\t// `value` comes from `view[ propertyName ]`.\n\t\t\tlet valueToCompare = value;\n\n\t\t\t// If it's empty, and the `defaultValue` is specified, use it instead.\n\t\t\tif ( value === '' && defaultValue ) {\n\t\t\t\tvalueToCompare = defaultValue;\n\t\t\t}\n\n\t\t\treturn buttonValue === valueToCompare;\n\t\t} );\n\n\t\tbutton.on( 'execute', () => {\n\t\t\tview[ propertyName ] = buttonValue;\n\t\t} );\n\n\t\ttoolbar.items.add( button );\n\t}\n}\n\n/**\n * A default color palette used by various user interfaces related to tables, for instance,\n * by {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI} or\n * {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI}.\n *\n * The color palette follows the {@link module:table/table~TableColorConfig table color configuration format}\n * and contains the following color definitions:\n *\n *\t\tconst defaultColors = [\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 0%)',\n *\t\t\t\tlabel: 'Black'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 30%)',\n *\t\t\t\tlabel: 'Dim grey'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 60%)',\n *\t\t\t\tlabel: 'Grey'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 90%)',\n *\t\t\t\tlabel: 'Light grey'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 0%, 100%)',\n *\t\t\t\tlabel: 'White',\n *\t\t\t\thasBorder: true\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(0, 75%, 60%)',\n *\t\t\t\tlabel: 'Red'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(30, 75%, 60%)',\n *\t\t\t\tlabel: 'Orange'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(60, 75%, 60%)',\n *\t\t\t\tlabel: 'Yellow'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(90, 75%, 60%)',\n *\t\t\t\tlabel: 'Light green'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(120, 75%, 60%)',\n *\t\t\t\tlabel: 'Green'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(150, 75%, 60%)',\n *\t\t\t\tlabel: 'Aquamarine'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(180, 75%, 60%)',\n *\t\t\t\tlabel: 'Turquoise'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(210, 75%, 60%)',\n *\t\t\t\tlabel: 'Light blue'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(240, 75%, 60%)',\n *\t\t\t\tlabel: 'Blue'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tcolor: 'hsl(270, 75%, 60%)',\n *\t\t\t\tlabel: 'Purple'\n *\t\t\t}\n *\t\t];\n */\nexport const defaultColors = [\n\t{\n\t\tcolor: 'hsl(0, 0%, 0%)',\n\t\tlabel: 'Black'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 30%)',\n\t\tlabel: 'Dim grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 60%)',\n\t\tlabel: 'Grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 90%)',\n\t\tlabel: 'Light grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 100%)',\n\t\tlabel: 'White',\n\t\thasBorder: true\n\t},\n\t{\n\t\tcolor: 'hsl(0, 75%, 60%)',\n\t\tlabel: 'Red'\n\t},\n\t{\n\t\tcolor: 'hsl(30, 75%, 60%)',\n\t\tlabel: 'Orange'\n\t},\n\t{\n\t\tcolor: 'hsl(60, 75%, 60%)',\n\t\tlabel: 'Yellow'\n\t},\n\t{\n\t\tcolor: 'hsl(90, 75%, 60%)',\n\t\tlabel: 'Light green'\n\t},\n\t{\n\t\tcolor: 'hsl(120, 75%, 60%)',\n\t\tlabel: 'Green'\n\t},\n\t{\n\t\tcolor: 'hsl(150, 75%, 60%)',\n\t\tlabel: 'Aquamarine'\n\t},\n\t{\n\t\tcolor: 'hsl(180, 75%, 60%)',\n\t\tlabel: 'Turquoise'\n\t},\n\t{\n\t\tcolor: 'hsl(210, 75%, 60%)',\n\t\tlabel: 'Light blue'\n\t},\n\t{\n\t\tcolor: 'hsl(240, 75%, 60%)',\n\t\tlabel: 'Blue'\n\t},\n\t{\n\t\tcolor: 'hsl(270, 75%, 60%)',\n\t\tlabel: 'Purple'\n\t}\n];\n\n/**\n * Returns a creator for a color input with a label.\n *\n * For given options, it returns a function that creates an instance of a\n * {@link module:table/ui/colorinputview~ColorInputView color input} logically related to\n * a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in the DOM.\n *\n * The helper does the following:\n *\n * * It sets the color input `id` and `ariaDescribedById` attributes.\n * * It binds the color input `isReadOnly` to the labeled view.\n * * It binds the color input `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when the user starts typing in the color input.\n *\n * Usage:\n *\n *\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n *\t\t\tcolorConfig: [ ... ],\n *\t\t\tcolumns: 3,\n *\t\t} );\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, colorInputCreator );\n *\t\tconsole.log( labeledInputView.view ); // A color input instance.\n *\n * @private\n * @param options Color input options.\n * @param {module:table/table~TableColorConfig} options.colorConfig The configuration of the color palette\n * displayed in the input's dropdown.\n * @param {Number} options.columns The configuration of the number of columns the color palette consists of\n * in the input's dropdown.\n * @param {String} [options.defaultColorValue] If specified, the color input view will replace the \"Remove color\" button with\n * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n * @returns {Function}\n */\nexport function getLabeledColorInputCreator( options ) {\n\treturn ( labeledFieldView, viewUid, statusUid ) => {\n\t\tconst inputView = new ColorInputView( labeledFieldView.locale, {\n\t\t\tcolorDefinitions: colorConfigToColorGridDefinitions( options.colorConfig ),\n\t\t\tcolumns: options.columns,\n\t\t\tdefaultColorValue: options.defaultColorValue\n\t\t} );\n\n\t\tinputView.set( {\n\t\t\tid: viewUid,\n\t\t\tariaDescribedById: statusUid\n\t\t} );\n\n\t\tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n\t\tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n\n\t\tinputView.on( 'input', () => {\n\t\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t\t// starts fixing the errors.\n\t\t\tlabeledFieldView.errorText = null;\n\t\t} );\n\n\t\tlabeledFieldView.bind( 'isEmpty', 'isFocused' ).to( inputView );\n\n\t\treturn inputView;\n\t};\n}\n\n// A simple helper method to detect number strings.\n// I allows full number notation, so omitting 0 is not allowed:\nfunction isNumberString( value ) {\n\tconst parsedValue = parseFloat( value );\n\n\treturn !Number.isNaN( parsedValue ) && value === String( parsedValue );\n}\n\n// @param {Array.<Object>} colorConfig\n// @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}\nfunction colorConfigToColorGridDefinitions( colorConfig ) {\n\treturn colorConfig.map( item => ( {\n\t\tcolor: item.model,\n\t\tlabel: item.label,\n\t\toptions: {\n\t\t\thasBorder: item.hasBorder\n\t\t}\n\t} ) );\n}\n"]},"metadata":{},"sourceType":"module"}