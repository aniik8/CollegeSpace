{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module special-characters/ui/characterinfoview\n */\nimport { View } from 'ckeditor5/src/ui';\nimport '../../theme/characterinfo.css';\n/**\n * The view displaying detailed information about a special character glyph, e.g. upon\n * hovering it with a mouse.\n *\n * @extends module:ui/view~View\n */\n\nexport default class CharacterInfoView extends View {\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    /**\n     * The character whose information is displayed by the view. For instance,\n     * \"∑\" or \"¿\".\n     *\n     * @observable\n     * @member {String|null} #character\n     */\n\n    this.set('character', null);\n    /**\n     * The name of the {@link #character}. For instance,\n     * \"N-ary summation\" or \"Inverted question mark\".\n     *\n     * @observable\n     * @member {String|null} #name\n     */\n\n    this.set('name', null);\n    /**\n     * The \"Unicode string\" of the {@link #character}. For instance,\n     * \"U+0061\".\n     *\n     * @observable\n     * @readonly\n     * @member {String} #code\n     */\n\n    this.bind('code').to(this, 'character', characterToUnicodeString);\n    this.setTemplate({\n      tag: 'div',\n      children: [{\n        tag: 'span',\n        attributes: {\n          class: ['ck-character-info__name']\n        },\n        children: [{\n          // Note: ZWSP to prevent vertical collapsing.\n          text: bind.to('name', name => name ? name : '\\u200B')\n        }]\n      }, {\n        tag: 'span',\n        attributes: {\n          class: ['ck-character-info__code']\n        },\n        children: [{\n          text: bind.to('code')\n        }]\n      }],\n      attributes: {\n        class: ['ck', 'ck-character-info']\n      }\n    });\n  }\n\n} // Converts a character into a \"Unicode string\", for instance:\n//\n//\t\"$\" -> \"U+0024\"\n//\n// Returns an empty string when the character is `null`.\n//\n// @param {String} character\n// @returns {String}\n\nfunction characterToUnicodeString(character) {\n  if (character === null) {\n    return '';\n  }\n\n  const hexCode = character.codePointAt(0).toString(16);\n  return 'U+' + ('0000' + hexCode).slice(-4);\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-special-characters/src/ui/characterinfoview.js"],"names":["View","CharacterInfoView","constructor","locale","bind","bindTemplate","set","to","characterToUnicodeString","setTemplate","tag","children","attributes","class","text","name","character","hexCode","codePointAt","toString","slice"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,IAAT,QAAqB,kBAArB;AAEA,OAAO,+BAAP;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,SAAgCD,IAAhC,CAAqC;AACnDE,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA,UAAMC,IAAI,GAAG,KAAKC,YAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,GAAL,CAAU,WAAV,EAAuB,IAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKA,GAAL,CAAU,MAAV,EAAkB,IAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKF,IAAL,CAAW,MAAX,EAAoBG,EAApB,CAAwB,IAAxB,EAA8B,WAA9B,EAA2CC,wBAA3C;AAEA,SAAKC,WAAL,CAAkB;AACjBC,MAAAA,GAAG,EAAE,KADY;AAEjBC,MAAAA,QAAQ,EAAE,CACT;AACCD,QAAAA,GAAG,EAAE,MADN;AAECE,QAAAA,UAAU,EAAE;AACXC,UAAAA,KAAK,EAAE,CACN,yBADM;AADI,SAFb;AAOCF,QAAAA,QAAQ,EAAE,CACT;AACC;AACAG,UAAAA,IAAI,EAAEV,IAAI,CAACG,EAAL,CAAS,MAAT,EAAiBQ,IAAI,IAAIA,IAAI,GAAGA,IAAH,GAAU,QAAvC;AAFP,SADS;AAPX,OADS,EAeT;AACCL,QAAAA,GAAG,EAAE,MADN;AAECE,QAAAA,UAAU,EAAE;AACXC,UAAAA,KAAK,EAAE,CACN,yBADM;AADI,SAFb;AAOCF,QAAAA,QAAQ,EAAE,CACT;AACCG,UAAAA,IAAI,EAAEV,IAAI,CAACG,EAAL,CAAS,MAAT;AADP,SADS;AAPX,OAfS,CAFO;AA+BjBK,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE,CACN,IADM,EAEN,mBAFM;AADI;AA/BK,KAAlB;AAsCA;;AAxEkD,C,CA2EpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASL,wBAAT,CAAmCQ,SAAnC,EAA+C;AAC9C,MAAKA,SAAS,KAAK,IAAnB,EAA0B;AACzB,WAAO,EAAP;AACA;;AAED,QAAMC,OAAO,GAAGD,SAAS,CAACE,WAAV,CAAuB,CAAvB,EAA2BC,QAA3B,CAAqC,EAArC,CAAhB;AAEA,SAAO,OAAO,CAAE,SAASF,OAAX,EAAqBG,KAArB,CAA4B,CAAC,CAA7B,CAAd;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module special-characters/ui/characterinfoview\n */\n\nimport { View } from 'ckeditor5/src/ui';\n\nimport '../../theme/characterinfo.css';\n\n/**\n * The view displaying detailed information about a special character glyph, e.g. upon\n * hovering it with a mouse.\n *\n * @extends module:ui/view~View\n */\nexport default class CharacterInfoView extends View {\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The character whose information is displayed by the view. For instance,\n\t\t * \"∑\" or \"¿\".\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #character\n\t\t */\n\t\tthis.set( 'character', null );\n\n\t\t/**\n\t\t * The name of the {@link #character}. For instance,\n\t\t * \"N-ary summation\" or \"Inverted question mark\".\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #name\n\t\t */\n\t\tthis.set( 'name', null );\n\n\t\t/**\n\t\t * The \"Unicode string\" of the {@link #character}. For instance,\n\t\t * \"U+0061\".\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {String} #code\n\t\t */\n\t\tthis.bind( 'code' ).to( this, 'character', characterToUnicodeString );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck-character-info__name'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Note: ZWSP to prevent vertical collapsing.\n\t\t\t\t\t\t\ttext: bind.to( 'name', name => name ? name : '\\u200B' )\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck-character-info__code'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'code' )\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-character-info'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Converts a character into a \"Unicode string\", for instance:\n//\n//\t\"$\" -> \"U+0024\"\n//\n// Returns an empty string when the character is `null`.\n//\n// @param {String} character\n// @returns {String}\nfunction characterToUnicodeString( character ) {\n\tif ( character === null ) {\n\t\treturn '';\n\t}\n\n\tconst hexCode = character.codePointAt( 0 ).toString( 16 );\n\n\treturn 'U+' + ( '0000' + hexCode ).slice( -4 );\n}\n"]},"metadata":{},"sourceType":"module"}