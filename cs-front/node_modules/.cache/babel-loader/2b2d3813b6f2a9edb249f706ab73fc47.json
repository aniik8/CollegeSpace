{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indentblock\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addMarginRules } from 'ckeditor5/src/engine';\nimport IndentBlockCommand from './indentblockcommand';\nimport IndentUsingOffset from './indentcommandbehavior/indentusingoffset';\nimport IndentUsingClasses from './indentcommandbehavior/indentusingclasses';\nconst DEFAULT_ELEMENTS = ['paragraph', 'heading1', 'heading2', 'heading3', 'heading4', 'heading5', 'heading6'];\n/**\n * The block indentation feature.\n *\n * It registers the `'indentBlock'` and `'outdentBlock'` commands.\n *\n * If the plugin {@link module:indent/indent~Indent} is defined, it also attaches the `'indentBlock'` and `'outdentBlock'` commands to\n * the `'indent'` and `'outdent'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class IndentBlock extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    editor.config.define('indentBlock', {\n      offset: 40,\n      unit: 'px'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'IndentBlock';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const configuration = editor.config.get('indentBlock');\n    const useOffsetConfig = !configuration.classes || !configuration.classes.length;\n    const indentConfig = Object.assign({\n      direction: 'forward'\n    }, configuration);\n    const outdentConfig = Object.assign({\n      direction: 'backward'\n    }, configuration);\n\n    if (useOffsetConfig) {\n      editor.data.addStyleProcessorRules(addMarginRules);\n\n      this._setupConversionUsingOffset(editor.conversion);\n\n      editor.commands.add('indentBlock', new IndentBlockCommand(editor, new IndentUsingOffset(indentConfig)));\n      editor.commands.add('outdentBlock', new IndentBlockCommand(editor, new IndentUsingOffset(outdentConfig)));\n    } else {\n      this._setupConversionUsingClasses(configuration.classes);\n\n      editor.commands.add('indentBlock', new IndentBlockCommand(editor, new IndentUsingClasses(indentConfig)));\n      editor.commands.add('outdentBlock', new IndentBlockCommand(editor, new IndentUsingClasses(outdentConfig)));\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const indentCommand = editor.commands.get('indent');\n    const outdentCommand = editor.commands.get('outdent'); // Enable block indentation to heading configuration options. If it is not defined enable in paragraph and default headings.\n\n    const options = editor.config.get('heading.options');\n    const configuredElements = options && options.map(option => option.model);\n    const knownElements = configuredElements || DEFAULT_ELEMENTS;\n    knownElements.forEach(elementName => {\n      if (schema.isRegistered(elementName)) {\n        schema.extend(elementName, {\n          allowAttributes: 'blockIndent'\n        });\n      }\n    });\n    schema.setAttributeProperties('blockIndent', {\n      isFormatting: true\n    });\n    indentCommand.registerChildCommand(editor.commands.get('indentBlock'));\n    outdentCommand.registerChildCommand(editor.commands.get('outdentBlock'));\n  }\n  /**\n   * Setups conversion for using offset indents.\n   *\n   * @private\n   */\n\n\n  _setupConversionUsingOffset() {\n    const conversion = this.editor.conversion;\n    const locale = this.editor.locale;\n    const marginProperty = locale.contentLanguageDirection === 'rtl' ? 'margin-right' : 'margin-left';\n    conversion.for('upcast').attributeToAttribute({\n      view: {\n        styles: {\n          [marginProperty]: /[\\s\\S]+/\n        }\n      },\n      model: {\n        key: 'blockIndent',\n        value: viewElement => viewElement.getStyle(marginProperty)\n      }\n    });\n    conversion.for('downcast').attributeToAttribute({\n      model: 'blockIndent',\n      view: modelAttributeValue => {\n        return {\n          key: 'style',\n          value: {\n            [marginProperty]: modelAttributeValue\n          }\n        };\n      }\n    });\n  }\n  /**\n   * Setups conversion for using classes.\n   *\n   * @param {Array.<String>} classes\n   * @private\n   */\n\n\n  _setupConversionUsingClasses(classes) {\n    const definition = {\n      model: {\n        key: 'blockIndent',\n        values: []\n      },\n      view: {}\n    };\n\n    for (const className of classes) {\n      definition.model.values.push(className);\n      definition.view[className] = {\n        key: 'class',\n        value: [className]\n      };\n    }\n\n    this.editor.conversion.attributeToAttribute(definition);\n  }\n\n}\n/**\n * The configuration of the {@link module:indent/indentblock~IndentBlock block indentation feature}.\n *\n * Read more in {@link module:indent/indentblock~IndentBlockConfig}.\n *\n * @member {module:indent/indentblock~IndentBlockConfig} module:core/editor/editorconfig~EditorConfig#indentBlock\n */\n\n/**\n * The configuration of the block indentation feature.\n *\n * If no {@link module:indent/indentblock~IndentBlockConfig#classes} are set, the block indentation feature will use\n * {@link module:indent/indentblock~IndentBlockConfig#offset} and {@link module:indent/indentblock~IndentBlockConfig#unit} to\n * create indentation steps.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tindentBlock: {\n *\t\t\t\t\toffset: 2,\n *\t\t\t\t\tunit: 'em'\n * \t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Alternatively, the block indentation feature may set one of defined {@link module:indent/indentblock~IndentBlockConfig#classes} as\n * indentation steps:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tindentBlock: {\n *\t\t\t\t\tclasses: [\n *\t\t\t\t\t\t'indent-a', // The first step - smallest indentation.\n *\t\t\t\t\t\t'indent-b',\n *\t\t\t\t\t\t'indent-c',\n *\t\t\t\t\t\t'indent-d',\n *\t\t\t\t\t\t'indent-e' // The last step - biggest indentation.\n *\t\t\t\t\t]\n * \t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * In the example above only 5 indentation steps will be available.\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface IndentBlockConfig\n */\n\n/**\n * The size of indentation {@link module:indent/indentblock~IndentBlockConfig#unit units} for each indentation step.\n *\n * @default 40\n * @member {Number} module:indent/indentblock~IndentBlockConfig#offset\n */\n\n/**\n * The unit used for indentation {@link module:indent/indentblock~IndentBlockConfig#offset}.\n *\n * @default 'px'\n * @member {String} module:indent/indentblock~IndentBlockConfig#unit\n */\n\n/**\n * An optional list of classes to use for indenting the editor content. If not set or set to an empty array, no classes will be used.\n * The {@link module:indent/indentblock~IndentBlockConfig#unit `indentBlock.unit`} and\n * {@link module:indent/indentblock~IndentBlockConfig#offset `indentBlock.offset`} properties will be used instead.\n *\n * @default undefined\n * @member {Array.<String>|undefined} module:indent/indentblock~IndentBlockConfig#classes\n */","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-indent/src/indentblock.js"],"names":["Plugin","addMarginRules","IndentBlockCommand","IndentUsingOffset","IndentUsingClasses","DEFAULT_ELEMENTS","IndentBlock","constructor","editor","config","define","offset","unit","pluginName","init","configuration","get","useOffsetConfig","classes","length","indentConfig","Object","assign","direction","outdentConfig","data","addStyleProcessorRules","_setupConversionUsingOffset","conversion","commands","add","_setupConversionUsingClasses","afterInit","schema","model","indentCommand","outdentCommand","options","configuredElements","map","option","knownElements","forEach","elementName","isRegistered","extend","allowAttributes","setAttributeProperties","isFormatting","registerChildCommand","locale","marginProperty","contentLanguageDirection","for","attributeToAttribute","view","styles","key","value","viewElement","getStyle","modelAttributeValue","definition","values","className","push"],"mappings":"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AM,EAAE;AAFF,OADW;AAKlBR,MAAAA,IAAI,EAAE;AALY,KAAnB;;AAQA,SAAM,MAAMS,SAAZ,IAAyB9C,OAAzB,EAAmC;AAClC4C,MAAAA,UAAU,CAAC5B,KAAX,CAAiB6B,MAAjB,CAAwBE,IAAxB,CAA8BD,SAA9B;AACAF,MAAAA,UAAU,CAACP,IAAX,CAAiBS,SAAjB,IAA+B;AAC9BP,QAAAA,GAAG,EAAE,OADyB;AAE9BC,QAAAA,KAAK,EAAE,CAAEM,SAAF;AAFuB,OAA/B;AAIA;;AAED,SAAKxD,MAAL,CAAYoB,UAAZ,CAAuB0B,oBAAvB,CAA6CQ,UAA7C;AACA;;AAnI8C;AAsIhD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indentblock\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addMarginRules } from 'ckeditor5/src/engine';\n\nimport IndentBlockCommand from './indentblockcommand';\nimport IndentUsingOffset from './indentcommandbehavior/indentusingoffset';\nimport IndentUsingClasses from './indentcommandbehavior/indentusingclasses';\n\nconst DEFAULT_ELEMENTS = [ 'paragraph', 'heading1', 'heading2', 'heading3', 'heading4', 'heading5', 'heading6' ];\n\n/**\n * The block indentation feature.\n *\n * It registers the `'indentBlock'` and `'outdentBlock'` commands.\n *\n * If the plugin {@link module:indent/indent~Indent} is defined, it also attaches the `'indentBlock'` and `'outdentBlock'` commands to\n * the `'indent'` and `'outdent'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class IndentBlock extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'indentBlock', {\n\t\t\toffset: 40,\n\t\t\tunit: 'px'\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'IndentBlock';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst configuration = editor.config.get( 'indentBlock' );\n\n\t\tconst useOffsetConfig = !configuration.classes || !configuration.classes.length;\n\n\t\tconst indentConfig = Object.assign( { direction: 'forward' }, configuration );\n\t\tconst outdentConfig = Object.assign( { direction: 'backward' }, configuration );\n\n\t\tif ( useOffsetConfig ) {\n\t\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t\t\tthis._setupConversionUsingOffset( editor.conversion );\n\n\t\t\teditor.commands.add( 'indentBlock', new IndentBlockCommand( editor, new IndentUsingOffset( indentConfig ) ) );\n\t\t\teditor.commands.add( 'outdentBlock', new IndentBlockCommand( editor, new IndentUsingOffset( outdentConfig ) ) );\n\t\t} else {\n\t\t\tthis._setupConversionUsingClasses( configuration.classes );\n\t\t\teditor.commands.add( 'indentBlock', new IndentBlockCommand( editor, new IndentUsingClasses( indentConfig ) ) );\n\t\t\teditor.commands.add( 'outdentBlock', new IndentBlockCommand( editor, new IndentUsingClasses( outdentConfig ) ) );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\n\t\tconst indentCommand = editor.commands.get( 'indent' );\n\t\tconst outdentCommand = editor.commands.get( 'outdent' );\n\n\t\t// Enable block indentation to heading configuration options. If it is not defined enable in paragraph and default headings.\n\t\tconst options = editor.config.get( 'heading.options' );\n\t\tconst configuredElements = options && options.map( option => option.model );\n\t\tconst knownElements = configuredElements || DEFAULT_ELEMENTS;\n\n\t\tknownElements.forEach( elementName => {\n\t\t\tif ( schema.isRegistered( elementName ) ) {\n\t\t\t\tschema.extend( elementName, { allowAttributes: 'blockIndent' } );\n\t\t\t}\n\t\t} );\n\n\t\tschema.setAttributeProperties( 'blockIndent', { isFormatting: true } );\n\n\t\tindentCommand.registerChildCommand( editor.commands.get( 'indentBlock' ) );\n\t\toutdentCommand.registerChildCommand( editor.commands.get( 'outdentBlock' ) );\n\t}\n\n\t/**\n\t * Setups conversion for using offset indents.\n\t *\n\t * @private\n\t */\n\t_setupConversionUsingOffset() {\n\t\tconst conversion = this.editor.conversion;\n\t\tconst locale = this.editor.locale;\n\t\tconst marginProperty = locale.contentLanguageDirection === 'rtl' ? 'margin-right' : 'margin-left';\n\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tstyles: {\n\t\t\t\t\t[ marginProperty ]: /[\\s\\S]+/\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'blockIndent',\n\t\t\t\tvalue: viewElement => viewElement.getStyle( marginProperty )\n\t\t\t}\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\tmodel: 'blockIndent',\n\t\t\tview: modelAttributeValue => {\n\t\t\t\treturn {\n\t\t\t\t\tkey: 'style',\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\t[ marginProperty ]: modelAttributeValue\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Setups conversion for using classes.\n\t *\n\t * @param {Array.<String>} classes\n\t * @private\n\t */\n\t_setupConversionUsingClasses( classes ) {\n\t\tconst definition = {\n\t\t\tmodel: {\n\t\t\t\tkey: 'blockIndent',\n\t\t\t\tvalues: []\n\t\t\t},\n\t\t\tview: {}\n\t\t};\n\n\t\tfor ( const className of classes ) {\n\t\t\tdefinition.model.values.push( className );\n\t\t\tdefinition.view[ className ] = {\n\t\t\t\tkey: 'class',\n\t\t\t\tvalue: [ className ]\n\t\t\t};\n\t\t}\n\n\t\tthis.editor.conversion.attributeToAttribute( definition );\n\t}\n}\n\n/**\n * The configuration of the {@link module:indent/indentblock~IndentBlock block indentation feature}.\n *\n * Read more in {@link module:indent/indentblock~IndentBlockConfig}.\n *\n * @member {module:indent/indentblock~IndentBlockConfig} module:core/editor/editorconfig~EditorConfig#indentBlock\n */\n\n/**\n * The configuration of the block indentation feature.\n *\n * If no {@link module:indent/indentblock~IndentBlockConfig#classes} are set, the block indentation feature will use\n * {@link module:indent/indentblock~IndentBlockConfig#offset} and {@link module:indent/indentblock~IndentBlockConfig#unit} to\n * create indentation steps.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tindentBlock: {\n *\t\t\t\t\toffset: 2,\n *\t\t\t\t\tunit: 'em'\n * \t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Alternatively, the block indentation feature may set one of defined {@link module:indent/indentblock~IndentBlockConfig#classes} as\n * indentation steps:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tindentBlock: {\n *\t\t\t\t\tclasses: [\n *\t\t\t\t\t\t'indent-a', // The first step - smallest indentation.\n *\t\t\t\t\t\t'indent-b',\n *\t\t\t\t\t\t'indent-c',\n *\t\t\t\t\t\t'indent-d',\n *\t\t\t\t\t\t'indent-e' // The last step - biggest indentation.\n *\t\t\t\t\t]\n * \t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * In the example above only 5 indentation steps will be available.\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface IndentBlockConfig\n */\n\n/**\n * The size of indentation {@link module:indent/indentblock~IndentBlockConfig#unit units} for each indentation step.\n *\n * @default 40\n * @member {Number} module:indent/indentblock~IndentBlockConfig#offset\n */\n\n/**\n * The unit used for indentation {@link module:indent/indentblock~IndentBlockConfig#offset}.\n *\n * @default 'px'\n * @member {String} module:indent/indentblock~IndentBlockConfig#unit\n */\n\n/**\n * An optional list of classes to use for indenting the editor content. If not set or set to an empty array, no classes will be used.\n * The {@link module:indent/indentblock~IndentBlockConfig#unit `indentBlock.unit`} and\n * {@link module:indent/indentblock~IndentBlockConfig#offset `indentBlock.offset`} properties will be used instead.\n *\n * @default undefined\n * @member {Array.<String>|undefined} module:indent/indentblock~IndentBlockConfig#classes\n */\n"]},"metadata":{},"sourceType":"module"}