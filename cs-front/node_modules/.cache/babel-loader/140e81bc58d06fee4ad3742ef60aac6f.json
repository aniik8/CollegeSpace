{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-decoupled/decouplededitorui\n */\nimport { EditorUI } from 'ckeditor5/src/core';\nimport { enableToolbarKeyboardFocus } from 'ckeditor5/src/ui';\nimport { enablePlaceholder } from 'ckeditor5/src/engine';\n/**\n * The decoupled editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\n\nexport default class DecoupledEditorUI extends EditorUI {\n  /**\n   * Creates an instance of the decoupled editor UI class.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n   */\n  constructor(editor, view) {\n    super(editor);\n    /**\n     * The main (top–most) view of the editor UI.\n     *\n     * @readonly\n     * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n     */\n\n    this.view = view;\n  }\n  /**\n   * Initializes the UI.\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const view = this.view;\n    const editingView = editor.editing.view;\n    const editable = view.editable;\n    const editingRoot = editingView.document.getRoot(); // The editable UI and editing root should share the same name. Then name is used\n    // to recognize the particular editable, for instance in ARIA attributes.\n\n    view.editable.name = editingRoot.rootName;\n    view.render(); // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n    // But it can be available earlier if a DOM element has been passed to DecoupledEditor.create().\n\n    const editableElement = editable.element; // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n    // editable areas (roots) but the decoupled editor has only one.\n\n    this.setEditableElement(editable.name, editableElement); // Let the global focus tracker know that the editable UI element is focusable and\n    // belongs to the editor. From now on, the focus tracker will sustain the editor focus\n    // as long as the editable is focused (e.g. the user is typing).\n\n    this.focusTracker.add(editableElement); // Let the editable UI element respond to the changes in the global editor focus\n    // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n    // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n    // as they have focus, the editable should act like it is focused too (although technically\n    // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n    // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n    // toolbar gets focused.\n\n    view.editable.bind('isFocused').to(this.focusTracker); // Bind the editable UI element to the editing view, making it an end– and entry–point\n    // of the editor's engine. This is where the engine meets the UI.\n\n    editingView.attachDomRoot(editableElement);\n\n    this._initPlaceholder();\n\n    this._initToolbar();\n\n    this.fire('ready');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    const view = this.view;\n    const editingView = this.editor.editing.view;\n    editingView.detachDomRoot(view.editable.name);\n    view.destroy();\n    super.destroy();\n  }\n  /**\n   * Initializes the inline editor toolbar and its panel.\n   *\n   * @private\n   */\n\n\n  _initToolbar() {\n    const editor = this.editor;\n    const view = this.view;\n    const toolbar = view.toolbar;\n    toolbar.fillFromConfig(editor.config.get('toolbar'), this.componentFactory);\n    enableToolbarKeyboardFocus({\n      origin: editor.editing.view,\n      originFocusTracker: this.focusTracker,\n      originKeystrokeHandler: editor.keystrokes,\n      toolbar\n    });\n  }\n  /**\n   * Enable the placeholder text on the editing root, if any was configured.\n   *\n   * @private\n   */\n\n\n  _initPlaceholder() {\n    const editor = this.editor;\n    const editingView = editor.editing.view;\n    const editingRoot = editingView.document.getRoot();\n    const sourceElement = editor.sourceElement;\n    const placeholderText = editor.config.get('placeholder') || sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute('placeholder');\n\n    if (placeholderText) {\n      enablePlaceholder({\n        view: editingView,\n        element: editingRoot,\n        text: placeholderText,\n        isDirectHost: false,\n        keepOnFocus: true\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-editor-decoupled/src/decouplededitorui.js"],"names":["EditorUI","enableToolbarKeyboardFocus","enablePlaceholder","DecoupledEditorUI","constructor","editor","view","init","editingView","editing","editable","editingRoot","document","getRoot","name","rootName","render","editableElement","element","setEditableElement","focusTracker","add","bind","to","attachDomRoot","_initPlaceholder","_initToolbar","fire","destroy","detachDomRoot","toolbar","fillFromConfig","config","get","componentFactory","origin","originFocusTracker","originKeystrokeHandler","keystrokes","sourceElement","placeholderText","tagName","toLowerCase","getAttribute","text","isDirectHost","keepOnFocus"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,oBAAzB;AACA,SAASC,0BAAT,QAA2C,kBAA3C;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,SAAgCH,QAAhC,CAAyC;AACvD;AACD;AACA;AACA;AACA;AACA;AACCI,EAAAA,WAAW,CAAEC,MAAF,EAAUC,IAAV,EAAiB;AAC3B,UAAOD,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,IAAL,GAAYA,IAAZ;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMF,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAME,WAAW,GAAGH,MAAM,CAACI,OAAP,CAAeH,IAAnC;AACA,UAAMI,QAAQ,GAAGJ,IAAI,CAACI,QAAtB;AACA,UAAMC,WAAW,GAAGH,WAAW,CAACI,QAAZ,CAAqBC,OAArB,EAApB,CALM,CAON;AACA;;AACAP,IAAAA,IAAI,CAACI,QAAL,CAAcI,IAAd,GAAqBH,WAAW,CAACI,QAAjC;AAEAT,IAAAA,IAAI,CAACU,MAAL,GAXM,CAaN;AACA;;AACA,UAAMC,eAAe,GAAGP,QAAQ,CAACQ,OAAjC,CAfM,CAiBN;AACA;;AACA,SAAKC,kBAAL,CAAyBT,QAAQ,CAACI,IAAlC,EAAwCG,eAAxC,EAnBM,CAqBN;AACA;AACA;;AACA,SAAKG,YAAL,CAAkBC,GAAlB,CAAuBJ,eAAvB,EAxBM,CA0BN;AACA;AACA;AACA;AACA;AACA;AACA;;AACAX,IAAAA,IAAI,CAACI,QAAL,CAAcY,IAAd,CAAoB,WAApB,EAAkCC,EAAlC,CAAsC,KAAKH,YAA3C,EAjCM,CAmCN;AACA;;AACAZ,IAAAA,WAAW,CAACgB,aAAZ,CAA2BP,eAA3B;;AAEA,SAAKQ,gBAAL;;AACA,SAAKC,YAAL;;AACA,SAAKC,IAAL,CAAW,OAAX;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMtB,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAME,WAAW,GAAG,KAAKH,MAAL,CAAYI,OAAZ,CAAoBH,IAAxC;AAEAE,IAAAA,WAAW,CAACqB,aAAZ,CAA2BvB,IAAI,CAACI,QAAL,CAAcI,IAAzC;AACAR,IAAAA,IAAI,CAACsB,OAAL;AAEA,UAAMA,OAAN;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCF,EAAAA,YAAY,GAAG;AACd,UAAMrB,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAMwB,OAAO,GAAGxB,IAAI,CAACwB,OAArB;AAEAA,IAAAA,OAAO,CAACC,cAAR,CAAwB1B,MAAM,CAAC2B,MAAP,CAAcC,GAAd,CAAmB,SAAnB,CAAxB,EAAwD,KAAKC,gBAA7D;AAEAjC,IAAAA,0BAA0B,CAAE;AAC3BkC,MAAAA,MAAM,EAAE9B,MAAM,CAACI,OAAP,CAAeH,IADI;AAE3B8B,MAAAA,kBAAkB,EAAE,KAAKhB,YAFE;AAG3BiB,MAAAA,sBAAsB,EAAEhC,MAAM,CAACiC,UAHJ;AAI3BR,MAAAA;AAJ2B,KAAF,CAA1B;AAMA;AAED;AACD;AACA;AACA;AACA;;;AACCL,EAAAA,gBAAgB,GAAG;AAClB,UAAMpB,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMG,WAAW,GAAGH,MAAM,CAACI,OAAP,CAAeH,IAAnC;AACA,UAAMK,WAAW,GAAGH,WAAW,CAACI,QAAZ,CAAqBC,OAArB,EAApB;AACA,UAAM0B,aAAa,GAAGlC,MAAM,CAACkC,aAA7B;AAEA,UAAMC,eAAe,GAAGnC,MAAM,CAAC2B,MAAP,CAAcC,GAAd,CAAmB,aAAnB,KACvBM,aAAa,IAAIA,aAAa,CAACE,OAAd,CAAsBC,WAAtB,OAAwC,UAAzD,IAAuEH,aAAa,CAACI,YAAd,CAA4B,aAA5B,CADxE;;AAGA,QAAKH,eAAL,EAAuB;AACtBtC,MAAAA,iBAAiB,CAAE;AAClBI,QAAAA,IAAI,EAAEE,WADY;AAElBU,QAAAA,OAAO,EAAEP,WAFS;AAGlBiC,QAAAA,IAAI,EAAEJ,eAHY;AAIlBK,QAAAA,YAAY,EAAE,KAJI;AAKlBC,QAAAA,WAAW,EAAE;AALK,OAAF,CAAjB;AAOA;AACD;;AA1HsD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-decoupled/decouplededitorui\n */\n\nimport { EditorUI } from 'ckeditor5/src/core';\nimport { enableToolbarKeyboardFocus } from 'ckeditor5/src/ui';\nimport { enablePlaceholder } from 'ckeditor5/src/engine';\n\n/**\n * The decoupled editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\nexport default class DecoupledEditorUI extends EditorUI {\n\t/**\n\t * Creates an instance of the decoupled editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n\t */\n\tconstructor( editor, view ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The main (top–most) view of the editor UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n\t\t */\n\t\tthis.view = view;\n\t}\n\n\t/**\n\t * Initializes the UI.\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editable = view.editable;\n\t\tconst editingRoot = editingView.document.getRoot();\n\n\t\t// The editable UI and editing root should share the same name. Then name is used\n\t\t// to recognize the particular editable, for instance in ARIA attributes.\n\t\tview.editable.name = editingRoot.rootName;\n\n\t\tview.render();\n\n\t\t// The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n\t\t// But it can be available earlier if a DOM element has been passed to DecoupledEditor.create().\n\t\tconst editableElement = editable.element;\n\n\t\t// Register the editable UI view in the editor. A single editor instance can aggregate multiple\n\t\t// editable areas (roots) but the decoupled editor has only one.\n\t\tthis.setEditableElement( editable.name, editableElement );\n\n\t\t// Let the global focus tracker know that the editable UI element is focusable and\n\t\t// belongs to the editor. From now on, the focus tracker will sustain the editor focus\n\t\t// as long as the editable is focused (e.g. the user is typing).\n\t\tthis.focusTracker.add( editableElement );\n\n\t\t// Let the editable UI element respond to the changes in the global editor focus\n\t\t// tracker. It has been added to the same tracker a few lines above but, in reality, there are\n\t\t// many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n\t\t// as they have focus, the editable should act like it is focused too (although technically\n\t\t// it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n\t\t// Doing otherwise will result in editable focus styles disappearing, once e.g. the\n\t\t// toolbar gets focused.\n\t\tview.editable.bind( 'isFocused' ).to( this.focusTracker );\n\n\t\t// Bind the editable UI element to the editing view, making it an end– and entry–point\n\t\t// of the editor's engine. This is where the engine meets the UI.\n\t\teditingView.attachDomRoot( editableElement );\n\n\t\tthis._initPlaceholder();\n\t\tthis._initToolbar();\n\t\tthis.fire( 'ready' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tconst view = this.view;\n\t\tconst editingView = this.editor.editing.view;\n\n\t\teditingView.detachDomRoot( view.editable.name );\n\t\tview.destroy();\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Initializes the inline editor toolbar and its panel.\n\t *\n\t * @private\n\t */\n\t_initToolbar() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst toolbar = view.toolbar;\n\n\t\ttoolbar.fillFromConfig( editor.config.get( 'toolbar' ), this.componentFactory );\n\n\t\tenableToolbarKeyboardFocus( {\n\t\t\torigin: editor.editing.view,\n\t\t\toriginFocusTracker: this.focusTracker,\n\t\t\toriginKeystrokeHandler: editor.keystrokes,\n\t\t\ttoolbar\n\t\t} );\n\t}\n\n\t/**\n\t * Enable the placeholder text on the editing root, if any was configured.\n\t *\n\t * @private\n\t */\n\t_initPlaceholder() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editingRoot = editingView.document.getRoot();\n\t\tconst sourceElement = editor.sourceElement;\n\n\t\tconst placeholderText = editor.config.get( 'placeholder' ) ||\n\t\t\tsourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute( 'placeholder' );\n\n\t\tif ( placeholderText ) {\n\t\t\tenablePlaceholder( {\n\t\t\t\tview: editingView,\n\t\t\t\telement: editingRoot,\n\t\t\t\ttext: placeholderText,\n\t\t\t\tisDirectHost: false,\n\t\t\t\tkeepOnFocus: true\n\t\t\t} );\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}