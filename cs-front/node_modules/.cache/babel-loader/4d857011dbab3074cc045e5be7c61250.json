{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/checktodolistcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nconst attributeKey = 'todoListChecked';\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/todolistediting~TodoListEditing} as\n * the `checkTodoList` editor command and it is also available via aliased `todoListCheck` name.\n *\n * @extends module:core/command~Command\n */\n\nexport default class CheckTodoListCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    /**\n     * A flag indicating whether the command is active. The command is active when at least one of\n     * {@link module:engine/model/selection~Selection selected} elements is a to-do list item.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #isEnabled\n     */\n\n    /**\n     * A list of to-do list items selected by the {@link module:engine/model/selection~Selection}.\n     *\n     * @observable\n     * @readonly\n     * @member {Array.<module:engine/model/element~Element>} #value\n     */\n\n    /**\n     * A list of to-do list items selected by the {@link module:engine/model/selection~Selection}.\n     *\n     * @protected\n     * @type {Array.<module:engine/model/element~Element>}\n     */\n\n    this._selectedElements = []; // Refresh command before executing to be sure all values are up to date.\n    // It is needed when selection has changed before command execution, in the same change block.\n\n    this.on('execute', () => {\n      this.refresh();\n    }, {\n      priority: 'highest'\n    });\n  }\n  /**\n   * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n   */\n\n\n  refresh() {\n    this._selectedElements = this._getSelectedItems();\n    this.value = this._selectedElements.every(element => !!element.getAttribute('todoListChecked'));\n    this.isEnabled = !!this._selectedElements.length;\n  }\n  /**\n   * Gets all to-do list items selected by the {@link module:engine/model/selection~Selection}.\n   *\n   * @private\n   * @returns {Array.<module:engine/model/element~Element>}\n   */\n\n\n  _getSelectedItems() {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const selectionRange = model.document.selection.getFirstRange();\n    const startElement = selectionRange.start.parent;\n    const elements = [];\n\n    if (schema.checkAttribute(startElement, attributeKey)) {\n      elements.push(startElement);\n    }\n\n    for (const item of selectionRange.getItems()) {\n      if (schema.checkAttribute(item, attributeKey) && !elements.includes(item)) {\n        elements.push(item);\n      }\n    }\n\n    return elements;\n  }\n  /**\n   * Executes the command.\n   *\n   * @param {Object} [options]\n   * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply\n   * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n   * value to decide what it should do.\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.editor.model.change(writer => {\n      for (const element of this._selectedElements) {\n        const value = options.forceValue === undefined ? !this.value : options.forceValue;\n\n        if (value) {\n          writer.setAttribute(attributeKey, true, element);\n        } else {\n          writer.removeAttribute(attributeKey, element);\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-list/src/checktodolistcommand.js"],"names":["Command","attributeKey","CheckTodoListCommand","constructor","editor","_selectedElements","on","refresh","priority","_getSelectedItems","value","every","element","getAttribute","isEnabled","length","model","schema","selectionRange","document","selection","getFirstRange","startElement","start","parent","elements","checkAttribute","push","item","getItems","includes","execute","options","change","writer","forceValue","undefined","setAttribute","removeAttribute"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG,iBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,oBAAN,SAAmCF,OAAnC,CAA2C;AACzD;AACD;AACA;AACCG,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,iBAAL,GAAyB,EAAzB,CA1BqB,CA4BrB;AACA;;AACA,SAAKC,EAAL,CAAS,SAAT,EAAoB,MAAM;AACzB,WAAKC,OAAL;AACA,KAFD,EAEG;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAFH;AAGA;AAED;AACD;AACA;;;AACCD,EAAAA,OAAO,GAAG;AACT,SAAKF,iBAAL,GAAyB,KAAKI,iBAAL,EAAzB;AACA,SAAKC,KAAL,GAAa,KAAKL,iBAAL,CAAuBM,KAAvB,CAA8BC,OAAO,IAAI,CAAC,CAACA,OAAO,CAACC,YAAR,CAAsB,iBAAtB,CAA3C,CAAb;AACA,SAAKC,SAAL,GAAiB,CAAC,CAAC,KAAKT,iBAAL,CAAuBU,MAA1C;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCN,EAAAA,iBAAiB,GAAG;AACnB,UAAMO,KAAK,GAAG,KAAKZ,MAAL,CAAYY,KAA1B;AACA,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AAEA,UAAMC,cAAc,GAAGF,KAAK,CAACG,QAAN,CAAeC,SAAf,CAAyBC,aAAzB,EAAvB;AACA,UAAMC,YAAY,GAAGJ,cAAc,CAACK,KAAf,CAAqBC,MAA1C;AACA,UAAMC,QAAQ,GAAG,EAAjB;;AAEA,QAAKR,MAAM,CAACS,cAAP,CAAuBJ,YAAvB,EAAqCrB,YAArC,CAAL,EAA2D;AAC1DwB,MAAAA,QAAQ,CAACE,IAAT,CAAeL,YAAf;AACA;;AAED,SAAM,MAAMM,IAAZ,IAAoBV,cAAc,CAACW,QAAf,EAApB,EAAgD;AAC/C,UAAKZ,MAAM,CAACS,cAAP,CAAuBE,IAAvB,EAA6B3B,YAA7B,KAA+C,CAACwB,QAAQ,CAACK,QAAT,CAAmBF,IAAnB,CAArD,EAAiF;AAChFH,QAAAA,QAAQ,CAACE,IAAT,CAAeC,IAAf;AACA;AACD;;AAED,WAAOH,QAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCM,EAAAA,OAAO,GAAiB;AAAA,QAAfC,OAAe,uEAAL,EAAK;AACvB,SAAK5B,MAAL,CAAYY,KAAZ,CAAkBiB,MAAlB,CAA0BC,MAAM,IAAI;AACnC,WAAM,MAAMtB,OAAZ,IAAuB,KAAKP,iBAA5B,EAAgD;AAC/C,cAAMK,KAAK,GAAKsB,OAAO,CAACG,UAAR,KAAuBC,SAAzB,GAAuC,CAAC,KAAK1B,KAA7C,GAAqDsB,OAAO,CAACG,UAA3E;;AAEA,YAAKzB,KAAL,EAAa;AACZwB,UAAAA,MAAM,CAACG,YAAP,CAAqBpC,YAArB,EAAmC,IAAnC,EAAyCW,OAAzC;AACA,SAFD,MAEO;AACNsB,UAAAA,MAAM,CAACI,eAAP,CAAwBrC,YAAxB,EAAsCW,OAAtC;AACA;AACD;AACD,KAVD;AAWA;;AA/FwD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/checktodolistcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\nconst attributeKey = 'todoListChecked';\n\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/todolistediting~TodoListEditing} as\n * the `checkTodoList` editor command and it is also available via aliased `todoListCheck` name.\n *\n * @extends module:core/command~Command\n */\nexport default class CheckTodoListCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A flag indicating whether the command is active. The command is active when at least one of\n\t\t * {@link module:engine/model/selection~Selection selected} elements is a to-do list item.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\n\t\t/**\n\t\t * A list of to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Array.<module:engine/model/element~Element>} #value\n\t\t */\n\n\t\t/**\n\t\t * A list of to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/element~Element>}\n\t\t */\n\t\tthis._selectedElements = [];\n\n\t\t// Refresh command before executing to be sure all values are up to date.\n\t\t// It is needed when selection has changed before command execution, in the same change block.\n\t\tthis.on( 'execute', () => {\n\t\t\tthis.refresh();\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */\n\trefresh() {\n\t\tthis._selectedElements = this._getSelectedItems();\n\t\tthis.value = this._selectedElements.every( element => !!element.getAttribute( 'todoListChecked' ) );\n\t\tthis.isEnabled = !!this._selectedElements.length;\n\t}\n\n\t/**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t *\n\t * @private\n\t * @returns {Array.<module:engine/model/element~Element>}\n\t */\n\t_getSelectedItems() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\n\t\tconst selectionRange = model.document.selection.getFirstRange();\n\t\tconst startElement = selectionRange.start.parent;\n\t\tconst elements = [];\n\n\t\tif ( schema.checkAttribute( startElement, attributeKey ) ) {\n\t\t\telements.push( startElement );\n\t\t}\n\n\t\tfor ( const item of selectionRange.getItems() ) {\n\t\t\tif ( schema.checkAttribute( item, attributeKey ) && !elements.includes( item ) ) {\n\t\t\t\telements.push( item );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */\n\texecute( options = {} ) {\n\t\tthis.editor.model.change( writer => {\n\t\t\tfor ( const element of this._selectedElements ) {\n\t\t\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setAttribute( attributeKey, true, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( attributeKey, element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}