{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/selectrowcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { getRowIndexes, getSelectionAffectedTableCells } from '../utils/selection';\n/**\n * The select row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableRow'` editor command.\n *\n * To select the rows containing the selected cells, execute the command:\n *\n *\t\teditor.execute( 'selectTableRow' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class SelectRowCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor); // It does not affect data so should be enabled in read-only mode.\n\n    this.affectsData = false;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const selectedCells = getSelectionAffectedTableCells(this.editor.model.document.selection);\n    this.isEnabled = selectedCells.length > 0;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const referenceCells = getSelectionAffectedTableCells(model.document.selection);\n    const rowIndexes = getRowIndexes(referenceCells);\n    const table = referenceCells[0].findAncestor('table');\n    const rangesToSelect = [];\n\n    for (let rowIndex = rowIndexes.first; rowIndex <= rowIndexes.last; rowIndex++) {\n      for (const cell of table.getChild(rowIndex).getChildren()) {\n        rangesToSelect.push(model.createRangeOn(cell));\n      }\n    }\n\n    model.change(writer => {\n      writer.setSelection(rangesToSelect);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/commands/selectrowcommand.js"],"names":["Command","getRowIndexes","getSelectionAffectedTableCells","SelectRowCommand","constructor","editor","affectsData","refresh","selectedCells","model","document","selection","isEnabled","length","execute","referenceCells","rowIndexes","table","findAncestor","rangesToSelect","rowIndex","first","last","cell","getChild","getChildren","push","createRangeOn","change","writer","setSelection"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,SAASC,aAAT,EAAwBC,8BAAxB,QAA8D,oBAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BH,OAA/B,CAAuC;AACrD;AACD;AACA;AACCI,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP,EADqB,CAGrB;;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMC,aAAa,GAAGN,8BAA8B,CAAE,KAAKG,MAAL,CAAYI,KAAZ,CAAkBC,QAAlB,CAA2BC,SAA7B,CAApD;AAEA,SAAKC,SAAL,GAAiBJ,aAAa,CAACK,MAAd,GAAuB,CAAxC;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAML,KAAK,GAAG,KAAKJ,MAAL,CAAYI,KAA1B;AACA,UAAMM,cAAc,GAAGb,8BAA8B,CAAEO,KAAK,CAACC,QAAN,CAAeC,SAAjB,CAArD;AACA,UAAMK,UAAU,GAAGf,aAAa,CAAEc,cAAF,CAAhC;AAEA,UAAME,KAAK,GAAGF,cAAc,CAAE,CAAF,CAAd,CAAoBG,YAApB,CAAkC,OAAlC,CAAd;AACA,UAAMC,cAAc,GAAG,EAAvB;;AAEA,SAAM,IAAIC,QAAQ,GAAGJ,UAAU,CAACK,KAAhC,EAAuCD,QAAQ,IAAIJ,UAAU,CAACM,IAA9D,EAAoEF,QAAQ,EAA5E,EAAiF;AAChF,WAAM,MAAMG,IAAZ,IAAoBN,KAAK,CAACO,QAAN,CAAgBJ,QAAhB,EAA2BK,WAA3B,EAApB,EAA+D;AAC9DN,QAAAA,cAAc,CAACO,IAAf,CAAqBjB,KAAK,CAACkB,aAAN,CAAqBJ,IAArB,CAArB;AACA;AACD;;AAEDd,IAAAA,KAAK,CAACmB,MAAN,CAAcC,MAAM,IAAI;AACvBA,MAAAA,MAAM,CAACC,YAAP,CAAqBX,cAArB;AACA,KAFD;AAGA;;AAxCoD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/selectrowcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\nimport { getRowIndexes, getSelectionAffectedTableCells } from '../utils/selection';\n\n/**\n * The select row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableRow'` editor command.\n *\n * To select the rows containing the selected cells, execute the command:\n *\n *\t\teditor.execute( 'selectTableRow' );\n *\n * @extends module:core/command~Command\n */\nexport default class SelectRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t// It does not affect data so should be enabled in read-only mode.\n\t\tthis.affectsData = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selectedCells = getSelectionAffectedTableCells( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = selectedCells.length > 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst referenceCells = getSelectionAffectedTableCells( model.document.selection );\n\t\tconst rowIndexes = getRowIndexes( referenceCells );\n\n\t\tconst table = referenceCells[ 0 ].findAncestor( 'table' );\n\t\tconst rangesToSelect = [];\n\n\t\tfor ( let rowIndex = rowIndexes.first; rowIndex <= rowIndexes.last; rowIndex++ ) {\n\t\t\tfor ( const cell of table.getChild( rowIndex ).getChildren() ) {\n\t\t\t\trangesToSelect.push( model.createRangeOn( cell ) );\n\t\t\t}\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( rangesToSelect );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}