{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indentcommandbehavior/indentusingoffset\n */\n\n/**\n * The block indentation behavior that uses offsets to set indentation.\n *\n * @implements module:indent/indentblockcommand~IndentBehavior\n */\nexport default class IndentUsingOffset {\n  /**\n   * Creates an instance of the indentation behavior.\n   *\n   * @param {Object} config\n   * @param {String} config.direction The direction of indentation.\n   * @param {Number} config.offset The offset of the next indentation step.\n   * @param {String} config.unit Indentation unit.\n   */\n  constructor(config) {\n    /**\n     * The direction of indentation.\n     *\n     * @type {Boolean}\n     */\n    this.isForward = config.direction === 'forward';\n    /**\n     * The offset of the next indentation step.\n     *\n     * @type {Number}\n     */\n\n    this.offset = config.offset;\n    /**\n     * Indentation unit.\n     *\n     * @type {String}\n     */\n\n    this.unit = config.unit;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  checkEnabled(indentAttributeValue) {\n    const currentOffset = parseFloat(indentAttributeValue || 0); // The command is always enabled for forward indentation.\n\n    return this.isForward || currentOffset > 0;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  getNextIndent(indentAttributeValue) {\n    const currentOffset = parseFloat(indentAttributeValue || 0);\n    const isSameUnit = !indentAttributeValue || indentAttributeValue.endsWith(this.unit);\n\n    if (!isSameUnit) {\n      return this.isForward ? this.offset + this.unit : undefined;\n    }\n\n    const nextOffset = this.isForward ? this.offset : -this.offset;\n    const offsetToSet = currentOffset + nextOffset;\n    return offsetToSet > 0 ? offsetToSet + this.unit : undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-indent/src/indentcommandbehavior/indentusingoffset.js"],"names":["IndentUsingOffset","constructor","config","isForward","direction","offset","unit","checkEnabled","indentAttributeValue","currentOffset","parseFloat","getNextIndent","isSameUnit","endsWith","undefined","nextOffset","offsetToSet"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,iBAAN,CAAwB;AACtC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB;AACF;AACA;AACA;AACA;AACE,SAAKC,SAAL,GAAiBD,MAAM,CAACE,SAAP,KAAqB,SAAtC;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,MAAL,GAAcH,MAAM,CAACG,MAArB;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,IAAL,GAAYJ,MAAM,CAACI,IAAnB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,YAAY,CAAEC,oBAAF,EAAyB;AACpC,UAAMC,aAAa,GAAGC,UAAU,CAAEF,oBAAoB,IAAI,CAA1B,CAAhC,CADoC,CAGpC;;AACA,WAAO,KAAKL,SAAL,IAAkBM,aAAa,GAAG,CAAzC;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,aAAa,CAAEH,oBAAF,EAAyB;AACrC,UAAMC,aAAa,GAAGC,UAAU,CAAEF,oBAAoB,IAAI,CAA1B,CAAhC;AACA,UAAMI,UAAU,GAAG,CAACJ,oBAAD,IAAyBA,oBAAoB,CAACK,QAArB,CAA+B,KAAKP,IAApC,CAA5C;;AAEA,QAAK,CAACM,UAAN,EAAmB;AAClB,aAAO,KAAKT,SAAL,GAAiB,KAAKE,MAAL,GAAc,KAAKC,IAApC,GAA2CQ,SAAlD;AACA;;AAED,UAAMC,UAAU,GAAG,KAAKZ,SAAL,GAAiB,KAAKE,MAAtB,GAA+B,CAAC,KAAKA,MAAxD;AAEA,UAAMW,WAAW,GAAGP,aAAa,GAAGM,UAApC;AAEA,WAAOC,WAAW,GAAG,CAAd,GAAkBA,WAAW,GAAG,KAAKV,IAArC,GAA4CQ,SAAnD;AACA;;AA1DqC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indentcommandbehavior/indentusingoffset\n */\n\n/**\n * The block indentation behavior that uses offsets to set indentation.\n *\n * @implements module:indent/indentblockcommand~IndentBehavior\n */\nexport default class IndentUsingOffset {\n\t/**\n\t * Creates an instance of the indentation behavior.\n\t *\n\t * @param {Object} config\n\t * @param {String} config.direction The direction of indentation.\n\t * @param {Number} config.offset The offset of the next indentation step.\n\t * @param {String} config.unit Indentation unit.\n\t */\n\tconstructor( config ) {\n\t\t/**\n\t\t * The direction of indentation.\n\t\t *\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.isForward = config.direction === 'forward';\n\n\t\t/**\n\t\t * The offset of the next indentation step.\n\t\t *\n\t\t * @type {Number}\n\t\t */\n\t\tthis.offset = config.offset;\n\n\t\t/**\n\t\t * Indentation unit.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.unit = config.unit;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcheckEnabled( indentAttributeValue ) {\n\t\tconst currentOffset = parseFloat( indentAttributeValue || 0 );\n\n\t\t// The command is always enabled for forward indentation.\n\t\treturn this.isForward || currentOffset > 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetNextIndent( indentAttributeValue ) {\n\t\tconst currentOffset = parseFloat( indentAttributeValue || 0 );\n\t\tconst isSameUnit = !indentAttributeValue || indentAttributeValue.endsWith( this.unit );\n\n\t\tif ( !isSameUnit ) {\n\t\t\treturn this.isForward ? this.offset + this.unit : undefined;\n\t\t}\n\n\t\tconst nextOffset = this.isForward ? this.offset : -this.offset;\n\n\t\tconst offsetToSet = currentOffset + nextOffset;\n\n\t\treturn offsetToSet > 0 ? offsetToSet + this.unit : undefined;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}