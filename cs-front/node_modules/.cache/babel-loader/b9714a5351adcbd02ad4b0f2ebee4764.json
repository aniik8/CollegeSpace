{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addListToDropdown, createDropdown, Model, SplitButtonView } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport InsertTableView from './ui/inserttableview';\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` split button.\n *\n * The `'tableColumn'`, `'tableRow'` and `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TableUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TableUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = this.editor.t;\n    const contentLanguageDirection = editor.locale.contentLanguageDirection;\n    const isContentLtr = contentLanguageDirection === 'ltr';\n    editor.ui.componentFactory.add('insertTable', locale => {\n      const command = editor.commands.get('insertTable');\n      const dropdownView = createDropdown(locale);\n      dropdownView.bind('isEnabled').to(command); // Decorate dropdown's button.\n\n      dropdownView.buttonView.set({\n        icon: tableIcon,\n        label: t('Insert table'),\n        tooltip: true\n      });\n      let insertTableView;\n      dropdownView.on('change:isOpen', () => {\n        if (insertTableView) {\n          return;\n        } // Prepare custom view for dropdown's panel.\n\n\n        insertTableView = new InsertTableView(locale);\n        dropdownView.panelView.children.add(insertTableView);\n        insertTableView.delegate('execute').to(dropdownView);\n        dropdownView.buttonView.on('open', () => {\n          // Reset the chooser before showing it to the user.\n          insertTableView.rows = 0;\n          insertTableView.columns = 0;\n        });\n        dropdownView.on('execute', () => {\n          editor.execute('insertTable', {\n            rows: insertTableView.rows,\n            columns: insertTableView.columns\n          });\n          editor.editing.view.focus();\n        });\n      });\n      return dropdownView;\n    });\n    editor.ui.componentFactory.add('tableColumn', locale => {\n      const options = [{\n        type: 'switchbutton',\n        model: {\n          commandName: 'setTableColumnHeader',\n          label: t('Header column'),\n          bindIsOn: true\n        }\n      }, {\n        type: 'separator'\n      }, {\n        type: 'button',\n        model: {\n          commandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n          label: t('Insert column left')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n          label: t('Insert column right')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'removeTableColumn',\n          label: t('Delete column')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'selectTableColumn',\n          label: t('Select column')\n        }\n      }];\n      return this._prepareDropdown(t('Column'), tableColumnIcon, options, locale);\n    });\n    editor.ui.componentFactory.add('tableRow', locale => {\n      const options = [{\n        type: 'switchbutton',\n        model: {\n          commandName: 'setTableRowHeader',\n          label: t('Header row'),\n          bindIsOn: true\n        }\n      }, {\n        type: 'separator'\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'insertTableRowAbove',\n          label: t('Insert row above')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'insertTableRowBelow',\n          label: t('Insert row below')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'removeTableRow',\n          label: t('Delete row')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'selectTableRow',\n          label: t('Select row')\n        }\n      }];\n      return this._prepareDropdown(t('Row'), tableRowIcon, options, locale);\n    });\n    editor.ui.componentFactory.add('mergeTableCells', locale => {\n      const options = [{\n        type: 'button',\n        model: {\n          commandName: 'mergeTableCellUp',\n          label: t('Merge cell up')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n          label: t('Merge cell right')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'mergeTableCellDown',\n          label: t('Merge cell down')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n          label: t('Merge cell left')\n        }\n      }, {\n        type: 'separator'\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'splitTableCellVertically',\n          label: t('Split cell vertically')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'splitTableCellHorizontally',\n          label: t('Split cell horizontally')\n        }\n      }];\n      return this._prepareMergeSplitButtonDropdown(t('Merge cells'), tableMergeCellIcon, options, locale);\n    });\n  }\n  /**\n   * Creates a dropdown view from a set of options.\n   *\n   * @private\n   * @param {String} label The dropdown button label.\n   * @param {String} icon An icon for the dropdown button.\n   * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n   * @param {module:utils/locale~Locale} locale\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n\n\n  _prepareDropdown(label, icon, options, locale) {\n    const editor = this.editor;\n    const dropdownView = createDropdown(locale);\n\n    const commands = this._fillDropdownWithListOptions(dropdownView, options); // Decorate dropdown's button.\n\n\n    dropdownView.buttonView.set({\n      label,\n      icon,\n      tooltip: true\n    }); // Make dropdown button disabled when all options are disabled.\n\n    dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', function () {\n      for (var _len = arguments.length, areEnabled = new Array(_len), _key = 0; _key < _len; _key++) {\n        areEnabled[_key] = arguments[_key];\n      }\n\n      return areEnabled.some(isEnabled => isEnabled);\n    });\n    this.listenTo(dropdownView, 'execute', evt => {\n      editor.execute(evt.source.commandName);\n      editor.editing.view.focus();\n    });\n    return dropdownView;\n  }\n  /**\n   * Creates a dropdown view with a {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} for\n   * merge (and split)â€“related commands.\n   *\n   * @private\n   * @param {String} label The dropdown button label.\n   * @param {String} icon An icon for the dropdown button.\n   * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n   * @param {module:utils/locale~Locale} locale\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n\n\n  _prepareMergeSplitButtonDropdown(label, icon, options, locale) {\n    const editor = this.editor;\n    const dropdownView = createDropdown(locale, SplitButtonView);\n    const mergeCommandName = 'mergeTableCells'; // Main command.\n\n    const mergeCommand = editor.commands.get(mergeCommandName); // Subcommands in the dropdown.\n\n    const commands = this._fillDropdownWithListOptions(dropdownView, options);\n\n    dropdownView.buttonView.set({\n      label,\n      icon,\n      tooltip: true,\n      isEnabled: true\n    }); // Make dropdown button disabled when all options are disabled together with the main command.\n\n    dropdownView.bind('isEnabled').toMany([mergeCommand, ...commands], 'isEnabled', function () {\n      for (var _len2 = arguments.length, areEnabled = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        areEnabled[_key2] = arguments[_key2];\n      }\n\n      return areEnabled.some(isEnabled => isEnabled);\n    }); // Merge selected table cells when the main part of the split button is clicked.\n\n    this.listenTo(dropdownView.buttonView, 'execute', () => {\n      editor.execute(mergeCommandName);\n      editor.editing.view.focus();\n    }); // Execute commands for events coming from the list in the dropdown panel.\n\n    this.listenTo(dropdownView, 'execute', evt => {\n      editor.execute(evt.source.commandName);\n      editor.editing.view.focus();\n    });\n    return dropdownView;\n  }\n  /**\n   * Injects a {@link module:ui/list/listview~ListView} into the passed dropdown with buttons\n   * which execute editor commands as configured in passed options.\n   *\n   * @private\n   * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\n   * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n   * @returns {Array.<module:core/command~Command>} Commands the list options are interacting with.\n   */\n\n\n  _fillDropdownWithListOptions(dropdownView, options) {\n    const editor = this.editor;\n    const commands = [];\n    const itemDefinitions = new Collection();\n\n    for (const option of options) {\n      addListOption(option, editor, commands, itemDefinitions);\n    }\n\n    addListToDropdown(dropdownView, itemDefinitions, editor.ui.componentFactory);\n    return commands;\n  }\n\n} // Adds an option to a list view.\n//\n// @param {module:table/tableui~DropdownOption} option A configuration option.\n// @param {module:core/editor/editor~Editor} editor\n// @param {Array.<module:core/command~Command>} commands The list of commands to update.\n// @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} itemDefinitions\n// A collection of dropdown items to update with the given option.\n\nfunction addListOption(option, editor, commands, itemDefinitions) {\n  const model = option.model = new Model(option.model);\n  const {\n    commandName,\n    bindIsOn\n  } = option.model;\n\n  if (option.type === 'button' || option.type === 'switchbutton') {\n    const command = editor.commands.get(commandName);\n    commands.push(command);\n    model.set({\n      commandName\n    });\n    model.bind('isEnabled').to(command);\n\n    if (bindIsOn) {\n      model.bind('isOn').to(command, 'value');\n    }\n  }\n\n  model.set({\n    withText: true\n  });\n  itemDefinitions.add(option);\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/tableui.js"],"names":["Plugin","addListToDropdown","createDropdown","Model","SplitButtonView","Collection","InsertTableView","tableIcon","tableColumnIcon","tableRowIcon","tableMergeCellIcon","TableUI","pluginName","init","editor","t","contentLanguageDirection","locale","isContentLtr","ui","componentFactory","add","command","commands","get","dropdownView","bind","to","buttonView","set","icon","label","tooltip","insertTableView","on","panelView","children","delegate","rows","columns","execute","editing","view","focus","options","type","model","commandName","bindIsOn","_prepareDropdown","_prepareMergeSplitButtonDropdown","_fillDropdownWithListOptions","toMany","areEnabled","some","isEnabled","listenTo","evt","source","mergeCommandName","mergeCommand","itemDefinitions","option","addListOption","push","withText"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addListToDropdown, createDropdown, Model, SplitButtonView } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\n\nimport InsertTableView from './ui/inserttableview';\n\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` split button.\n *\n * The `'tableColumn'`, `'tableRow'` and `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TableUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = this.editor.t;\n\t\tconst contentLanguageDirection = editor.locale.contentLanguageDirection;\n\t\tconst isContentLtr = contentLanguageDirection === 'ltr';\n\n\t\teditor.ui.componentFactory.add( 'insertTable', locale => {\n\t\t\tconst command = editor.commands.get( 'insertTable' );\n\t\t\tconst dropdownView = createDropdown( locale );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\t// Decorate dropdown's button.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\ticon: tableIcon,\n\t\t\t\tlabel: t( 'Insert table' ),\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tlet insertTableView;\n\n\t\t\tdropdownView.on( 'change:isOpen', () => {\n\t\t\t\tif ( insertTableView ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Prepare custom view for dropdown's panel.\n\t\t\t\tinsertTableView = new InsertTableView( locale );\n\t\t\t\tdropdownView.panelView.children.add( insertTableView );\n\n\t\t\t\tinsertTableView.delegate( 'execute' ).to( dropdownView );\n\n\t\t\t\tdropdownView.buttonView.on( 'open', () => {\n\t\t\t\t\t// Reset the chooser before showing it to the user.\n\t\t\t\t\tinsertTableView.rows = 0;\n\t\t\t\t\tinsertTableView.columns = 0;\n\t\t\t\t} );\n\n\t\t\t\tdropdownView.on( 'execute', () => {\n\t\t\t\t\teditor.execute( 'insertTable', { rows: insertTableView.rows, columns: insertTableView.columns } );\n\t\t\t\t\teditor.editing.view.focus();\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'tableColumn', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'switchbutton',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'setTableColumnHeader',\n\t\t\t\t\t\tlabel: t( 'Header column' ),\n\t\t\t\t\t\tbindIsOn: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n\t\t\t\t\t\tlabel: t( 'Insert column left' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n\t\t\t\t\t\tlabel: t( 'Insert column right' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'removeTableColumn',\n\t\t\t\t\t\tlabel: t( 'Delete column' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'selectTableColumn',\n\t\t\t\t\t\tlabel: t( 'Select column' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\treturn this._prepareDropdown( t( 'Column' ), tableColumnIcon, options, locale );\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'tableRow', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'switchbutton',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'setTableRowHeader',\n\t\t\t\t\t\tlabel: t( 'Header row' ),\n\t\t\t\t\t\tbindIsOn: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableRowAbove',\n\t\t\t\t\t\tlabel: t( 'Insert row above' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableRowBelow',\n\t\t\t\t\t\tlabel: t( 'Insert row below' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'removeTableRow',\n\t\t\t\t\t\tlabel: t( 'Delete row' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'selectTableRow',\n\t\t\t\t\t\tlabel: t( 'Select row' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\treturn this._prepareDropdown( t( 'Row' ), tableRowIcon, options, locale );\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'mergeTableCells', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellUp',\n\t\t\t\t\t\tlabel: t( 'Merge cell up' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n\t\t\t\t\t\tlabel: t( 'Merge cell right' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellDown',\n\t\t\t\t\t\tlabel: t( 'Merge cell down' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n\t\t\t\t\t\tlabel: t( 'Merge cell left' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'splitTableCellVertically',\n\t\t\t\t\t\tlabel: t( 'Split cell vertically' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'splitTableCellHorizontally',\n\t\t\t\t\t\tlabel: t( 'Split cell horizontally' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\treturn this._prepareMergeSplitButtonDropdown( t( 'Merge cells' ), tableMergeCellIcon, options, locale );\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a dropdown view from a set of options.\n\t *\n\t * @private\n\t * @param {String} label The dropdown button label.\n\t * @param {String} icon An icon for the dropdown button.\n\t * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n\t * @param {module:utils/locale~Locale} locale\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_prepareDropdown( label, icon, options, locale ) {\n\t\tconst editor = this.editor;\n\t\tconst dropdownView = createDropdown( locale );\n\t\tconst commands = this._fillDropdownWithListOptions( dropdownView, options );\n\n\t\t// Decorate dropdown's button.\n\t\tdropdownView.buttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\t// Make dropdown button disabled when all options are disabled.\n\t\tdropdownView.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => {\n\t\t\treturn areEnabled.some( isEnabled => isEnabled );\n\t\t} );\n\n\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\teditor.execute( evt.source.commandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Creates a dropdown view with a {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} for\n\t * merge (and split)â€“related commands.\n\t *\n\t * @private\n\t * @param {String} label The dropdown button label.\n\t * @param {String} icon An icon for the dropdown button.\n\t * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n\t * @param {module:utils/locale~Locale} locale\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_prepareMergeSplitButtonDropdown( label, icon, options, locale ) {\n\t\tconst editor = this.editor;\n\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\tconst mergeCommandName = 'mergeTableCells';\n\n\t\t// Main command.\n\t\tconst mergeCommand = editor.commands.get( mergeCommandName );\n\n\t\t// Subcommands in the dropdown.\n\t\tconst commands = this._fillDropdownWithListOptions( dropdownView, options );\n\n\t\tdropdownView.buttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true,\n\t\t\tisEnabled: true\n\t\t} );\n\n\t\t// Make dropdown button disabled when all options are disabled together with the main command.\n\t\tdropdownView.bind( 'isEnabled' ).toMany( [ mergeCommand, ...commands ], 'isEnabled', ( ...areEnabled ) => {\n\t\t\treturn areEnabled.some( isEnabled => isEnabled );\n\t\t} );\n\n\t\t// Merge selected table cells when the main part of the split button is clicked.\n\t\tthis.listenTo( dropdownView.buttonView, 'execute', () => {\n\t\t\teditor.execute( mergeCommandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\t// Execute commands for events coming from the list in the dropdown panel.\n\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\teditor.execute( evt.source.commandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Injects a {@link module:ui/list/listview~ListView} into the passed dropdown with buttons\n\t * which execute editor commands as configured in passed options.\n\t *\n\t * @private\n\t * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\n\t * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n\t * @returns {Array.<module:core/command~Command>} Commands the list options are interacting with.\n\t */\n\t_fillDropdownWithListOptions( dropdownView, options ) {\n\t\tconst editor = this.editor;\n\t\tconst commands = [];\n\t\tconst itemDefinitions = new Collection();\n\n\t\tfor ( const option of options ) {\n\t\t\taddListOption( option, editor, commands, itemDefinitions );\n\t\t}\n\n\t\taddListToDropdown( dropdownView, itemDefinitions, editor.ui.componentFactory );\n\n\t\treturn commands;\n\t}\n}\n\n// Adds an option to a list view.\n//\n// @param {module:table/tableui~DropdownOption} option A configuration option.\n// @param {module:core/editor/editor~Editor} editor\n// @param {Array.<module:core/command~Command>} commands The list of commands to update.\n// @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} itemDefinitions\n// A collection of dropdown items to update with the given option.\nfunction addListOption( option, editor, commands, itemDefinitions ) {\n\tconst model = option.model = new Model( option.model );\n\tconst { commandName, bindIsOn } = option.model;\n\n\tif ( option.type === 'button' || option.type === 'switchbutton' ) {\n\t\tconst command = editor.commands.get( commandName );\n\n\t\tcommands.push( command );\n\n\t\tmodel.set( { commandName } );\n\n\t\tmodel.bind( 'isEnabled' ).to( command );\n\n\t\tif ( bindIsOn ) {\n\t\t\tmodel.bind( 'isOn' ).to( command, 'value' );\n\t\t}\n\t}\n\n\tmodel.set( {\n\t\twithText: true\n\t} );\n\n\titemDefinitions.add( option );\n}\n"]},"metadata":{},"sourceType":"module"}