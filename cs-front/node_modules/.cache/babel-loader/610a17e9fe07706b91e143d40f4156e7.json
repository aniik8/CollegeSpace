{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/outdentcodeblockcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { getLeadingWhiteSpaces, getIndentOutdentPositions, isModelSelectionInCodeBlock } from './utils';\n/**\n * The code block indentation decrease command plugin.\n *\n * @extends module:core/command~Command\n */\n\nexport default class OutdentCodeBlockCommand extends Command {\n  constructor(editor) {\n    super(editor);\n    /**\n     * A sequence of characters removed from the line when the command is executed.\n     *\n     * @readonly\n     * @private\n     * @member {String}\n     */\n\n    this._indentSequence = editor.config.get('codeBlock.indentSequence');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    this.isEnabled = this._checkEnabled();\n  }\n  /**\n   * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n   * code lines in the selection will be decreased.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const editor = this.editor;\n    const model = editor.model;\n    model.change(writer => {\n      const positions = getIndentOutdentPositions(model); // Outdent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n      //\n      //\t\t<codeBlock>^foo</codeBlock>         ->       <codeBlock>foo</codeBlock>\n      //\n      //\t\t<codeBlock>    ^bar</codeBlock>     ->       <codeBlock>bar</codeBlock>\n      //\n      // Also, when there is more than one position:\n      //\n      //\t\t<codeBlock>\n      //\t\t\t    ^foobar\n      //\t\t\t<softBreak></softBreak>\n      //\t\t\t    ^bazqux\n      //\t\t</codeBlock>\n      //\n      //\t\t->\n      //\n      //\t\t<codeBlock>\n      //\t\t\tfoobar\n      //\t\t\t<softBreak></softBreak>\n      //\t\t\tbazqux\n      //\t\t</codeBlock>\n\n      for (const position of positions) {\n        const range = getLastOutdentableSequenceRange(this.editor.model, position, this._indentSequence);\n\n        if (range) {\n          writer.remove(range);\n        }\n      }\n    });\n  }\n  /**\n   * Checks whether the command can be enabled in the current context.\n   *\n   * @private\n   * @returns {Boolean} Whether the command should be enabled.\n   */\n\n\n  _checkEnabled() {\n    if (!this._indentSequence) {\n      return false;\n    }\n\n    const model = this.editor.model;\n\n    if (!isModelSelectionInCodeBlock(model.document.selection)) {\n      return false;\n    } // Outdent command can execute only when there is an indent character sequence\n    // in some of the lines.\n\n\n    return getIndentOutdentPositions(model).some(position => {\n      return getLastOutdentableSequenceRange(model, position, this._indentSequence);\n    });\n  }\n\n} // For a position coming from `getIndentOutdentPositions()`, it returns the range representing\n// the last occurrence of the indent sequence among the leading whitespaces of the code line the\n// position represents.\n//\n// For instance, assuming the indent sequence is 4x space (\"    \"):\n//\n//\t\t<codeBlock>foo^</codeBlock>                                 ->          null\n//\t\t<codeBlock>foo^<softBreak></softBreak>bar</codeBlock>       ->          null\n//\t\t<codeBlock>  ^foo</codeBlock>                               ->          null\n//\t\t<codeBlock>        ^foo</codeBlock>                         ->          <codeBlock>    [    ]foo</codeBlock>\n//\t\t<codeBlock>    ^foo    bar</codeBlock>                      ->          <codeBlock>[    ]foo    bar</codeBlock>\n//\n// @param {<module:engine/model/model~Model>} model\n// @param {<module:engine/model/position~Position>} position\n// @param {String} sequence\n// @returns {<module:engine/model/range~Range>|null}\n\nfunction getLastOutdentableSequenceRange(model, position, sequence) {\n  // Positions start before each text node (code line). Get the node corresponding to the position.\n  const nodeAtPosition = getCodeLineTextNodeAtPosition(position);\n\n  if (!nodeAtPosition) {\n    return null;\n  }\n\n  const leadingWhiteSpaces = getLeadingWhiteSpaces(nodeAtPosition);\n  const lastIndexOfSequence = leadingWhiteSpaces.lastIndexOf(sequence); // For instance, assuming the indent sequence is 4x space (\"    \"):\n  //\n  //\t\t<codeBlock>    \t^foo</codeBlock>           ->             null\n  //\n\n  if (lastIndexOfSequence + sequence.length !== leadingWhiteSpaces.length) {\n    return null;\n  } // For instance, assuming the indent sequence is 4x space (\"    \"):\n  //\n  //\t\t<codeBlock>  ^foo</codeBlock>           ->             null\n  //\n\n\n  if (lastIndexOfSequence === -1) {\n    return null;\n  }\n\n  const {\n    parent,\n    startOffset\n  } = nodeAtPosition; // Create a range that contains the **last** indent sequence among the leading whitespaces\n  // of the line.\n  //\n  // For instance, assuming the indent sequence is 4x space (\"    \"):\n  //\n  //\t\t<codeBlock>        ^foo</codeBlock>      ->     <codeBlock>    [    ]foo</codeBlock>\n  //\n\n  return model.createRange(model.createPositionAt(parent, startOffset + lastIndexOfSequence), model.createPositionAt(parent, startOffset + lastIndexOfSequence + sequence.length));\n}\n\nfunction getCodeLineTextNodeAtPosition(position) {\n  // Positions start before each text node (code line). Get the node corresponding to the position.\n  let nodeAtPosition = position.parent.getChild(position.index); // <codeBlock>foo^</codeBlock>\n  // <codeBlock>foo^<softBreak></softBreak>bar</codeBlock>\n\n  if (!nodeAtPosition || nodeAtPosition.is('element', 'softBreak')) {\n    nodeAtPosition = position.nodeBefore;\n  } // <codeBlock>^</codeBlock>\n  // <codeBlock>foo^<softBreak></softBreak>bar</codeBlock>\n\n\n  if (!nodeAtPosition || nodeAtPosition.is('element', 'softBreak')) {\n    return null;\n  }\n\n  return nodeAtPosition;\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-code-block/src/outdentcodeblockcommand.js"],"names":["Command","getLeadingWhiteSpaces","getIndentOutdentPositions","isModelSelectionInCodeBlock","OutdentCodeBlockCommand","constructor","editor","_indentSequence","config","get","refresh","isEnabled","_checkEnabled","execute","model","change","writer","positions","position","range","getLastOutdentableSequenceRange","remove","document","selection","some","sequence","nodeAtPosition","getCodeLineTextNodeAtPosition","leadingWhiteSpaces","lastIndexOfSequence","lastIndexOf","length","parent","startOffset","createRange","createPositionAt","getChild","index","is","nodeBefore"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/outdentcodeblockcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\nimport {\n\tgetLeadingWhiteSpaces,\n\tgetIndentOutdentPositions,\n\tisModelSelectionInCodeBlock\n} from './utils';\n\n/**\n * The code block indentation decrease command plugin.\n *\n * @extends module:core/command~Command\n */\nexport default class OutdentCodeBlockCommand extends Command {\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A sequence of characters removed from the line when the command is executed.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._indentSequence = editor.config.get( 'codeBlock.indentSequence' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be decreased.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.change( writer => {\n\t\t\tconst positions = getIndentOutdentPositions( model );\n\n\t\t\t// Outdent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n\t\t\t//\n\t\t\t//\t\t<codeBlock>^foo</codeBlock>         ->       <codeBlock>foo</codeBlock>\n\t\t\t//\n\t\t\t//\t\t<codeBlock>    ^bar</codeBlock>     ->       <codeBlock>bar</codeBlock>\n\t\t\t//\n\t\t\t// Also, when there is more than one position:\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\t    ^foobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\t    ^bazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\t//\n\t\t\t//\t\t->\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\tfoobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\tbazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\tfor ( const position of positions ) {\n\t\t\t\tconst range = getLastOutdentableSequenceRange( this.editor.model, position, this._indentSequence );\n\n\t\t\t\tif ( range ) {\n\t\t\t\t\twriter.remove( range );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\tif ( !this._indentSequence ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\n\t\tif ( !isModelSelectionInCodeBlock( model.document.selection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Outdent command can execute only when there is an indent character sequence\n\t\t// in some of the lines.\n\t\treturn getIndentOutdentPositions( model ).some( position => {\n\t\t\treturn getLastOutdentableSequenceRange( model, position, this._indentSequence );\n\t\t} );\n\t}\n}\n\n// For a position coming from `getIndentOutdentPositions()`, it returns the range representing\n// the last occurrence of the indent sequence among the leading whitespaces of the code line the\n// position represents.\n//\n// For instance, assuming the indent sequence is 4x space (\"    \"):\n//\n//\t\t<codeBlock>foo^</codeBlock>                                 ->          null\n//\t\t<codeBlock>foo^<softBreak></softBreak>bar</codeBlock>       ->          null\n//\t\t<codeBlock>  ^foo</codeBlock>                               ->          null\n//\t\t<codeBlock>        ^foo</codeBlock>                         ->          <codeBlock>    [    ]foo</codeBlock>\n//\t\t<codeBlock>    ^foo    bar</codeBlock>                      ->          <codeBlock>[    ]foo    bar</codeBlock>\n//\n// @param {<module:engine/model/model~Model>} model\n// @param {<module:engine/model/position~Position>} position\n// @param {String} sequence\n// @returns {<module:engine/model/range~Range>|null}\nfunction getLastOutdentableSequenceRange( model, position, sequence ) {\n\t// Positions start before each text node (code line). Get the node corresponding to the position.\n\tconst nodeAtPosition = getCodeLineTextNodeAtPosition( position );\n\n\tif ( !nodeAtPosition ) {\n\t\treturn null;\n\t}\n\n\tconst leadingWhiteSpaces = getLeadingWhiteSpaces( nodeAtPosition );\n\tconst lastIndexOfSequence = leadingWhiteSpaces.lastIndexOf( sequence );\n\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>    \t^foo</codeBlock>           ->             null\n\t//\n\tif ( lastIndexOfSequence + sequence.length !== leadingWhiteSpaces.length ) {\n\t\treturn null;\n\t}\n\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>  ^foo</codeBlock>           ->             null\n\t//\n\tif ( lastIndexOfSequence === -1 ) {\n\t\treturn null;\n\t}\n\n\tconst { parent, startOffset } = nodeAtPosition;\n\n\t// Create a range that contains the **last** indent sequence among the leading whitespaces\n\t// of the line.\n\t//\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>        ^foo</codeBlock>      ->     <codeBlock>    [    ]foo</codeBlock>\n\t//\n\treturn model.createRange(\n\t\tmodel.createPositionAt( parent, startOffset + lastIndexOfSequence ),\n\t\tmodel.createPositionAt( parent, startOffset + lastIndexOfSequence + sequence.length )\n\t);\n}\n\nfunction getCodeLineTextNodeAtPosition( position ) {\n\t// Positions start before each text node (code line). Get the node corresponding to the position.\n\tlet nodeAtPosition = position.parent.getChild( position.index );\n\n\t// <codeBlock>foo^</codeBlock>\n\t// <codeBlock>foo^<softBreak></softBreak>bar</codeBlock>\n\tif ( !nodeAtPosition || nodeAtPosition.is( 'element', 'softBreak' ) ) {\n\t\tnodeAtPosition = position.nodeBefore;\n\t}\n\n\t// <codeBlock>^</codeBlock>\n\t// <codeBlock>foo^<softBreak></softBreak>bar</codeBlock>\n\tif ( !nodeAtPosition || nodeAtPosition.is( 'element', 'softBreak' ) ) {\n\t\treturn null;\n\t}\n\n\treturn nodeAtPosition;\n}\n"]},"metadata":{},"sourceType":"module"}