{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheaderrowcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { updateNumericAttribute } from '../utils/common';\nimport { getRowIndexes, getSelectionAffectedTableCells } from '../utils/selection';\nimport { getVerticallyOverlappingCells, splitHorizontally } from '../utils/structure';\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n *\t\teditor.execute( 'setTableRowHeader' );\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n *\n * @extends module:core/command~Command\n */\n\nexport default class SetHeaderRowCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const selectedCells = getSelectionAffectedTableCells(model.document.selection);\n    const isInTable = selectedCells.length > 0;\n    this.isEnabled = isInTable;\n    /**\n     * Flag indicating whether the command is active. The command is active when the\n     * {@link module:engine/model/selection~Selection} is in a header row.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #value\n     */\n\n    this.value = isInTable && selectedCells.every(cell => this._isInHeading(cell, cell.parent.parent));\n  }\n  /**\n   * Executes the command.\n   *\n   * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n   *\n   * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n   *\n   * @fires execute\n   * @param {Object} options\n   * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) the header rows according to\n   * the `forceValue` parameter instead of the current model state.\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (options.forceValue === this.value) {\n      return;\n    }\n\n    const model = this.editor.model;\n    const selectedCells = getSelectionAffectedTableCells(model.document.selection);\n    const table = selectedCells[0].findAncestor('table');\n    const {\n      first,\n      last\n    } = getRowIndexes(selectedCells);\n    const headingRowsToSet = this.value ? first : last + 1;\n    const currentHeadingRows = table.getAttribute('headingRows') || 0;\n    model.change(writer => {\n      if (headingRowsToSet) {\n        // Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n        // Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n        const startRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n        const overlappingCells = getVerticallyOverlappingCells(table, headingRowsToSet, startRow);\n\n        for (const {\n          cell\n        } of overlappingCells) {\n          splitHorizontally(cell, headingRowsToSet, writer);\n        }\n      }\n\n      updateNumericAttribute('headingRows', headingRowsToSet, table, writer, 0);\n    });\n  }\n  /**\n   * Checks if a table cell is in the heading section.\n   *\n   * @param {module:engine/model/element~Element} tableCell\n   * @param {module:engine/model/element~Element} table\n   * @returns {Boolean}\n   * @private\n   */\n\n\n  _isInHeading(tableCell, table) {\n    const headingRows = parseInt(table.getAttribute('headingRows') || 0);\n    return !!headingRows && tableCell.parent.index < headingRows;\n  }\n\n}","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/node_modules/@ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.js"],"names":["Command","updateNumericAttribute","getRowIndexes","getSelectionAffectedTableCells","getVerticallyOverlappingCells","splitHorizontally","SetHeaderRowCommand","refresh","model","editor","selectedCells","document","selection","isInTable","length","isEnabled","value","every","cell","_isInHeading","parent","execute","options","forceValue","table","findAncestor","first","last","headingRowsToSet","currentHeadingRows","getAttribute","change","writer","startRow","overlappingCells","tableCell","headingRows","parseInt","index"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,SAASC,sBAAT,QAAuC,iBAAvC;AACA,SAASC,aAAT,EAAwBC,8BAAxB,QAA8D,oBAA9D;AACA,SAASC,6BAAT,EAAwCC,iBAAxC,QAAiE,oBAAjE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCN,OAAlC,CAA0C;AACxD;AACD;AACA;AACCO,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,aAAa,GAAGP,8BAA8B,CAAEK,KAAK,CAACG,QAAN,CAAeC,SAAjB,CAApD;AACA,UAAMC,SAAS,GAAGH,aAAa,CAACI,MAAd,GAAuB,CAAzC;AAEA,SAAKC,SAAL,GAAiBF,SAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKG,KAAL,GAAaH,SAAS,IAAIH,aAAa,CAACO,KAAd,CAAqBC,IAAI,IAAI,KAAKC,YAAL,CAAmBD,IAAnB,EAAyBA,IAAI,CAACE,MAAL,CAAYA,MAArC,CAA7B,CAA1B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,GAAiB;AAAA,QAAfC,OAAe,uEAAL,EAAK;;AACvB,QAAKA,OAAO,CAACC,UAAR,KAAuB,KAAKP,KAAjC,EAAyC;AACxC;AACA;;AACD,UAAMR,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,aAAa,GAAGP,8BAA8B,CAAEK,KAAK,CAACG,QAAN,CAAeC,SAAjB,CAApD;AACA,UAAMY,KAAK,GAAGd,aAAa,CAAE,CAAF,CAAb,CAAmBe,YAAnB,CAAiC,OAAjC,CAAd;AAEA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBzB,aAAa,CAAEQ,aAAF,CAArC;AACA,UAAMkB,gBAAgB,GAAG,KAAKZ,KAAL,GAAaU,KAAb,GAAqBC,IAAI,GAAG,CAArD;AACA,UAAME,kBAAkB,GAAGL,KAAK,CAACM,YAAN,CAAoB,aAApB,KAAuC,CAAlE;AAEAtB,IAAAA,KAAK,CAACuB,MAAN,CAAcC,MAAM,IAAI;AACvB,UAAKJ,gBAAL,EAAwB;AACvB;AACA;AACA,cAAMK,QAAQ,GAAGL,gBAAgB,GAAGC,kBAAnB,GAAwCA,kBAAxC,GAA6D,CAA9E;AACA,cAAMK,gBAAgB,GAAG9B,6BAA6B,CAAEoB,KAAF,EAASI,gBAAT,EAA2BK,QAA3B,CAAtD;;AAEA,aAAM,MAAM;AAAEf,UAAAA;AAAF,SAAZ,IAAwBgB,gBAAxB,EAA2C;AAC1C7B,UAAAA,iBAAiB,CAAEa,IAAF,EAAQU,gBAAR,EAA0BI,MAA1B,CAAjB;AACA;AACD;;AAED/B,MAAAA,sBAAsB,CAAE,aAAF,EAAiB2B,gBAAjB,EAAmCJ,KAAnC,EAA0CQ,MAA1C,EAAkD,CAAlD,CAAtB;AACA,KAbD;AAcA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCb,EAAAA,YAAY,CAAEgB,SAAF,EAAaX,KAAb,EAAqB;AAChC,UAAMY,WAAW,GAAGC,QAAQ,CAAEb,KAAK,CAACM,YAAN,CAAoB,aAApB,KAAuC,CAAzC,CAA5B;AAEA,WAAO,CAAC,CAACM,WAAF,IAAiBD,SAAS,CAACf,MAAV,CAAiBkB,KAAjB,GAAyBF,WAAjD;AACA;;AA1EuD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheaderrowcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\nimport { updateNumericAttribute } from '../utils/common';\nimport { getRowIndexes, getSelectionAffectedTableCells } from '../utils/selection';\nimport { getVerticallyOverlappingCells, splitHorizontally } from '../utils/structure';\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n *\t\teditor.execute( 'setTableRowHeader' );\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selectedCells = getSelectionAffectedTableCells( model.document.selection );\n\t\tconst isInTable = selectedCells.length > 0;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header row.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && selectedCells.every( cell => this._isInHeading( cell, cell.parent.parent ) );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n\t *\n\t * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n\t *\n\t * @fires execute\n\t * @param {Object} options\n\t * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) the header rows according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */\n\texecute( options = {} ) {\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = this.editor.model;\n\t\tconst selectedCells = getSelectionAffectedTableCells( model.document.selection );\n\t\tconst table = selectedCells[ 0 ].findAncestor( 'table' );\n\n\t\tconst { first, last } = getRowIndexes( selectedCells );\n\t\tconst headingRowsToSet = this.value ? first : last + 1;\n\t\tconst currentHeadingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRowsToSet ) {\n\t\t\t\t// Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n\t\t\t\t// Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n\t\t\t\tconst startRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n\t\t\t\tconst overlappingCells = getVerticallyOverlappingCells( table, headingRowsToSet, startRow );\n\n\t\t\t\tfor ( const { cell } of overlappingCells ) {\n\t\t\t\t\tsplitHorizontally( cell, headingRowsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingRows', headingRowsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isInHeading( tableCell, table ) {\n\t\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) || 0 );\n\n\t\treturn !!headingRows && tableCell.parent.index < headingRows;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}