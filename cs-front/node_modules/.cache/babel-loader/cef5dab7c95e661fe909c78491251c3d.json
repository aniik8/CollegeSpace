{"ast":null,"code":"var _jsxFileName = \"/Users/jaibhole/Documents/CS/cs-front/src/Component/UpdateQ.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport BaseUrl from './BaseUrl';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport EditorToolbar, { modules, formats } from \"../EditorToolbar\";\nimport useHistory from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UpdateQ = props => {\n  _s();\n\n  const [prevData, setprevData] = useState([]);\n  const [newData, setNewData] = useState({\n    question: \"\"\n  });\n  const BaseUrl = `http://127.0.0.1:8000`;\n  const history = useHistory();\n  useEffect(() => {\n    fetch(`${BaseUrl}${history.location.pathname}`).then(data => data.json()).then(response => setprevData(response));\n  }, [setprevData]);\n\n  const setData = e => {\n    setprevData({ ...prevData,\n      [e.target.name]: props.data[0].question\n    }); //Set up the update method in both question and answer. \n    // Login and logout of a user \n    //checking if current user is the one updating/ writing the stuffs :-)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        id: \"Editor\",\n        style: {\n          width: \"75%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(EditorToolbar, {\n          toolbarId: 't1'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n          theme: \"snow\",\n          defaultValue: prevData.question,\n          onChange: setData,\n          name: \"ques\",\n          placeholder: \"Write something awesome...\",\n          modules: modules('t1'),\n          formats: formats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-outline-success\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-outline-danger\",\n          onClick: () => setNewData(\"Aniket\"),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateQ, \"nDf1m4pCFO/RAimHXgc4Lr3bQBE=\", false, function () {\n  return [useHistory];\n});\n\n_c = UpdateQ;\nexport default UpdateQ;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateQ\");","map":{"version":3,"sources":["/Users/jaibhole/Documents/CS/cs-front/src/Component/UpdateQ.js"],"names":["React","useEffect","useState","BaseUrl","ReactQuill","EditorToolbar","modules","formats","useHistory","UpdateQ","props","prevData","setprevData","newData","setNewData","question","history","fetch","location","pathname","then","data","json","response","setData","e","target","name","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,iCAAP;AACA,OAAOC,aAAP,IAAwBC,OAAxB,EAAiCC,OAAjC,QAAgD,kBAAhD;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC;AAACa,IAAAA,QAAQ,EAAE;AAAX,GAAD,CAAtC;AACA,QAAMZ,OAAO,GAAI,uBAAjB;AACA,QAAMa,OAAO,GAAGR,UAAU,EAA1B;AACAP,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,KAAK,CAAE,GAAEd,OAAQ,GAAEa,OAAO,CAACE,QAAR,CAAiBC,QAAS,EAAxC,CAAL,CACCC,IADD,CACOC,IAAD,IAASA,IAAI,CAACC,IAAL,EADf,EAECF,IAFD,CAEOG,QAAD,IAAaX,WAAW,CAACW,QAAD,CAF9B;AAGH,GAJQ,EAIN,CAACX,WAAD,CAJM,CAAT;;AAMA,QAAMY,OAAO,GAAIC,CAAD,IACZ;AACIb,IAAAA,WAAW,CAAC,EACR,GAAGD,QADK;AAER,OAACc,CAAC,CAACC,MAAF,CAASC,IAAV,GAAkBjB,KAAK,CAACW,IAAN,CAAW,CAAX,EAAcN;AAFxB,KAAD,CAAX,CADJ,CAKG;AACA;AACA;AACF,GATL;;AAYA,sBACI;AAAA,2BACE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,EAAE,EAAC,QAA9B;AAAuC,QAAA,KAAK,EAAE;AAACa,UAAAA,KAAK,EAAG;AAAT,SAA9C;AAAA,gCACI,QAAC,aAAD;AAAe,UAAA,SAAS,EAAE;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,UAAD;AACI,UAAA,KAAK,EAAC,MADV;AAEI,UAAA,YAAY,EAAEjB,QAAQ,CAACI,QAF3B;AAGI,UAAA,QAAQ,EAAES,OAHd;AAII,UAAA,IAAI,EAAC,MAJT;AAKI,UAAA,WAAW,EAAE,4BALjB;AAMI,UAAA,OAAO,EAAElB,OAAO,CAAC,IAAD,CANpB;AAOI,UAAA,OAAO,EAAEC;AAPb;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAUA;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,yBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVA,eAWA;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,wBAAhC;AAAyD,UAAA,OAAO,EAAE,MAAKO,UAAU,CAAC,QAAD,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CA3CD;;GAAML,O;UAIcD,U;;;KAJdC,O;AA6CN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport BaseUrl from './BaseUrl';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport EditorToolbar, { modules, formats } from \"../EditorToolbar\";\nimport useHistory from 'react-router-dom'\n\nconst UpdateQ = (props) => {\n    const [prevData, setprevData] = useState([]);\n    const [newData, setNewData] = useState({question: \"\"});\n    const BaseUrl = `http://127.0.0.1:8000`;\n    const history = useHistory();\n    useEffect(() => {\n        fetch(`${BaseUrl}${history.location.pathname}`)\n        .then((data)=> data.json())\n        .then((response)=> setprevData(response)); \n    }, [setprevData])\n\n    const setData = (e) => \n        {\n            setprevData({\n                ...prevData,\n                [e.target.name] : props.data[0].question\n        })\n           //Set up the update method in both question and answer. \n           // Login and logout of a user \n           //checking if current user is the one updating/ writing the stuffs :-)\n        }\n            \n    \n    return (\n        <div>\n          <>\n            <div className='container' id=\"Editor\" style={{width : \"75%\"}}> \n                <EditorToolbar toolbarId={'t1'}/>\n                <ReactQuill\n                    theme=\"snow\"\n                    defaultValue={prevData.question}\n                    onChange={setData}\n                    name=\"ques\"\n                    placeholder={\"Write something awesome...\"}\n                    modules={modules('t1')}\n                    formats={formats}/>\n            <button type='button' className='btn btn-outline-success'>Submit</button>\n            <button type='submit' className='btn btn-outline-danger' onClick={()=> setNewData(\"Aniket\")}>Cancel</button>\n            </div>\n\n        </>  \n        </div>\n    )\n}\n\nexport default UpdateQ\n\n"]},"metadata":{},"sourceType":"module"}